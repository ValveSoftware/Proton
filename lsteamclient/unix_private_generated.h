/* This file is auto-generated, do not edit. */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct u_ISteamClient_SteamClient006
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t CreateGlobalUser( int32_t * ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t * ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void * GetIVAC( int32_t ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual const char * GetUniverseName( uint32_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void * GetISteamBilling( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamContentServer*/ * GetISteamContentServer( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMasterServerUpdater*/ * GetISteamMasterServerUpdater( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser004
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual void LogOn( CSteamID ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual uint32_t GetLogonState(  ) = 0;
    virtual int8_t BConnected(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t IsVACBanned( int32_t ) = 0;
    virtual int8_t RequireShowVACBannedMessage( int32_t ) = 0;
    virtual void AcknowledgeVACBanning( int32_t ) = 0;
    virtual int32_t NClientGameIDAdd( int32_t ) = 0;
    virtual void RemoveClientGame( int32_t ) = 0;
    virtual void SetClientGameServer( int32_t, uint32_t, uint16_t ) = 0;
    virtual void SetSteam2Ticket( uint8_t *, int32_t ) = 0;
    virtual void AddServerNetAddress( uint32_t, uint16_t ) = 0;
    virtual int8_t SetEmail( const char * ) = 0;
    virtual int32_t GetSteamGameConnectToken( void *, int32_t ) = 0;
    virtual int8_t SetRegistryString( uint32_t, const char *, const char * ) = 0;
    virtual int8_t GetRegistryString( uint32_t, const char *, char *, int32_t ) = 0;
    virtual int8_t SetRegistryInt( uint32_t, const char *, int32_t ) = 0;
    virtual int8_t GetRegistryInt( uint32_t, const char *, int32_t * ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, int32_t, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void SetSelfAsPrimaryChatDestination(  ) = 0;
    virtual int8_t IsPrimaryChatDestination(  ) = 0;
    virtual void RequestLegacyCDKey( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends001
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual void SetPersonaState( uint32_t ) = 0;
    virtual int8_t AddFriend( CSteamID ) = 0;
    virtual int8_t RemoveFriend( CSteamID ) = 0;
    virtual int8_t HasFriend( CSteamID ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual int8_t Deprecated_GetFriendGamePlayed( CSteamID, int32_t *, uint32_t *, uint16_t * ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int32_t AddFriendByName( const char * ) = 0;
    virtual int32_t GetFriendCount(  ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t ) = 0;
    virtual void SendMsgToFriend( CSteamID, uint32_t, const char * ) = 0;
    virtual void SetFriendRegValue( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetFriendRegValue( CSteamID, const char * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int32_t GetChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t SendMsgToFriend( CSteamID, uint32_t, const void *, int32_t ) = 0;
    virtual int32_t GetChatIDOfChatHistoryStart( CSteamID ) = 0;
    virtual void SetChatHistoryStart( CSteamID, int32_t ) = 0;
    virtual void ClearChatHistory( CSteamID ) = 0;
    virtual int8_t InviteFriendByEmail( const char * ) = 0;
    virtual int32_t GetBlockedFriendCount(  ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, uint64_t *, uint32_t *, uint16_t * ) = 0;
    virtual int8_t GetFriendGamePlayed2( CSteamID, uint64_t *, uint32_t *, uint16_t *, uint16_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils002
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking001
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint32_t ) = 0;
    virtual int8_t GetFavoriteGame2( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame2( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame2( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void RequestLobbyList( uint64_t, MatchMakingKeyValuePair_t *, uint32_t ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual void CreateLobby( uint64_t, int8_t ) = 0;
    virtual void JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmakingServers_SteamMatchMakingServers001
{
#ifdef __cplusplus
    virtual void RequestInternetServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_099u * ) = 0;
    virtual void RequestLANServerList( uint32_t, u_ISteamMatchmakingServerListResponse_099u * ) = 0;
    virtual void RequestFriendsServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_099u * ) = 0;
    virtual void RequestFavoritesServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_099u * ) = 0;
    virtual void RequestHistoryServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_099u * ) = 0;
    virtual void RequestSpectatorServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_099u * ) = 0;
    virtual gameserveritem_t_105 * GetServerDetails( uint32_t, int32_t ) = 0;
    virtual void CancelQuery( uint32_t ) = 0;
    virtual void RefreshQuery( uint32_t ) = 0;
    virtual int8_t IsRefreshing( uint32_t ) = 0;
    virtual int32_t GetServerCount( uint32_t ) = 0;
    virtual void RefreshServer( uint32_t, int32_t ) = 0;
    virtual int32_t PingServer( uint32_t, uint16_t, u_ISteamMatchmakingPingResponse * ) = 0;
    virtual int32_t PlayerDetails( uint32_t, uint16_t, u_ISteamMatchmakingPlayersResponse * ) = 0;
    virtual int32_t ServerRules( uint32_t, uint16_t, u_ISteamMatchmakingRulesResponse * ) = 0;
    virtual void CancelServerQuery( int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint32_t GetNumStats( CGameID ) = 0;
    virtual const char * GetStatName( CGameID, uint32_t ) = 0;
    virtual uint32_t GetStatType( CGameID, const char * ) = 0;
    virtual uint32_t GetNumAchievements( CGameID ) = 0;
    virtual const char * GetAchievementName( CGameID, uint32_t ) = 0;
    virtual uint32_t GetNumGroupAchievements( CGameID ) = 0;
    virtual const char * GetGroupAchievementName( CGameID, uint32_t ) = 0;
    virtual int8_t RequestCurrentStats( CGameID ) = 0;
    virtual int8_t GetStat( CGameID, const char *, int32_t * ) = 0;
    virtual int8_t GetStat( CGameID, const char *, float * ) = 0;
    virtual int8_t SetStat( CGameID, const char *, int32_t ) = 0;
    virtual int8_t SetStat( CGameID, const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( CGameID, const char *, float, double ) = 0;
    virtual int8_t GetAchievement( CGameID, const char *, int8_t * ) = 0;
    virtual int8_t GetGroupAchievement( CGameID, const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( CGameID, const char * ) = 0;
    virtual int8_t SetGroupAchievement( CGameID, const char * ) = 0;
    virtual int8_t StoreStats( CGameID ) = 0;
    virtual int8_t ClearAchievement( CGameID, const char * ) = 0;
    virtual int8_t ClearGroupAchievement( CGameID, const char * ) = 0;
    virtual int32_t GetAchievementIcon( CGameID, const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( CGameID, const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual int32_t GetAppData( uint32_t, const char *, char *, int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworking_SteamNetworking001
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocket( int32_t, uint32_t, uint16_t ) = 0;
    virtual uint32_t CreateP2PConnectionSocket( CSteamID, int32_t, int32_t ) = 0;
    virtual uint32_t CreateConnectionSocket( uint32_t, uint16_t, int32_t ) = 0;
    virtual int8_t DestroySocket( uint32_t, int8_t ) = 0;
    virtual int8_t DestroyListenSocket( uint32_t, int8_t ) = 0;
    virtual int8_t SendDataOnSocket( uint32_t, void *, uint32_t, int8_t ) = 0;
    virtual int8_t IsDataAvailableOnSocket( uint32_t, uint32_t * ) = 0;
    virtual int8_t RetrieveDataFromSocket( uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual int8_t IsDataAvailable( uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t RetrieveData( uint32_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetSocketInfo( uint32_t, CSteamID *, int32_t *, uint32_t *, uint16_t * ) = 0;
    virtual int8_t GetListenSocketInfo( uint32_t, uint32_t *, uint16_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer002
{
#ifdef __cplusplus
    virtual void LogOn(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual void GSSetSpawnCount( uint32_t ) = 0;
    virtual int8_t GSGetSteam2GetEncryptionKeyToSendToNewClient( void *, uint32_t *, uint32_t ) = 0;
    virtual int8_t GSSendSteam2UserConnect( uint32_t, const void *, uint32_t, uint32_t, uint16_t, const void *, uint32_t ) = 0;
    virtual int8_t GSSendSteam3UserConnect( CSteamID, uint32_t, const void *, uint32_t ) = 0;
    virtual int8_t GSRemoveUserConnect( uint32_t ) = 0;
    virtual int8_t GSSendUserDisconnect( CSteamID, uint32_t ) = 0;
    virtual int8_t GSSendUserStatusResponse( CSteamID, int32_t, int32_t ) = 0;
    virtual int8_t Obsolete_GSSetStatus( int32_t, uint32_t, int32_t, int32_t, int32_t, int32_t, const char *, const char *, const char *, const char * ) = 0;
    virtual int8_t GSUpdateStatus( int32_t, int32_t, int32_t, const char *, const char * ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t GSSetServerType( int32_t, uint32_t, uint32_t, uint32_t, const char *, const char * ) = 0;
    virtual int8_t GSSetServerType2( int32_t, uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, const char *, const char *, int8_t ) = 0;
    virtual int8_t GSUpdateStatus2( int32_t, int32_t, int32_t, const char *, const char *, const char * ) = 0;
    virtual int8_t GSCreateUnauthenticatedUser( CSteamID * ) = 0;
    virtual int8_t GSSetUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual void GSUpdateSpectatorPort( uint16_t ) = 0;
    virtual void GSSetGameType( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMasterServerUpdater_SteamMasterServerUpdater001
{
#ifdef __cplusplus
    virtual void SetActive( int8_t ) = 0;
    virtual void SetHeartbeatInterval( int32_t ) = 0;
    virtual int8_t HandleIncomingPacket( const void *, int32_t, uint32_t, uint16_t ) = 0;
    virtual int32_t GetNextOutgoingPacket( void *, int32_t, uint32_t *, uint16_t * ) = 0;
    virtual void SetBasicServerData( uint16_t, int8_t, const char *, const char *, uint16_t, int8_t, const char * ) = 0;
    virtual void ClearAllKeyValues(  ) = 0;
    virtual void SetKeyValue( const char *, const char * ) = 0;
    virtual void NotifyShutdown(  ) = 0;
    virtual int8_t WasRestartRequested(  ) = 0;
    virtual void ForceHeartbeat(  ) = 0;
    virtual int8_t AddMasterServer( const char * ) = 0;
    virtual int8_t RemoveMasterServer( const char * ) = 0;
    virtual int32_t GetNumMasterServers(  ) = 0;
    virtual int32_t GetMasterServerAddress( int32_t, char *, int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser005
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual void LogOn( CSteamID ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual uint32_t GetLogonState(  ) = 0;
    virtual int8_t BConnected(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t IsVACBanned( int32_t ) = 0;
    virtual int8_t RequireShowVACBannedMessage( int32_t ) = 0;
    virtual void AcknowledgeVACBanning( int32_t ) = 0;
    virtual void SetSteam2Ticket( uint8_t *, int32_t ) = 0;
    virtual void AddServerNetAddress( uint32_t, uint16_t ) = 0;
    virtual int8_t SetEmail( const char * ) = 0;
    virtual int8_t SetRegistryString( uint32_t, const char *, const char * ) = 0;
    virtual int8_t GetRegistryString( uint32_t, const char *, char *, int32_t ) = 0;
    virtual int8_t SetRegistryInt( uint32_t, const char *, int32_t ) = 0;
    virtual int8_t GetRegistryInt( uint32_t, const char *, int32_t * ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, CGameID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void SetSelfAsPrimaryChatDestination(  ) = 0;
    virtual int8_t IsPrimaryChatDestination(  ) = 0;
    virtual void RequestLegacyCDKey( uint32_t ) = 0;
    virtual int8_t SendGuestPassByEmail( const char *, uint64_t, int8_t ) = 0;
    virtual int8_t SendGuestPassByAccountID( uint32_t, uint64_t, int8_t ) = 0;
    virtual int8_t AckGuestPass( const char * ) = 0;
    virtual int8_t RedeemGuestPass( const char * ) = 0;
    virtual uint32_t GetGuestPassToGiveCount(  ) = 0;
    virtual uint32_t GetGuestPassToRedeemCount(  ) = 0;
    virtual uint32_t GetGuestPassLastUpdateTime(  ) = 0;
    virtual int8_t GetGuestPassToGiveInfo( uint32_t, uint64_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, char *, int32_t ) = 0;
    virtual int8_t GetGuestPassToRedeemInfo( uint32_t, uint64_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetGuestPassToRedeemSenderAddress( uint32_t, char *, int32_t ) = 0;
    virtual int8_t GetGuestPassToRedeemSenderName( uint32_t, char *, int32_t ) = 0;
    virtual void AcknowledgeMessageByGID( const char * ) = 0;
    virtual int8_t SetLanguage( const char * ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual void SetAccountName( const char * ) = 0;
    virtual void SetPassword( const char * ) = 0;
    virtual void SetAccountCreationTime( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser006
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual void LogOn( CSteamID ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t SetRegistryString( uint32_t, const char *, const char * ) = 0;
    virtual int8_t GetRegistryString( uint32_t, const char *, char *, int32_t ) = 0;
    virtual int8_t SetRegistryInt( uint32_t, const char *, int32_t ) = 0;
    virtual int8_t GetRegistryInt( uint32_t, const char *, int32_t * ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, CGameID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser007
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual void LogOn( CSteamID ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t SetRegistryString( uint32_t, const char *, const char * ) = 0;
    virtual int8_t GetRegistryString( uint32_t, const char *, char *, int32_t ) = 0;
    virtual int8_t SetRegistryInt( uint32_t, const char *, int32_t ) = 0;
    virtual int8_t GetRegistryInt( uint32_t, const char *, int32_t * ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, CGameID, uint32_t, uint16_t, int8_t, void *, int32_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual void RefreshSteam2Login(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser008
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, CGameID *, uint32_t, uint16_t, int8_t, void *, int32_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual void RefreshSteam2Login(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends002
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual void SetPersonaState( uint32_t ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual void SetFriendRegValue( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetFriendRegValue( CSteamID, const char * ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, uint64_t *, uint32_t *, uint16_t *, uint16_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t AddFriend( CSteamID ) = 0;
    virtual int8_t RemoveFriend( CSteamID ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t AddFriendByName( const char * ) = 0;
    virtual int8_t InviteFriendByEmail( const char * ) = 0;
    virtual int32_t GetChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t SendMsgToFriend( CSteamID, uint32_t, const void *, int32_t ) = 0;
    virtual int32_t GetChatIDOfChatHistoryStart( CSteamID ) = 0;
    virtual void SetChatHistoryStart( CSteamID, int32_t ) = 0;
    virtual void ClearChatHistory( CSteamID ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual int8_t InviteFriendToClan( CSteamID, CSteamID ) = 0;
    virtual int8_t AcknowledgeInviteToClan( CSteamID, int8_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002
{
#ifdef __cplusplus
    virtual uint32_t GetNumStats( CGameID ) = 0;
    virtual const char * GetStatName( CGameID, uint32_t ) = 0;
    virtual uint32_t GetStatType( CGameID, const char * ) = 0;
    virtual uint32_t GetNumAchievements( CGameID ) = 0;
    virtual const char * GetAchievementName( CGameID, uint32_t ) = 0;
    virtual int8_t RequestCurrentStats( CGameID ) = 0;
    virtual int8_t GetStat( CGameID, const char *, int32_t * ) = 0;
    virtual int8_t GetStat( CGameID, const char *, float * ) = 0;
    virtual int8_t SetStat( CGameID, const char *, int32_t ) = 0;
    virtual int8_t SetStat( CGameID, const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( CGameID, const char *, float, double ) = 0;
    virtual int8_t GetAchievement( CGameID, const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( CGameID, const char * ) = 0;
    virtual int8_t ClearAchievement( CGameID, const char * ) = 0;
    virtual int8_t StoreStats( CGameID ) = 0;
    virtual int32_t GetAchievementIcon( CGameID, const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( CGameID, const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( CGameID, const char *, uint32_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer003
{
#ifdef __cplusplus
    virtual void LogOn(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t GSGetSteam2GetEncryptionKeyToSendToNewClient( void *, uint32_t *, uint32_t ) = 0;
    virtual int8_t GSSendUserConnect( uint32_t, uint32_t, uint16_t, const void *, uint32_t ) = 0;
    virtual int8_t GSRemoveUserConnect( uint32_t ) = 0;
    virtual int8_t GSSendUserDisconnect( CSteamID, uint32_t ) = 0;
    virtual void GSSetSpawnCount( uint32_t ) = 0;
    virtual int8_t GSSetServerType( int32_t, uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, const char *, const char *, int8_t ) = 0;
    virtual int8_t GSUpdateStatus( int32_t, int32_t, int32_t, const char *, const char *, const char * ) = 0;
    virtual int8_t GSCreateUnauthenticatedUser( CSteamID * ) = 0;
    virtual int8_t GSSetUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual void GSUpdateSpectatorPort( uint16_t ) = 0;
    virtual void GSSetGameType( const char * ) = 0;
    virtual int8_t GSGetUserAchievementStatus( CSteamID, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient007
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t * ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamContentServer*/ * GetISteamContentServer( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMasterServerUpdater*/ * GetISteamMasterServerUpdater( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser009
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, CGameID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual void RefreshSteam2Login(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends003
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int32_t GetFriendAvatar( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, uint64_t *, uint32_t *, uint16_t *, uint16_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking002
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void RequestLobbyList(  ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual void CreateLobby( int8_t ) = 0;
    virtual void JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer004
{
#ifdef __cplusplus
    virtual void LogOn(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual void SendUserConnectAndAuthenticate( CSteamID, uint32_t, void *, uint32_t ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual int8_t BSetServerType( int32_t, uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, const char *, const char *, int8_t ) = 0;
    virtual void UpdateServerStatus( int32_t, int32_t, int32_t, const char *, const char *, const char * ) = 0;
    virtual void UpdateSpectatorPort( uint16_t ) = 0;
    virtual void SetGameType( const char * ) = 0;
    virtual int8_t BGetUserAchievementStatus( CSteamID, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser010
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION002
{
#ifdef __cplusplus
    virtual int8_t BIsSubscribed(  ) = 0;
    virtual int8_t BIsLowViolence(  ) = 0;
    virtual int8_t BIsCybercafe(  ) = 0;
    virtual int8_t BIsVACBanned(  ) = 0;
    virtual const char * GetCurrentGameLanguage(  ) = 0;
    virtual const char * GetAvailableGameLanguages(  ) = 0;
    virtual int8_t BIsSubscribedApp( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer005
{
#ifdef __cplusplus
    virtual void LogOn(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual int8_t BSetServerType( uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, const char *, const char *, int8_t ) = 0;
    virtual void UpdateServerStatus( int32_t, int32_t, int32_t, const char *, const char *, const char * ) = 0;
    virtual void UpdateSpectatorPort( uint16_t ) = 0;
    virtual void SetGameType( const char * ) = 0;
    virtual int8_t BGetUserAchievementStatus( CSteamID, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser011
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetCompressedVoice( void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressVoice( void *, uint32_t, void *, uint32_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends004
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int32_t GetFriendAvatar( CSteamID, int32_t ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, uint64_t *, uint32_t *, uint16_t *, uint16_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking003
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void RequestLobbyList(  ) = 0;
    virtual void AddRequestLobbyListFilter( const char *, const char * ) = 0;
    virtual void AddRequestLobbyListNumericalFilter( const char *, int32_t, int32_t ) = 0;
    virtual void AddRequestLobbyListSlotsAvailableFilter(  ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual void CreateLobby( int8_t ) = 0;
    virtual void JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
    virtual int8_t GetLobbyGameServer( CSteamID, uint32_t *, uint16_t *, CSteamID * ) = 0;
    virtual int8_t SetLobbyMemberLimit( CSteamID, int32_t ) = 0;
    virtual int32_t GetLobbyMemberLimit( CSteamID ) = 0;
    virtual void SetLobbyVoiceEnabled( CSteamID, int8_t ) = 0;
    virtual int8_t RequestFriendsLobbies(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking004
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void RequestLobbyList(  ) = 0;
    virtual void AddRequestLobbyListFilter( const char *, const char * ) = 0;
    virtual void AddRequestLobbyListNumericalFilter( const char *, int32_t, int32_t ) = 0;
    virtual void AddRequestLobbyListSlotsAvailableFilter(  ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual void CreateLobby( int8_t ) = 0;
    virtual void JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
    virtual int8_t GetLobbyGameServer( CSteamID, uint32_t *, uint16_t *, CSteamID * ) = 0;
    virtual int8_t SetLobbyMemberLimit( CSteamID, int32_t ) = 0;
    virtual int32_t GetLobbyMemberLimit( CSteamID ) = 0;
    virtual int8_t RequestFriendsLobbies(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends005
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int32_t GetFriendAvatar( CSteamID, int32_t ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking005
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void RequestLobbyList(  ) = 0;
    virtual void AddRequestLobbyListFilter( const char *, const char * ) = 0;
    virtual void AddRequestLobbyListNumericalFilter( const char *, int32_t, int32_t ) = 0;
    virtual void AddRequestLobbyListSlotsAvailableFilter(  ) = 0;
    virtual void AddRequestLobbyListNearValueFilter( const char *, int32_t ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual void CreateLobby( uint32_t ) = 0;
    virtual void JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
    virtual int8_t GetLobbyGameServer( CSteamID, uint32_t *, uint16_t *, CSteamID * ) = 0;
    virtual int8_t SetLobbyMemberLimit( CSteamID, int32_t ) = 0;
    virtual int32_t GetLobbyMemberLimit( CSteamID ) = 0;
    virtual int8_t RequestFriendsLobbies(  ) = 0;
    virtual int8_t SetLobbyType( CSteamID, uint32_t ) = 0;
    virtual CSteamID GetLobbyOwner( CSteamID ) = 0;
    virtual float GetLobbyDistance( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworking_SteamNetworking002
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocket( int32_t, uint32_t, uint16_t, int8_t ) = 0;
    virtual uint32_t CreateP2PConnectionSocket( CSteamID, int32_t, int32_t, int8_t ) = 0;
    virtual uint32_t CreateConnectionSocket( uint32_t, uint16_t, int32_t ) = 0;
    virtual int8_t DestroySocket( uint32_t, int8_t ) = 0;
    virtual int8_t DestroyListenSocket( uint32_t, int8_t ) = 0;
    virtual int8_t SendDataOnSocket( uint32_t, void *, uint32_t, int8_t ) = 0;
    virtual int8_t IsDataAvailableOnSocket( uint32_t, uint32_t * ) = 0;
    virtual int8_t RetrieveDataFromSocket( uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual int8_t IsDataAvailable( uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t RetrieveData( uint32_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetSocketInfo( uint32_t, CSteamID *, int32_t *, uint32_t *, uint16_t * ) = 0;
    virtual int8_t GetListenSocketInfo( uint32_t, uint32_t *, uint16_t * ) = 0;
    virtual uint32_t GetSocketConnectionType( uint32_t ) = 0;
    virtual int32_t GetMaxPacketSize( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer008
{
#ifdef __cplusplus
    virtual void LogOn(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual int8_t BSetServerType( uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, const char *, const char *, int8_t ) = 0;
    virtual void UpdateServerStatus( int32_t, int32_t, int32_t, const char *, const char *, const char * ) = 0;
    virtual void UpdateSpectatorPort( uint16_t ) = 0;
    virtual void SetGameType( const char * ) = 0;
    virtual int8_t BGetUserAchievementStatus( CSteamID, const char * ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual uint32_t GetPublicIP(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking006
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual uint64_t RequestLobbyList(  ) = 0;
    virtual void AddRequestLobbyListFilter( const char *, const char * ) = 0;
    virtual void AddRequestLobbyListNumericalFilter( const char *, int32_t, int32_t ) = 0;
    virtual void AddRequestLobbyListNearValueFilter( const char *, int32_t ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual uint64_t CreateLobby( uint32_t ) = 0;
    virtual uint64_t JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
    virtual int8_t GetLobbyGameServer( CSteamID, uint32_t *, uint16_t *, CSteamID * ) = 0;
    virtual int8_t SetLobbyMemberLimit( CSteamID, int32_t ) = 0;
    virtual int32_t GetLobbyMemberLimit( CSteamID ) = 0;
    virtual int8_t SetLobbyType( CSteamID, uint32_t ) = 0;
    virtual CSteamID GetLobbyOwner( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient008
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMasterServerUpdater*/ * GetISteamMasterServerUpdater( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser012
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetCompressedVoice( void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressVoice( void *, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils004
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t IsOverlayEnabled(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_104 *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, int32_t, int32_t *, int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION003
{
#ifdef __cplusplus
    virtual int8_t BIsSubscribed(  ) = 0;
    virtual int8_t BIsLowViolence(  ) = 0;
    virtual int8_t BIsCybercafe(  ) = 0;
    virtual int8_t BIsVACBanned(  ) = 0;
    virtual const char * GetCurrentGameLanguage(  ) = 0;
    virtual const char * GetAvailableGameLanguages(  ) = 0;
    virtual int8_t BIsSubscribedApp( uint32_t ) = 0;
    virtual int8_t BIsDlcInstalled( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking007
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual uint64_t RequestLobbyList(  ) = 0;
    virtual void AddRequestLobbyListStringFilter( const char *, const char *, uint32_t ) = 0;
    virtual void AddRequestLobbyListNumericalFilter( const char *, int32_t, uint32_t ) = 0;
    virtual void AddRequestLobbyListNearValueFilter( const char *, int32_t ) = 0;
    virtual void AddRequestLobbyListFilterSlotsAvailable( int32_t ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual uint64_t CreateLobby( uint32_t, int32_t ) = 0;
    virtual uint64_t JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual int32_t GetLobbyDataCount( CSteamID ) = 0;
    virtual int8_t GetLobbyDataByIndex( CSteamID, int32_t, char *, int32_t, char *, int32_t ) = 0;
    virtual int8_t DeleteLobbyData( CSteamID, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
    virtual int8_t GetLobbyGameServer( CSteamID, uint32_t *, uint16_t *, CSteamID * ) = 0;
    virtual int8_t SetLobbyMemberLimit( CSteamID, int32_t ) = 0;
    virtual int32_t GetLobbyMemberLimit( CSteamID ) = 0;
    virtual int8_t SetLobbyType( CSteamID, uint32_t ) = 0;
    virtual int8_t SetLobbyJoinable( CSteamID, int8_t ) = 0;
    virtual CSteamID GetLobbyOwner( CSteamID ) = 0;
    virtual int8_t SetLobbyOwner( CSteamID, CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_104 *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, uint32_t, int32_t, const int32_t *, int32_t ) = 0;
    virtual uint64_t GetNumberOfCurrentPlayers(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworking_SteamNetworking003
{
#ifdef __cplusplus
    virtual int8_t SendP2PPacket( CSteamID, const void *, uint32_t, uint32_t ) = 0;
    virtual int8_t IsP2PPacketAvailable( uint32_t * ) = 0;
    virtual int8_t ReadP2PPacket( void *, uint32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t AcceptP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t CloseP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t GetP2PSessionState( CSteamID, P2PSessionState_t * ) = 0;
    virtual uint32_t CreateListenSocket( int32_t, uint32_t, uint16_t, int8_t ) = 0;
    virtual uint32_t CreateP2PConnectionSocket( CSteamID, int32_t, int32_t, int8_t ) = 0;
    virtual uint32_t CreateConnectionSocket( uint32_t, uint16_t, int32_t ) = 0;
    virtual int8_t DestroySocket( uint32_t, int8_t ) = 0;
    virtual int8_t DestroyListenSocket( uint32_t, int8_t ) = 0;
    virtual int8_t SendDataOnSocket( uint32_t, void *, uint32_t, int8_t ) = 0;
    virtual int8_t IsDataAvailableOnSocket( uint32_t, uint32_t * ) = 0;
    virtual int8_t RetrieveDataFromSocket( uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual int8_t IsDataAvailable( uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t RetrieveData( uint32_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetSocketInfo( uint32_t, CSteamID *, int32_t *, uint32_t *, uint16_t * ) = 0;
    virtual int8_t GetListenSocketInfo( uint32_t, uint32_t *, uint16_t * ) = 0;
    virtual uint32_t GetSocketConnectionType( uint32_t ) = 0;
    virtual int32_t GetMaxPacketSize( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer009
{
#ifdef __cplusplus
    virtual void LogOn(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual int8_t BSetServerType( uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, const char *, const char *, int8_t ) = 0;
    virtual void UpdateServerStatus( int32_t, int32_t, int32_t, const char *, const char *, const char * ) = 0;
    virtual void UpdateSpectatorPort( uint16_t ) = 0;
    virtual void SetGameType( const char * ) = 0;
    virtual int8_t BGetUserAchievementStatus( CSteamID, const char * ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual uint32_t GetPublicIP(  ) = 0;
    virtual void SetGameData( const char * ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser013
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmakingServers_SteamMatchMakingServers002
{
#ifdef __cplusplus
    virtual void * RequestInternetServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_106 * ) = 0;
    virtual void * RequestLANServerList( uint32_t, u_ISteamMatchmakingServerListResponse_106 * ) = 0;
    virtual void * RequestFriendsServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_106 * ) = 0;
    virtual void * RequestFavoritesServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_106 * ) = 0;
    virtual void * RequestHistoryServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_106 * ) = 0;
    virtual void * RequestSpectatorServerList( uint32_t, MatchMakingKeyValuePair_t **, uint32_t, u_ISteamMatchmakingServerListResponse_106 * ) = 0;
    virtual void ReleaseRequest( void * ) = 0;
    virtual gameserveritem_t_105 * GetServerDetails( void *, int32_t ) = 0;
    virtual void CancelQuery( void * ) = 0;
    virtual void RefreshQuery( void * ) = 0;
    virtual int8_t IsRefreshing( void * ) = 0;
    virtual int32_t GetServerCount( void * ) = 0;
    virtual void RefreshServer( void *, int32_t ) = 0;
    virtual int32_t PingServer( uint32_t, uint16_t, u_ISteamMatchmakingPingResponse * ) = 0;
    virtual int32_t PlayerDetails( uint32_t, uint16_t, u_ISteamMatchmakingPlayersResponse * ) = 0;
    virtual int32_t ServerRules( uint32_t, uint16_t, u_ISteamMatchmakingRulesResponse * ) = 0;
    virtual void CancelServerQuery( int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils005
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t IsOverlayEnabled(  ) = 0;
    virtual int8_t BOverlayNeedsPresent(  ) = 0;
    virtual uint64_t CheckFileSignature( const char * ) = 0;
    virtual int8_t ShowGamepadTextInput( uint32_t, uint32_t, const char *, uint32_t ) = 0;
    virtual uint32_t GetEnteredGamepadTextLength(  ) = 0;
    virtual int8_t GetEnteredGamepadTextInput( char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient009
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMasterServerUpdater*/ * GetISteamMasterServerUpdater( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking008
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual uint64_t RequestLobbyList(  ) = 0;
    virtual void AddRequestLobbyListStringFilter( const char *, const char *, uint32_t ) = 0;
    virtual void AddRequestLobbyListNumericalFilter( const char *, int32_t, uint32_t ) = 0;
    virtual void AddRequestLobbyListNearValueFilter( const char *, int32_t ) = 0;
    virtual void AddRequestLobbyListFilterSlotsAvailable( int32_t ) = 0;
    virtual void AddRequestLobbyListDistanceFilter( uint32_t ) = 0;
    virtual void AddRequestLobbyListResultCountFilter( int32_t ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual uint64_t CreateLobby( uint32_t, int32_t ) = 0;
    virtual uint64_t JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual int32_t GetLobbyDataCount( CSteamID ) = 0;
    virtual int8_t GetLobbyDataByIndex( CSteamID, int32_t, char *, int32_t, char *, int32_t ) = 0;
    virtual int8_t DeleteLobbyData( CSteamID, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
    virtual int8_t GetLobbyGameServer( CSteamID, uint32_t *, uint16_t *, CSteamID * ) = 0;
    virtual int8_t SetLobbyMemberLimit( CSteamID, int32_t ) = 0;
    virtual int32_t GetLobbyMemberLimit( CSteamID ) = 0;
    virtual int8_t SetLobbyType( CSteamID, uint32_t ) = 0;
    virtual int8_t SetLobbyJoinable( CSteamID, int8_t ) = 0;
    virtual CSteamID GetLobbyOwner( CSteamID ) = 0;
    virtual int8_t SetLobbyOwner( CSteamID, CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t GetAchievementAndUnlockTime( const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t GetUserAchievementAndUnlockTime( CSteamID, const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_104 *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, uint32_t, int32_t, const int32_t *, int32_t ) = 0;
    virtual uint64_t GetNumberOfCurrentPlayers(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer010
{
#ifdef __cplusplus
    virtual void LogOn(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual int8_t BSetServerType( uint32_t, uint32_t, uint16_t, uint16_t, uint16_t, const char *, const char *, int8_t ) = 0;
    virtual void UpdateServerStatus( int32_t, int32_t, int32_t, const char *, const char *, const char * ) = 0;
    virtual void UpdateSpectatorPort( uint16_t ) = 0;
    virtual void SetGameTags( const char * ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual uint64_t GetServerReputation(  ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual uint32_t GetPublicIP(  ) = 0;
    virtual void SetGameData( const char * ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServerStats_SteamGameServerStats001
{
#ifdef __cplusplus
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t SetUserStat( CSteamID, const char *, int32_t ) = 0;
    virtual int8_t SetUserStat( CSteamID, const char *, float ) = 0;
    virtual int8_t UpdateUserAvgRateStat( CSteamID, const char *, float, double ) = 0;
    virtual int8_t SetUserAchievement( CSteamID, const char * ) = 0;
    virtual int8_t ClearUserAchievement( CSteamID, const char * ) = 0;
    virtual uint64_t StoreUserStats( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameStats_SteamGameStats001
{
#ifdef __cplusplus
    virtual uint64_t GetNewSession( int8_t, uint64_t, int32_t, uint32_t ) = 0;
    virtual uint64_t EndSession( uint64_t, uint32_t, int32_t ) = 0;
    virtual uint32_t AddSessionAttributeInt( uint64_t, const char *, int32_t ) = 0;
    virtual uint32_t AddSessionAttributeString( uint64_t, const char *, const char * ) = 0;
    virtual uint32_t AddSessionAttributeFloat( uint64_t, const char *, float ) = 0;
    virtual uint32_t AddNewRow( uint64_t *, uint64_t, const char * ) = 0;
    virtual uint32_t CommitRow( uint64_t ) = 0;
    virtual uint32_t CommitOutstandingRows( uint64_t ) = 0;
    virtual uint32_t AddRowAttributeInt( uint64_t, const char *, int32_t ) = 0;
    virtual uint32_t AddRowAtributeString( uint64_t, const char *, const char * ) = 0;
    virtual uint32_t AddRowAttributeFloat( uint64_t, const char *, float ) = 0;
    virtual uint32_t AddSessionAttributeInt64( uint64_t, const char *, int64_t ) = 0;
    virtual uint32_t AddRowAttributeInt64( uint64_t, const char *, int64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameCoordinator_SteamGameCoordinator001
{
#ifdef __cplusplus
    virtual uint32_t SendMessage( uint32_t, const void *, uint32_t ) = 0;
    virtual int8_t IsMessageAvailable( uint32_t * ) = 0;
    virtual uint32_t RetrieveMessage( uint32_t *, void *, uint32_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends006
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int32_t GetFriendAvatar( CSteamID, int32_t ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser014
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends007
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworking_SteamNetworking004
{
#ifdef __cplusplus
    virtual int8_t SendP2PPacket( CSteamID, const void *, uint32_t, uint32_t, int32_t ) = 0;
    virtual int8_t IsP2PPacketAvailable( uint32_t *, int32_t ) = 0;
    virtual int8_t ReadP2PPacket( void *, uint32_t, uint32_t *, CSteamID *, int32_t ) = 0;
    virtual int8_t AcceptP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t CloseP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t GetP2PSessionState( CSteamID, P2PSessionState_t * ) = 0;
    virtual uint32_t CreateListenSocket( int32_t, uint32_t, uint16_t, int8_t ) = 0;
    virtual uint32_t CreateP2PConnectionSocket( CSteamID, int32_t, int32_t, int8_t ) = 0;
    virtual uint32_t CreateConnectionSocket( uint32_t, uint16_t, int32_t ) = 0;
    virtual int8_t DestroySocket( uint32_t, int8_t ) = 0;
    virtual int8_t DestroyListenSocket( uint32_t, int8_t ) = 0;
    virtual int8_t SendDataOnSocket( uint32_t, void *, uint32_t, int8_t ) = 0;
    virtual int8_t IsDataAvailableOnSocket( uint32_t, uint32_t * ) = 0;
    virtual int8_t RetrieveDataFromSocket( uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual int8_t IsDataAvailable( uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t RetrieveData( uint32_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetSocketInfo( uint32_t, CSteamID *, int32_t *, uint32_t *, uint16_t * ) = 0;
    virtual int8_t GetListenSocketInfo( uint32_t, uint32_t *, uint16_t * ) = 0;
    virtual uint32_t GetSocketConnectionType( uint32_t ) = 0;
    virtual int32_t GetMaxPacketSize( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient010
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMasterServerUpdater*/ * GetISteamMasterServerUpdater( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends008
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t GetAchievementAndUnlockTime( const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t GetUserAchievementAndUnlockTime( CSteamID, const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_111x *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, uint32_t, int32_t, const int32_t *, int32_t ) = 0;
    virtual uint64_t AttachLeaderboardUGC( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetNumberOfCurrentPlayers(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION004
{
#ifdef __cplusplus
    virtual int8_t BIsSubscribed(  ) = 0;
    virtual int8_t BIsLowViolence(  ) = 0;
    virtual int8_t BIsCybercafe(  ) = 0;
    virtual int8_t BIsVACBanned(  ) = 0;
    virtual const char * GetCurrentGameLanguage(  ) = 0;
    virtual const char * GetAvailableGameLanguages(  ) = 0;
    virtual int8_t BIsSubscribedApp( uint32_t ) = 0;
    virtual int8_t BIsDlcInstalled( uint32_t ) = 0;
    virtual uint32_t GetEarliestPurchaseUnixTime( uint32_t ) = 0;
    virtual int8_t BIsSubscribedFromFreeWeekend(  ) = 0;
    virtual int32_t GetDLCCount(  ) = 0;
    virtual int8_t BGetDLCDataByIndex( int32_t, uint32_t *, int8_t *, char *, int32_t ) = 0;
    virtual void InstallDLC( uint32_t ) = 0;
    virtual void UninstallDLC( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamAppTicket_STEAMAPPTICKET_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint32_t GetAppOwnershipTicketData( uint32_t, void *, uint32_t, uint32_t *, uint32_t *, uint32_t *, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t GetAchievementAndUnlockTime( const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t GetUserAchievementAndUnlockTime( CSteamID, const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntriesForUsers( uint64_t, CSteamID *, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_111x *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, uint32_t, int32_t, const int32_t *, int32_t ) = 0;
    virtual uint64_t AttachLeaderboardUGC( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetNumberOfCurrentPlayers(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser015
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends009
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworking_SteamNetworking005
{
#ifdef __cplusplus
    virtual int8_t SendP2PPacket( CSteamID, const void *, uint32_t, uint32_t, int32_t ) = 0;
    virtual int8_t IsP2PPacketAvailable( uint32_t *, int32_t ) = 0;
    virtual int8_t ReadP2PPacket( void *, uint32_t, uint32_t *, CSteamID *, int32_t ) = 0;
    virtual int8_t AcceptP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t CloseP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t CloseP2PChannelWithUser( CSteamID, int32_t ) = 0;
    virtual int8_t GetP2PSessionState( CSteamID, P2PSessionState_t * ) = 0;
    virtual int8_t AllowP2PPacketRelay( int8_t ) = 0;
    virtual uint32_t CreateListenSocket( int32_t, uint32_t, uint16_t, int8_t ) = 0;
    virtual uint32_t CreateP2PConnectionSocket( CSteamID, int32_t, int32_t, int8_t ) = 0;
    virtual uint32_t CreateConnectionSocket( uint32_t, uint16_t, int32_t ) = 0;
    virtual int8_t DestroySocket( uint32_t, int8_t ) = 0;
    virtual int8_t DestroyListenSocket( uint32_t, int8_t ) = 0;
    virtual int8_t SendDataOnSocket( uint32_t, void *, uint32_t, int8_t ) = 0;
    virtual int8_t IsDataAvailableOnSocket( uint32_t, uint32_t * ) = 0;
    virtual int8_t RetrieveDataFromSocket( uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual int8_t IsDataAvailable( uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t RetrieveData( uint32_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetSocketInfo( uint32_t, CSteamID *, int32_t *, uint32_t *, uint16_t * ) = 0;
    virtual int8_t GetListenSocketInfo( uint32_t, uint32_t *, uint16_t * ) = 0;
    virtual uint32_t GetSocketConnectionType( uint32_t ) = 0;
    virtual int32_t GetMaxPacketSize( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser016
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t GetAchievementAndUnlockTime( const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t GetUserAchievementAndUnlockTime( CSteamID, const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntriesForUsers( uint64_t, CSteamID *, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_111x *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, uint32_t, int32_t, const int32_t *, int32_t ) = 0;
    virtual uint64_t AttachLeaderboardUGC( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetNumberOfCurrentPlayers(  ) = 0;
    virtual uint64_t RequestGlobalAchievementPercentages(  ) = 0;
    virtual int32_t GetMostAchievedAchievementInfo( char *, uint32_t, float *, int8_t * ) = 0;
    virtual int32_t GetNextMostAchievedAchievementInfo( int32_t, char *, uint32_t, float *, int8_t * ) = 0;
    virtual int8_t GetAchievementAchievedPercent( const char *, float * ) = 0;
    virtual uint64_t RequestGlobalStats( int32_t ) = 0;
    virtual int8_t GetGlobalStat( const char *, int64_t * ) = 0;
    virtual int8_t GetGlobalStat( const char *, double * ) = 0;
    virtual int32_t GetGlobalStatHistory( const char *, int64_t *, uint32_t ) = 0;
    virtual int32_t GetGlobalStatHistory( const char *, double *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint32_t CreateHTTPRequest( uint32_t, const char * ) = 0;
    virtual int8_t SetHTTPRequestContextValue( uint32_t, uint64_t ) = 0;
    virtual int8_t SetHTTPRequestNetworkActivityTimeout( uint32_t, uint32_t ) = 0;
    virtual int8_t SetHTTPRequestHeaderValue( uint32_t, const char *, const char * ) = 0;
    virtual int8_t SetHTTPRequestGetOrPostParameter( uint32_t, const char *, const char * ) = 0;
    virtual int8_t SendHTTPRequest( uint32_t, uint64_t * ) = 0;
    virtual int8_t DeferHTTPRequest( uint32_t ) = 0;
    virtual int8_t PrioritizeHTTPRequest( uint32_t ) = 0;
    virtual int8_t GetHTTPResponseHeaderSize( uint32_t, const char *, uint32_t * ) = 0;
    virtual int8_t GetHTTPResponseHeaderValue( uint32_t, const char *, uint8_t *, uint32_t ) = 0;
    virtual int8_t GetHTTPResponseBodySize( uint32_t, uint32_t * ) = 0;
    virtual int8_t GetHTTPResponseBodyData( uint32_t, uint8_t *, uint32_t ) = 0;
    virtual int8_t ReleaseHTTPRequest( uint32_t ) = 0;
    virtual int8_t GetHTTPDownloadProgressPct( uint32_t, float * ) = 0;
    virtual int8_t SetHTTPRequestRawPostBody( uint32_t, const char *, uint8_t *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient011
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMasterServerUpdater*/ * GetISteamMasterServerUpdater( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint32_t WriteScreenshot( void *, uint32_t, int32_t, int32_t ) = 0;
    virtual uint32_t AddScreenshotToLibrary( const char *, const char *, int32_t, int32_t ) = 0;
    virtual void TriggerScreenshot(  ) = 0;
    virtual void HookScreenshots( int8_t ) = 0;
    virtual int8_t SetLocation( uint32_t, const char * ) = 0;
    virtual int8_t TagUser( uint32_t, CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient012
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUnifiedMessages*/ * GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends010
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int8_t GetClanActivityCounts( CSteamID, int32_t *, int32_t *, int32_t * ) = 0;
    virtual uint64_t DownloadClanActivityCounts( CSteamID *, int32_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
    virtual uint64_t JoinClanChatRoom( CSteamID ) = 0;
    virtual int8_t LeaveClanChatRoom( CSteamID ) = 0;
    virtual int32_t GetClanChatMemberCount( CSteamID ) = 0;
    virtual CSteamID GetChatMemberByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t SendClanChatMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetClanChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t IsClanChatAdmin( CSteamID, CSteamID ) = 0;
    virtual int8_t IsClanChatWindowOpenInSteam( CSteamID ) = 0;
    virtual int8_t OpenClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t CloseClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t SetListenForFriendsMessages( int8_t ) = 0;
    virtual int8_t ReplyToFriendMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMatchmaking_SteamMatchMaking009
{
#ifdef __cplusplus
    virtual int32_t GetFavoriteGameCount(  ) = 0;
    virtual int8_t GetFavoriteGame( int32_t, uint32_t *, uint32_t *, uint16_t *, uint16_t *, uint32_t *, uint32_t * ) = 0;
    virtual int32_t AddFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t ) = 0;
    virtual int8_t RemoveFavoriteGame( uint32_t, uint32_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual uint64_t RequestLobbyList(  ) = 0;
    virtual void AddRequestLobbyListStringFilter( const char *, const char *, uint32_t ) = 0;
    virtual void AddRequestLobbyListNumericalFilter( const char *, int32_t, uint32_t ) = 0;
    virtual void AddRequestLobbyListNearValueFilter( const char *, int32_t ) = 0;
    virtual void AddRequestLobbyListFilterSlotsAvailable( int32_t ) = 0;
    virtual void AddRequestLobbyListDistanceFilter( uint32_t ) = 0;
    virtual void AddRequestLobbyListResultCountFilter( int32_t ) = 0;
    virtual void AddRequestLobbyListCompatibleMembersFilter( CSteamID ) = 0;
    virtual CSteamID GetLobbyByIndex( int32_t ) = 0;
    virtual uint64_t CreateLobby( uint32_t, int32_t ) = 0;
    virtual uint64_t JoinLobby( CSteamID ) = 0;
    virtual void LeaveLobby( CSteamID ) = 0;
    virtual int8_t InviteUserToLobby( CSteamID, CSteamID ) = 0;
    virtual int32_t GetNumLobbyMembers( CSteamID ) = 0;
    virtual CSteamID GetLobbyMemberByIndex( CSteamID, int32_t ) = 0;
    virtual const char * GetLobbyData( CSteamID, const char * ) = 0;
    virtual int8_t SetLobbyData( CSteamID, const char *, const char * ) = 0;
    virtual int32_t GetLobbyDataCount( CSteamID ) = 0;
    virtual int8_t GetLobbyDataByIndex( CSteamID, int32_t, char *, int32_t, char *, int32_t ) = 0;
    virtual int8_t DeleteLobbyData( CSteamID, const char * ) = 0;
    virtual const char * GetLobbyMemberData( CSteamID, CSteamID, const char * ) = 0;
    virtual void SetLobbyMemberData( CSteamID, const char *, const char * ) = 0;
    virtual int8_t SendLobbyChatMsg( CSteamID, const void *, int32_t ) = 0;
    virtual int32_t GetLobbyChatEntry( CSteamID, int32_t, CSteamID *, void *, int32_t, uint32_t * ) = 0;
    virtual int8_t RequestLobbyData( CSteamID ) = 0;
    virtual void SetLobbyGameServer( CSteamID, uint32_t, uint16_t, CSteamID ) = 0;
    virtual int8_t GetLobbyGameServer( CSteamID, uint32_t *, uint16_t *, CSteamID * ) = 0;
    virtual int8_t SetLobbyMemberLimit( CSteamID, int32_t ) = 0;
    virtual int32_t GetLobbyMemberLimit( CSteamID ) = 0;
    virtual int8_t SetLobbyType( CSteamID, uint32_t ) = 0;
    virtual int8_t SetLobbyJoinable( CSteamID, int8_t ) = 0;
    virtual CSteamID GetLobbyOwner( CSteamID ) = 0;
    virtual int8_t SetLobbyOwner( CSteamID, CSteamID ) = 0;
    virtual int8_t SetLinkedLobby( CSteamID, CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t UpdatePublishedFile( u_RemoteStorageUpdatePublishedFileRequest_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer011
{
#ifdef __cplusplus
    virtual int8_t InitGameServer( uint32_t, uint16_t, uint16_t, uint32_t, uint32_t, const char * ) = 0;
    virtual void SetProduct( const char * ) = 0;
    virtual void SetGameDescription( const char * ) = 0;
    virtual void SetModDir( const char * ) = 0;
    virtual void SetDedicatedServer( int8_t ) = 0;
    virtual void LogOn( const char *, const char * ) = 0;
    virtual void LogOnAnonymous(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t WasRestartRequested(  ) = 0;
    virtual void SetMaxPlayerCount( int32_t ) = 0;
    virtual void SetBotPlayerCount( int32_t ) = 0;
    virtual void SetServerName( const char * ) = 0;
    virtual void SetMapName( const char * ) = 0;
    virtual void SetPasswordProtected( int8_t ) = 0;
    virtual void SetSpectatorPort( uint16_t ) = 0;
    virtual void SetSpectatorServerName( const char * ) = 0;
    virtual void ClearAllKeyValues(  ) = 0;
    virtual void SetKeyValue( const char *, const char * ) = 0;
    virtual void SetGameTags( const char * ) = 0;
    virtual void SetGameData( const char * ) = 0;
    virtual void SetRegion( const char * ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual uint64_t GetServerReputation(  ) = 0;
    virtual uint32_t GetPublicIP(  ) = 0;
    virtual int8_t HandleIncomingPacket( const void *, int32_t, uint32_t, uint16_t ) = 0;
    virtual int32_t GetNextOutgoingPacket( void *, int32_t, uint32_t *, uint16_t * ) = 0;
    virtual void EnableHeartbeats( int8_t ) = 0;
    virtual void SetHeartbeatInterval( int32_t ) = 0;
    virtual void ForceHeartbeat(  ) = 0;
    virtual uint64_t AssociateWithClan( CSteamID ) = 0;
    virtual uint64_t ComputeNewPlayerCompatibility( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends011
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual void SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int8_t GetClanActivityCounts( CSteamID, int32_t *, int32_t *, int32_t * ) = 0;
    virtual uint64_t DownloadClanActivityCounts( CSteamID *, int32_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual void RequestFriendRichPresence( CSteamID ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
    virtual uint64_t JoinClanChatRoom( CSteamID ) = 0;
    virtual int8_t LeaveClanChatRoom( CSteamID ) = 0;
    virtual int32_t GetClanChatMemberCount( CSteamID ) = 0;
    virtual CSteamID GetChatMemberByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t SendClanChatMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetClanChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t IsClanChatAdmin( CSteamID, CSteamID ) = 0;
    virtual int8_t IsClanChatWindowOpenInSteam( CSteamID ) = 0;
    virtual int8_t OpenClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t CloseClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t SetListenForFriendsMessages( int8_t ) = 0;
    virtual int8_t ReplyToFriendMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual uint64_t GetFollowerCount( CSteamID ) = 0;
    virtual uint64_t IsFollowing( CSteamID ) = 0;
    virtual uint64_t EnumerateFollowingList( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION005
{
#ifdef __cplusplus
    virtual int8_t BIsSubscribed(  ) = 0;
    virtual int8_t BIsLowViolence(  ) = 0;
    virtual int8_t BIsCybercafe(  ) = 0;
    virtual int8_t BIsVACBanned(  ) = 0;
    virtual const char * GetCurrentGameLanguage(  ) = 0;
    virtual const char * GetAvailableGameLanguages(  ) = 0;
    virtual int8_t BIsSubscribedApp( uint32_t ) = 0;
    virtual int8_t BIsDlcInstalled( uint32_t ) = 0;
    virtual uint32_t GetEarliestPurchaseUnixTime( uint32_t ) = 0;
    virtual int8_t BIsSubscribedFromFreeWeekend(  ) = 0;
    virtual int32_t GetDLCCount(  ) = 0;
    virtual int8_t BGetDLCDataByIndex( int32_t, uint32_t *, int8_t *, char *, int32_t ) = 0;
    virtual void InstallDLC( uint32_t ) = 0;
    virtual void UninstallDLC( uint32_t ) = 0;
    virtual void RequestAppProofOfPurchaseKey( uint32_t ) = 0;
    virtual int8_t GetCurrentBetaName( char *, int32_t ) = 0;
    virtual int8_t MarkContentCorrupt( int8_t ) = 0;
    virtual uint32_t GetInstalledDepots( uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetAppInstallDir( uint32_t, char *, uint32_t ) = 0;
    virtual int8_t BIsAppInstalled( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends012
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual uint64_t SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int8_t GetClanActivityCounts( CSteamID, int32_t *, int32_t *, int32_t * ) = 0;
    virtual uint64_t DownloadClanActivityCounts( CSteamID *, int32_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual void RequestFriendRichPresence( CSteamID ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
    virtual uint64_t JoinClanChatRoom( CSteamID ) = 0;
    virtual int8_t LeaveClanChatRoom( CSteamID ) = 0;
    virtual int32_t GetClanChatMemberCount( CSteamID ) = 0;
    virtual CSteamID GetChatMemberByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t SendClanChatMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetClanChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t IsClanChatAdmin( CSteamID, CSteamID ) = 0;
    virtual int8_t IsClanChatWindowOpenInSteam( CSteamID ) = 0;
    virtual int8_t OpenClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t CloseClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t SetListenForFriendsMessages( int8_t ) = 0;
    virtual int8_t ReplyToFriendMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual uint64_t GetFollowerCount( CSteamID ) = 0;
    virtual uint64_t IsFollowing( CSteamID ) = 0;
    virtual uint64_t EnumerateFollowingList( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t GetAchievementAndUnlockTime( const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetNumAchievements(  ) = 0;
    virtual const char * GetAchievementName( uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t GetUserAchievementAndUnlockTime( CSteamID, const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntriesForUsers( uint64_t, CSteamID *, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_123 *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, uint32_t, int32_t, const int32_t *, int32_t ) = 0;
    virtual uint64_t AttachLeaderboardUGC( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetNumberOfCurrentPlayers(  ) = 0;
    virtual uint64_t RequestGlobalAchievementPercentages(  ) = 0;
    virtual int32_t GetMostAchievedAchievementInfo( char *, uint32_t, float *, int8_t * ) = 0;
    virtual int32_t GetNextMostAchievedAchievementInfo( int32_t, char *, uint32_t, float *, int8_t * ) = 0;
    virtual int8_t GetAchievementAchievedPercent( const char *, float * ) = 0;
    virtual uint64_t RequestGlobalStats( int32_t ) = 0;
    virtual int8_t GetGlobalStat( const char *, int64_t * ) = 0;
    virtual int8_t GetGlobalStat( const char *, double * ) = 0;
    virtual int32_t GetGlobalStatHistory( const char *, int64_t *, uint32_t ) = 0;
    virtual int32_t GetGlobalStatHistory( const char *, double *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends013
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual uint64_t SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int8_t GetClanActivityCounts( CSteamID, int32_t *, int32_t *, int32_t * ) = 0;
    virtual uint64_t DownloadClanActivityCounts( CSteamID *, int32_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t, uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual void RequestFriendRichPresence( CSteamID ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
    virtual uint64_t JoinClanChatRoom( CSteamID ) = 0;
    virtual int8_t LeaveClanChatRoom( CSteamID ) = 0;
    virtual int32_t GetClanChatMemberCount( CSteamID ) = 0;
    virtual CSteamID GetChatMemberByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t SendClanChatMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetClanChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t IsClanChatAdmin( CSteamID, CSteamID ) = 0;
    virtual int8_t IsClanChatWindowOpenInSteam( CSteamID ) = 0;
    virtual int8_t OpenClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t CloseClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t SetListenForFriendsMessages( int8_t ) = 0;
    virtual int8_t ReplyToFriendMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual uint64_t GetFollowerCount( CSteamID ) = 0;
    virtual uint64_t IsFollowing( CSteamID ) = 0;
    virtual uint64_t EnumerateFollowingList( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t, uint32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002
{
#ifdef __cplusplus
    virtual uint32_t CreateHTTPRequest( uint32_t, const char * ) = 0;
    virtual int8_t SetHTTPRequestContextValue( uint32_t, uint64_t ) = 0;
    virtual int8_t SetHTTPRequestNetworkActivityTimeout( uint32_t, uint32_t ) = 0;
    virtual int8_t SetHTTPRequestHeaderValue( uint32_t, const char *, const char * ) = 0;
    virtual int8_t SetHTTPRequestGetOrPostParameter( uint32_t, const char *, const char * ) = 0;
    virtual int8_t SendHTTPRequest( uint32_t, uint64_t * ) = 0;
    virtual int8_t SendHTTPRequestAndStreamResponse( uint32_t, uint64_t * ) = 0;
    virtual int8_t DeferHTTPRequest( uint32_t ) = 0;
    virtual int8_t PrioritizeHTTPRequest( uint32_t ) = 0;
    virtual int8_t GetHTTPResponseHeaderSize( uint32_t, const char *, uint32_t * ) = 0;
    virtual int8_t GetHTTPResponseHeaderValue( uint32_t, const char *, uint8_t *, uint32_t ) = 0;
    virtual int8_t GetHTTPResponseBodySize( uint32_t, uint32_t * ) = 0;
    virtual int8_t GetHTTPResponseBodyData( uint32_t, uint8_t *, uint32_t ) = 0;
    virtual int8_t GetHTTPStreamingResponseBodyData( uint32_t, uint32_t, uint8_t *, uint32_t ) = 0;
    virtual int8_t ReleaseHTTPRequest( uint32_t ) = 0;
    virtual int8_t GetHTTPDownloadProgressPct( uint32_t, float * ) = 0;
    virtual int8_t SetHTTPRequestRawPostBody( uint32_t, const char *, uint8_t *, uint32_t ) = 0;
    virtual uint32_t CreateCookieContainer( int8_t ) = 0;
    virtual int8_t ReleaseCookieContainer( uint32_t ) = 0;
    virtual int8_t SetCookie( uint32_t, const char *, const char *, const char * ) = 0;
    virtual int8_t SetHTTPRequestCookieContainer( uint32_t, uint32_t ) = 0;
    virtual int8_t SetHTTPRequestUserAgentInfo( uint32_t, const char * ) = 0;
    virtual int8_t SetHTTPRequestRequiresVerifiedCertificate( uint32_t, int8_t ) = 0;
    virtual int8_t SetHTTPRequestAbsoluteTimeoutMS( uint32_t, uint32_t ) = 0;
    virtual int8_t GetHTTPRequestWasTimedOut( uint32_t, int8_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t, uint32_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t, uint32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t UGCDownloadToLocation( uint64_t, const char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002
{
#ifdef __cplusplus
    virtual uint32_t WriteScreenshot( void *, uint32_t, int32_t, int32_t ) = 0;
    virtual uint32_t AddScreenshotToLibrary( const char *, const char *, int32_t, int32_t ) = 0;
    virtual void TriggerScreenshot(  ) = 0;
    virtual void HookScreenshots( int8_t ) = 0;
    virtual int8_t SetLocation( uint32_t, const char * ) = 0;
    virtual int8_t TagUser( uint32_t, CSteamID ) = 0;
    virtual int8_t TagPublishedFile( uint32_t, uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUnifiedMessages_STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint64_t SendMethod( const char *, const void *, uint32_t, uint64_t ) = 0;
    virtual int8_t GetMethodResponseInfo( uint64_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetMethodResponseData( uint64_t, void *, uint32_t, int8_t ) = 0;
    virtual int8_t ReleaseMethod( uint64_t ) = 0;
    virtual int8_t SendNotification( const char *, const void *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser017
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
    virtual int32_t GetGameBadgeLevel( int32_t, int8_t ) = 0;
    virtual int32_t GetPlayerSteamLevel(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils006
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t IsOverlayEnabled(  ) = 0;
    virtual int8_t BOverlayNeedsPresent(  ) = 0;
    virtual uint64_t CheckFileSignature( const char * ) = 0;
    virtual int8_t ShowGamepadTextInput( uint32_t, uint32_t, const char *, uint32_t ) = 0;
    virtual uint32_t GetEnteredGamepadTextLength(  ) = 0;
    virtual int8_t GetEnteredGamepadTextInput( char *, uint32_t ) = 0;
    virtual const char * GetSteamUILanguage(  ) = 0;
    virtual int8_t IsSteamRunningInVR(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamController_STEAMCONTROLLER_INTERFACE_VERSION
{
#ifdef __cplusplus
    virtual int8_t Init( const char * ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int8_t GetControllerState( uint32_t, SteamControllerState001_t * ) = 0;
    virtual void TriggerHapticPulse( uint32_t, uint32_t, uint16_t ) = 0;
    virtual void SetOverrideMode( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t, uint32_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t, uint32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t UGCDownloadToLocation( uint64_t, const char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends014
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual uint64_t SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual const char * GetPlayerNickname( CSteamID ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int8_t GetClanActivityCounts( CSteamID, int32_t *, int32_t *, int32_t * ) = 0;
    virtual uint64_t DownloadClanActivityCounts( CSteamID *, int32_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t, uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual void RequestFriendRichPresence( CSteamID ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
    virtual uint64_t JoinClanChatRoom( CSteamID ) = 0;
    virtual int8_t LeaveClanChatRoom( CSteamID ) = 0;
    virtual int32_t GetClanChatMemberCount( CSteamID ) = 0;
    virtual CSteamID GetChatMemberByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t SendClanChatMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetClanChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t IsClanChatAdmin( CSteamID, CSteamID ) = 0;
    virtual int8_t IsClanChatWindowOpenInSteam( CSteamID ) = 0;
    virtual int8_t OpenClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t CloseClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t SetListenForFriendsMessages( int8_t ) = 0;
    virtual int8_t ReplyToFriendMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual uint64_t GetFollowerCount( CSteamID ) = 0;
    virtual uint64_t IsFollowing( CSteamID ) = 0;
    virtual uint64_t EnumerateFollowingList( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t, uint32_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t, uint32_t, uint32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t UGCDownloadToLocation( uint64_t, const char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION006
{
#ifdef __cplusplus
    virtual int8_t BIsSubscribed(  ) = 0;
    virtual int8_t BIsLowViolence(  ) = 0;
    virtual int8_t BIsCybercafe(  ) = 0;
    virtual int8_t BIsVACBanned(  ) = 0;
    virtual const char * GetCurrentGameLanguage(  ) = 0;
    virtual const char * GetAvailableGameLanguages(  ) = 0;
    virtual int8_t BIsSubscribedApp( uint32_t ) = 0;
    virtual int8_t BIsDlcInstalled( uint32_t ) = 0;
    virtual uint32_t GetEarliestPurchaseUnixTime( uint32_t ) = 0;
    virtual int8_t BIsSubscribedFromFreeWeekend(  ) = 0;
    virtual int32_t GetDLCCount(  ) = 0;
    virtual int8_t BGetDLCDataByIndex( int32_t, uint32_t *, int8_t *, char *, int32_t ) = 0;
    virtual void InstallDLC( uint32_t ) = 0;
    virtual void UninstallDLC( uint32_t ) = 0;
    virtual void RequestAppProofOfPurchaseKey( uint32_t ) = 0;
    virtual int8_t GetCurrentBetaName( char *, int32_t ) = 0;
    virtual int8_t MarkContentCorrupt( int8_t ) = 0;
    virtual uint32_t GetInstalledDepots( uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetAppInstallDir( uint32_t, char *, uint32_t ) = 0;
    virtual int8_t BIsAppInstalled( uint32_t ) = 0;
    virtual CSteamID GetAppOwner(  ) = 0;
    virtual const char * GetLaunchQueryParam( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_126 * ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient013
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUnifiedMessages*/ * GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamInventory( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamVideo( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils007
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t IsOverlayEnabled(  ) = 0;
    virtual int8_t BOverlayNeedsPresent(  ) = 0;
    virtual uint64_t CheckFileSignature( const char * ) = 0;
    virtual int8_t ShowGamepadTextInput( uint32_t, uint32_t, const char *, uint32_t, const char * ) = 0;
    virtual uint32_t GetEnteredGamepadTextLength(  ) = 0;
    virtual int8_t GetEnteredGamepadTextInput( char *, uint32_t ) = 0;
    virtual const char * GetSteamUILanguage(  ) = 0;
    virtual int8_t IsSteamRunningInVR(  ) = 0;
    virtual void SetOverlayNotificationInset( int32_t, int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual int8_t BIsEnabled(  ) = 0;
    virtual int8_t BIsPlaying(  ) = 0;
    virtual uint32_t GetPlaybackStatus(  ) = 0;
    virtual void Play(  ) = 0;
    virtual void Pause(  ) = 0;
    virtual void PlayPrevious(  ) = 0;
    virtual void PlayNext(  ) = 0;
    virtual void SetVolume( float ) = 0;
    virtual float GetVolume(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION002
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t ) = 0;
    virtual int8_t GetItemUpdateInfo( uint64_t, int8_t *, int8_t *, uint64_t *, uint64_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamAppList_STEAMAPPLIST_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint32_t GetNumInstalledApps(  ) = 0;
    virtual uint32_t GetInstalledApps( uint32_t *, uint32_t ) = 0;
    virtual int32_t GetAppName( uint32_t, char *, int32_t ) = 0;
    virtual int32_t GetAppInstallDir( uint32_t, char *, int32_t ) = 0;
    virtual int32_t GetAppBuildId( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer012
{
#ifdef __cplusplus
    virtual int8_t InitGameServer( uint32_t, uint16_t, uint16_t, uint32_t, uint32_t, const char * ) = 0;
    virtual void SetProduct( const char * ) = 0;
    virtual void SetGameDescription( const char * ) = 0;
    virtual void SetModDir( const char * ) = 0;
    virtual void SetDedicatedServer( int8_t ) = 0;
    virtual void LogOn( const char * ) = 0;
    virtual void LogOnAnonymous(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t WasRestartRequested(  ) = 0;
    virtual void SetMaxPlayerCount( int32_t ) = 0;
    virtual void SetBotPlayerCount( int32_t ) = 0;
    virtual void SetServerName( const char * ) = 0;
    virtual void SetMapName( const char * ) = 0;
    virtual void SetPasswordProtected( int8_t ) = 0;
    virtual void SetSpectatorPort( uint16_t ) = 0;
    virtual void SetSpectatorServerName( const char * ) = 0;
    virtual void ClearAllKeyValues(  ) = 0;
    virtual void SetKeyValue( const char *, const char * ) = 0;
    virtual void SetGameTags( const char * ) = 0;
    virtual void SetGameData( const char * ) = 0;
    virtual void SetRegion( const char * ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual uint64_t GetServerReputation(  ) = 0;
    virtual uint32_t GetPublicIP(  ) = 0;
    virtual int8_t HandleIncomingPacket( const void *, int32_t, uint32_t, uint16_t ) = 0;
    virtual int32_t GetNextOutgoingPacket( void *, int32_t, uint32_t *, uint16_t * ) = 0;
    virtual void EnableHeartbeats( int8_t ) = 0;
    virtual void SetHeartbeatInterval( int32_t ) = 0;
    virtual void ForceHeartbeat(  ) = 0;
    virtual uint64_t AssociateWithClan( CSteamID ) = 0;
    virtual uint64_t ComputeNewPlayerCompatibility( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient014
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUnifiedMessages*/ * GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient015
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUnifiedMessages*/ * GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusicRemote*/ * GetISteamMusicRemote( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual int8_t RegisterSteamMusicRemote( const char * ) = 0;
    virtual int8_t DeregisterSteamMusicRemote(  ) = 0;
    virtual int8_t BIsCurrentMusicRemote(  ) = 0;
    virtual int8_t BActivationSuccess( int8_t ) = 0;
    virtual int8_t SetDisplayName( const char * ) = 0;
    virtual int8_t SetPNGIcon_64x64( void *, uint32_t ) = 0;
    virtual int8_t EnablePlayPrevious( int8_t ) = 0;
    virtual int8_t EnablePlayNext( int8_t ) = 0;
    virtual int8_t EnableShuffled( int8_t ) = 0;
    virtual int8_t EnableLooped( int8_t ) = 0;
    virtual int8_t EnableQueue( int8_t ) = 0;
    virtual int8_t EnablePlaylists( int8_t ) = 0;
    virtual int8_t UpdatePlaybackStatus( uint32_t ) = 0;
    virtual int8_t UpdateShuffled( int8_t ) = 0;
    virtual int8_t UpdateLooped( int8_t ) = 0;
    virtual int8_t UpdateVolume( float ) = 0;
    virtual int8_t CurrentEntryWillChange(  ) = 0;
    virtual int8_t CurrentEntryIsAvailable( int8_t ) = 0;
    virtual int8_t UpdateCurrentEntryText( const char * ) = 0;
    virtual int8_t UpdateCurrentEntryElapsedSeconds( int32_t ) = 0;
    virtual int8_t UpdateCurrentEntryCoverArt( void *, uint32_t ) = 0;
    virtual int8_t CurrentEntryDidChange(  ) = 0;
    virtual int8_t QueueWillChange(  ) = 0;
    virtual int8_t ResetQueueEntries(  ) = 0;
    virtual int8_t SetQueueEntry( int32_t, int32_t, const char * ) = 0;
    virtual int8_t SetCurrentQueueEntry( int32_t ) = 0;
    virtual int8_t QueueDidChange(  ) = 0;
    virtual int8_t PlaylistWillChange(  ) = 0;
    virtual int8_t ResetPlaylistEntries(  ) = 0;
    virtual int8_t SetPlaylistEntry( int32_t, int32_t, const char * ) = 0;
    virtual int8_t SetCurrentPlaylistEntry( int32_t ) = 0;
    virtual int8_t PlaylistDidChange(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient016
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUnifiedMessages*/ * GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusicRemote*/ * GetISteamMusicRemote( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamHTMLSurface*/ * GetISteamHTMLSurface( int32_t, int32_t, const char * ) = 0;
    virtual void Set_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(uint64_t, void *, uint32_t, int32_t) ) = 0;
    virtual void Remove_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(uint64_t, void *, uint32_t, int32_t) ) = 0;
    virtual void Set_SteamAPI_CCheckCallbackRegisteredInProcess( uint32_t (*U_CDECL )(int32_t) ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION003
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, int8_t * ) = 0;
    virtual int8_t GetItemUpdateInfo( uint64_t, int8_t *, int8_t *, uint64_t *, uint64_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001
{
#ifdef __cplusplus
    virtual ~u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001(  ) = 0;
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual uint64_t CreateBrowser( const char *, const char * ) = 0;
    virtual void RemoveBrowser( uint32_t ) = 0;
    virtual void LoadURL( uint32_t, const char *, const char * ) = 0;
    virtual void SetSize( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void StopLoad( uint32_t ) = 0;
    virtual void Reload( uint32_t ) = 0;
    virtual void GoBack( uint32_t ) = 0;
    virtual void GoForward( uint32_t ) = 0;
    virtual void AddHeader( uint32_t, const char *, const char * ) = 0;
    virtual void ExecuteJavascript( uint32_t, const char * ) = 0;
    virtual void MouseUp( uint32_t, uint32_t ) = 0;
    virtual void MouseDown( uint32_t, uint32_t ) = 0;
    virtual void MouseDoubleClick( uint32_t, uint32_t ) = 0;
    virtual void MouseMove( uint32_t, int32_t, int32_t ) = 0;
    virtual void MouseWheel( uint32_t, int32_t ) = 0;
    virtual void KeyDown( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyUp( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyChar( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void SetHorizontalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetVerticalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetKeyFocus( uint32_t, int8_t ) = 0;
    virtual void ViewSource( uint32_t ) = 0;
    virtual void CopyToClipboard( uint32_t ) = 0;
    virtual void PasteFromClipboard( uint32_t ) = 0;
    virtual void Find( uint32_t, const char *, int8_t, int8_t ) = 0;
    virtual void StopFind( uint32_t ) = 0;
    virtual void GetLinkAtPosition( uint32_t, int32_t, int32_t ) = 0;
    virtual void AllowStartRequest( uint32_t, int8_t ) = 0;
    virtual void JSDialogResponse( uint32_t, int8_t ) = 0;
    virtual void FileLoadDialogResponse( uint32_t, const char ** ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002
{
#ifdef __cplusplus
    virtual ~u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002(  ) = 0;
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual uint64_t CreateBrowser( const char *, const char * ) = 0;
    virtual void RemoveBrowser( uint32_t ) = 0;
    virtual void LoadURL( uint32_t, const char *, const char * ) = 0;
    virtual void SetSize( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void StopLoad( uint32_t ) = 0;
    virtual void Reload( uint32_t ) = 0;
    virtual void GoBack( uint32_t ) = 0;
    virtual void GoForward( uint32_t ) = 0;
    virtual void AddHeader( uint32_t, const char *, const char * ) = 0;
    virtual void ExecuteJavascript( uint32_t, const char * ) = 0;
    virtual void MouseUp( uint32_t, uint32_t ) = 0;
    virtual void MouseDown( uint32_t, uint32_t ) = 0;
    virtual void MouseDoubleClick( uint32_t, uint32_t ) = 0;
    virtual void MouseMove( uint32_t, int32_t, int32_t ) = 0;
    virtual void MouseWheel( uint32_t, int32_t ) = 0;
    virtual void KeyDown( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyUp( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyChar( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void SetHorizontalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetVerticalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetKeyFocus( uint32_t, int8_t ) = 0;
    virtual void ViewSource( uint32_t ) = 0;
    virtual void CopyToClipboard( uint32_t ) = 0;
    virtual void PasteFromClipboard( uint32_t ) = 0;
    virtual void Find( uint32_t, const char *, int8_t, int8_t ) = 0;
    virtual void StopFind( uint32_t ) = 0;
    virtual void GetLinkAtPosition( uint32_t, int32_t, int32_t ) = 0;
    virtual void SetCookie( const char *, const char *, const char *, const char *, uint32_t, int8_t, int8_t ) = 0;
    virtual void SetPageScaleFactor( uint32_t, float, int32_t, int32_t ) = 0;
    virtual void AllowStartRequest( uint32_t, int8_t ) = 0;
    virtual void JSDialogResponse( uint32_t, int8_t ) = 0;
    virtual void FileLoadDialogResponse( uint32_t, const char ** ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient017
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void * DEPRECATED_GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusicRemote*/ * GetISteamMusicRemote( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamHTMLSurface*/ * GetISteamHTMLSurface( int32_t, int32_t, const char * ) = 0;
    virtual void DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void Set_SteamAPI_CCheckCallbackRegisteredInProcess( uint32_t (*U_CDECL )(int32_t) ) = 0;
    virtual void /*ISteamInventory*/ * GetISteamInventory( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamVideo*/ * GetISteamVideo( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParentalSettings*/ * GetISteamParentalSettings( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser018
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
    virtual int32_t GetGameBadgeLevel( int32_t, int8_t ) = 0;
    virtual int32_t GetPlayerSteamLevel(  ) = 0;
    virtual uint64_t RequestStoreAuthURL( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends015
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual uint64_t SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int32_t GetFriendSteamLevel( CSteamID ) = 0;
    virtual const char * GetPlayerNickname( CSteamID ) = 0;
    virtual int32_t GetFriendsGroupCount(  ) = 0;
    virtual int16_t GetFriendsGroupIDByIndex( int32_t ) = 0;
    virtual const char * GetFriendsGroupName( int16_t ) = 0;
    virtual int32_t GetFriendsGroupMembersCount( int16_t ) = 0;
    virtual void GetFriendsGroupMembersList( int16_t, CSteamID *, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int8_t GetClanActivityCounts( CSteamID, int32_t *, int32_t *, int32_t * ) = 0;
    virtual uint64_t DownloadClanActivityCounts( CSteamID *, int32_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char * ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t, uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual void RequestFriendRichPresence( CSteamID ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
    virtual uint64_t JoinClanChatRoom( CSteamID ) = 0;
    virtual int8_t LeaveClanChatRoom( CSteamID ) = 0;
    virtual int32_t GetClanChatMemberCount( CSteamID ) = 0;
    virtual CSteamID GetChatMemberByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t SendClanChatMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetClanChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t IsClanChatAdmin( CSteamID, CSteamID ) = 0;
    virtual int8_t IsClanChatWindowOpenInSteam( CSteamID ) = 0;
    virtual int8_t OpenClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t CloseClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t SetListenForFriendsMessages( int8_t ) = 0;
    virtual int8_t ReplyToFriendMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual uint64_t GetFollowerCount( CSteamID ) = 0;
    virtual uint64_t IsFollowing( CSteamID ) = 0;
    virtual uint64_t EnumerateFollowingList( uint32_t ) = 0;
    virtual int8_t IsClanPublic( CSteamID ) = 0;
    virtual int8_t IsClanOfficialGameGroup( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION007
{
#ifdef __cplusplus
    virtual int8_t BIsSubscribed(  ) = 0;
    virtual int8_t BIsLowViolence(  ) = 0;
    virtual int8_t BIsCybercafe(  ) = 0;
    virtual int8_t BIsVACBanned(  ) = 0;
    virtual const char * GetCurrentGameLanguage(  ) = 0;
    virtual const char * GetAvailableGameLanguages(  ) = 0;
    virtual int8_t BIsSubscribedApp( uint32_t ) = 0;
    virtual int8_t BIsDlcInstalled( uint32_t ) = 0;
    virtual uint32_t GetEarliestPurchaseUnixTime( uint32_t ) = 0;
    virtual int8_t BIsSubscribedFromFreeWeekend(  ) = 0;
    virtual int32_t GetDLCCount(  ) = 0;
    virtual int8_t BGetDLCDataByIndex( int32_t, uint32_t *, int8_t *, char *, int32_t ) = 0;
    virtual void InstallDLC( uint32_t ) = 0;
    virtual void UninstallDLC( uint32_t ) = 0;
    virtual void RequestAppProofOfPurchaseKey( uint32_t ) = 0;
    virtual int8_t GetCurrentBetaName( char *, int32_t ) = 0;
    virtual int8_t MarkContentCorrupt( int8_t ) = 0;
    virtual uint32_t GetInstalledDepots( uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetAppInstallDir( uint32_t, char *, uint32_t ) = 0;
    virtual int8_t BIsAppInstalled( uint32_t ) = 0;
    virtual CSteamID GetAppOwner(  ) = 0;
    virtual const char * GetLaunchQueryParam( const char * ) = 0;
    virtual int8_t GetDlcDownloadProgress( uint32_t, uint64_t *, uint64_t * ) = 0;
    virtual int32_t GetAppBuildId(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamInventory_STEAMINVENTORY_INTERFACE_V001
{
#ifdef __cplusplus
    virtual uint32_t GetResultStatus( int32_t ) = 0;
    virtual int8_t GetResultItems( int32_t, SteamItemDetails_t *, uint32_t * ) = 0;
    virtual uint32_t GetResultTimestamp( int32_t ) = 0;
    virtual int8_t CheckResultSteamID( int32_t, CSteamID ) = 0;
    virtual void DestroyResult( int32_t ) = 0;
    virtual int8_t GetAllItems( int32_t * ) = 0;
    virtual int8_t GetItemsByID( int32_t *, const uint64_t *, uint32_t ) = 0;
    virtual int8_t SerializeResult( int32_t, void *, uint32_t * ) = 0;
    virtual int8_t DeserializeResult( int32_t *, const void *, uint32_t, int8_t ) = 0;
    virtual int8_t GenerateItems( int32_t *, const int32_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t GrantPromoItems( int32_t * ) = 0;
    virtual int8_t AddPromoItem( int32_t *, int32_t ) = 0;
    virtual int8_t AddPromoItems( int32_t *, const int32_t *, uint32_t ) = 0;
    virtual int8_t ConsumeItem( int32_t *, uint64_t, uint32_t ) = 0;
    virtual int8_t ExchangeItems( int32_t *, const int32_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t TransferItemQuantity( int32_t *, uint64_t, uint32_t, uint64_t ) = 0;
    virtual void SendItemDropHeartbeat(  ) = 0;
    virtual int8_t TriggerItemDrop( int32_t *, int32_t ) = 0;
    virtual int8_t TradeItems( int32_t *, CSteamID, const uint64_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t LoadItemDefinitions(  ) = 0;
    virtual int8_t GetItemDefinitionIDs( int32_t *, uint32_t * ) = 0;
    virtual int8_t GetItemDefinitionProperty( int32_t, const char *, char *, uint32_t * ) = 0;
    virtual uint64_t RequestEligiblePromoItemDefinitionsIDs( CSteamID ) = 0;
    virtual int8_t GetEligiblePromoItemDefinitionIDs( CSteamID, int32_t *, uint32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamVideo_STEAMVIDEO_INTERFACE_V001
{
#ifdef __cplusplus
    virtual void GetVideoURL( uint32_t ) = 0;
    virtual int8_t IsBroadcasting( int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION004
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION005
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, int8_t * ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003
{
#ifdef __cplusplus
    virtual ~u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003(  ) = 0;
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual uint64_t CreateBrowser( const char *, const char * ) = 0;
    virtual void RemoveBrowser( uint32_t ) = 0;
    virtual void LoadURL( uint32_t, const char *, const char * ) = 0;
    virtual void SetSize( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void StopLoad( uint32_t ) = 0;
    virtual void Reload( uint32_t ) = 0;
    virtual void GoBack( uint32_t ) = 0;
    virtual void GoForward( uint32_t ) = 0;
    virtual void AddHeader( uint32_t, const char *, const char * ) = 0;
    virtual void ExecuteJavascript( uint32_t, const char * ) = 0;
    virtual void MouseUp( uint32_t, uint32_t ) = 0;
    virtual void MouseDown( uint32_t, uint32_t ) = 0;
    virtual void MouseDoubleClick( uint32_t, uint32_t ) = 0;
    virtual void MouseMove( uint32_t, int32_t, int32_t ) = 0;
    virtual void MouseWheel( uint32_t, int32_t ) = 0;
    virtual void KeyDown( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyUp( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyChar( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void SetHorizontalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetVerticalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetKeyFocus( uint32_t, int8_t ) = 0;
    virtual void ViewSource( uint32_t ) = 0;
    virtual void CopyToClipboard( uint32_t ) = 0;
    virtual void PasteFromClipboard( uint32_t ) = 0;
    virtual void Find( uint32_t, const char *, int8_t, int8_t ) = 0;
    virtual void StopFind( uint32_t ) = 0;
    virtual void GetLinkAtPosition( uint32_t, int32_t, int32_t ) = 0;
    virtual void SetCookie( const char *, const char *, const char *, const char *, uint32_t, int8_t, int8_t ) = 0;
    virtual void SetPageScaleFactor( uint32_t, float, int32_t, int32_t ) = 0;
    virtual void SetBackgroundMode( uint32_t, int8_t ) = 0;
    virtual void AllowStartRequest( uint32_t, int8_t ) = 0;
    virtual void JSDialogResponse( uint32_t, int8_t ) = 0;
    virtual void FileLoadDialogResponse( uint32_t, const char ** ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION006
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, int8_t * ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION007
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, int8_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual uint64_t FileWriteAsync( const char *, const void *, uint32_t ) = 0;
    virtual uint64_t FileReadAsync( const char *, uint32_t, uint32_t ) = 0;
    virtual int8_t FileReadAsyncComplete( uint64_t, void *, uint32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( int32_t *, int32_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t, uint32_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t, uint32_t, uint32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t UGCDownloadToLocation( uint64_t, const char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamController_SteamController003
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual ControllerDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual ControllerAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser019
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
    virtual int32_t GetGameBadgeLevel( int32_t, int8_t ) = 0;
    virtual int32_t GetPlayerSteamLevel(  ) = 0;
    virtual uint64_t RequestStoreAuthURL( const char * ) = 0;
    virtual int8_t BIsPhoneVerified(  ) = 0;
    virtual int8_t BIsTwoFactorEnabled(  ) = 0;
    virtual int8_t BIsPhoneIdentifying(  ) = 0;
    virtual int8_t BIsPhoneRequiringVerification(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils008
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t IsOverlayEnabled(  ) = 0;
    virtual int8_t BOverlayNeedsPresent(  ) = 0;
    virtual uint64_t CheckFileSignature( const char * ) = 0;
    virtual int8_t ShowGamepadTextInput( uint32_t, uint32_t, const char *, uint32_t, const char * ) = 0;
    virtual uint32_t GetEnteredGamepadTextLength(  ) = 0;
    virtual int8_t GetEnteredGamepadTextInput( char *, uint32_t ) = 0;
    virtual const char * GetSteamUILanguage(  ) = 0;
    virtual int8_t IsSteamRunningInVR(  ) = 0;
    virtual void SetOverlayNotificationInset( int32_t, int32_t ) = 0;
    virtual int8_t IsSteamInBigPictureMode(  ) = 0;
    virtual void StartVRDashboard(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamApps_STEAMAPPS_INTERFACE_VERSION008
{
#ifdef __cplusplus
    virtual int8_t BIsSubscribed(  ) = 0;
    virtual int8_t BIsLowViolence(  ) = 0;
    virtual int8_t BIsCybercafe(  ) = 0;
    virtual int8_t BIsVACBanned(  ) = 0;
    virtual const char * GetCurrentGameLanguage(  ) = 0;
    virtual const char * GetAvailableGameLanguages(  ) = 0;
    virtual int8_t BIsSubscribedApp( uint32_t ) = 0;
    virtual int8_t BIsDlcInstalled( uint32_t ) = 0;
    virtual uint32_t GetEarliestPurchaseUnixTime( uint32_t ) = 0;
    virtual int8_t BIsSubscribedFromFreeWeekend(  ) = 0;
    virtual int32_t GetDLCCount(  ) = 0;
    virtual int8_t BGetDLCDataByIndex( int32_t, uint32_t *, int8_t *, char *, int32_t ) = 0;
    virtual void InstallDLC( uint32_t ) = 0;
    virtual void UninstallDLC( uint32_t ) = 0;
    virtual void RequestAppProofOfPurchaseKey( uint32_t ) = 0;
    virtual int8_t GetCurrentBetaName( char *, int32_t ) = 0;
    virtual int8_t MarkContentCorrupt( int8_t ) = 0;
    virtual uint32_t GetInstalledDepots( uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetAppInstallDir( uint32_t, char *, uint32_t ) = 0;
    virtual int8_t BIsAppInstalled( uint32_t ) = 0;
    virtual CSteamID GetAppOwner(  ) = 0;
    virtual const char * GetLaunchQueryParam( const char * ) = 0;
    virtual int8_t GetDlcDownloadProgress( uint32_t, uint64_t *, uint64_t * ) = 0;
    virtual int32_t GetAppBuildId(  ) = 0;
    virtual void RequestAllProofOfPurchaseKeys(  ) = 0;
    virtual uint64_t GetFileDetails( const char * ) = 0;
    virtual int32_t GetLaunchCommandLine( char *, int32_t ) = 0;
    virtual int8_t BIsSubscribedFromFamilySharing(  ) = 0;
    virtual int8_t BIsTimedTrial( uint32_t *, uint32_t * ) = 0;
    virtual int8_t SetDlcContext( uint32_t ) = 0;
    virtual int32_t GetNumBetas( int32_t *, int32_t * ) = 0;
    virtual int8_t GetBetaInfo( int32_t, uint32_t *, uint32_t *, char *, int32_t, char *, int32_t ) = 0;
    virtual int8_t SetActiveBeta( const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION008
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual uint64_t FileWriteAsync( const char *, const void *, uint32_t ) = 0;
    virtual uint64_t FileReadAsync( const char *, uint32_t, uint32_t ) = 0;
    virtual int8_t FileReadAsyncComplete( uint64_t, void *, uint32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t, uint32_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t, uint32_t, uint32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t UGCDownloadToLocation( uint64_t, const char *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003
{
#ifdef __cplusplus
    virtual uint32_t WriteScreenshot( void *, uint32_t, int32_t, int32_t ) = 0;
    virtual uint32_t AddScreenshotToLibrary( const char *, const char *, int32_t, int32_t ) = 0;
    virtual void TriggerScreenshot(  ) = 0;
    virtual void HookScreenshots( int8_t ) = 0;
    virtual int8_t SetLocation( uint32_t, const char * ) = 0;
    virtual int8_t TagUser( uint32_t, CSteamID ) = 0;
    virtual int8_t TagPublishedFile( uint32_t, uint64_t ) = 0;
    virtual int8_t IsScreenshotsHooked(  ) = 0;
    virtual uint32_t AddVRScreenshotToLibrary( uint32_t, const char *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamController_SteamController004
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual ControllerDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual ControllerAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual ControllerMotionData_t GetMotionData( uint64_t ) = 0;
    virtual int8_t ShowDigitalActionOrigins( uint64_t, uint64_t, float, float, float ) = 0;
    virtual int8_t ShowAnalogActionOrigins( uint64_t, uint64_t, float, float, float ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION009
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamController_SteamController005
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual ControllerDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual ControllerAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual ControllerMotionData_t GetMotionData( uint64_t ) = 0;
    virtual int8_t ShowDigitalActionOrigins( uint64_t, uint64_t, float, float, float ) = 0;
    virtual int8_t ShowAnalogActionOrigins( uint64_t, uint64_t, float, float, float ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForActionOrigin( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils009
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t IsOverlayEnabled(  ) = 0;
    virtual int8_t BOverlayNeedsPresent(  ) = 0;
    virtual uint64_t CheckFileSignature( const char * ) = 0;
    virtual int8_t ShowGamepadTextInput( uint32_t, uint32_t, const char *, uint32_t, const char * ) = 0;
    virtual uint32_t GetEnteredGamepadTextLength(  ) = 0;
    virtual int8_t GetEnteredGamepadTextInput( char *, uint32_t ) = 0;
    virtual const char * GetSteamUILanguage(  ) = 0;
    virtual int8_t IsSteamRunningInVR(  ) = 0;
    virtual void SetOverlayNotificationInset( int32_t, int32_t ) = 0;
    virtual int8_t IsSteamInBigPictureMode(  ) = 0;
    virtual void StartVRDashboard(  ) = 0;
    virtual int8_t IsVRHeadsetStreamingEnabled(  ) = 0;
    virtual void SetVRHeadsetStreamingEnabled( int8_t ) = 0;
    virtual int8_t IsSteamChinaLauncher(  ) = 0;
    virtual int8_t InitFilterText(  ) = 0;
    virtual int32_t FilterText( char *, uint32_t, const char *, int8_t ) = 0;
    virtual uint32_t GetIPv6ConnectivityState( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION010
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamInventory_STEAMINVENTORY_INTERFACE_V002
{
#ifdef __cplusplus
    virtual uint32_t GetResultStatus( int32_t ) = 0;
    virtual int8_t GetResultItems( int32_t, SteamItemDetails_t *, uint32_t * ) = 0;
    virtual int8_t GetResultItemProperty( int32_t, uint32_t, const char *, char *, uint32_t * ) = 0;
    virtual uint32_t GetResultTimestamp( int32_t ) = 0;
    virtual int8_t CheckResultSteamID( int32_t, CSteamID ) = 0;
    virtual void DestroyResult( int32_t ) = 0;
    virtual int8_t GetAllItems( int32_t * ) = 0;
    virtual int8_t GetItemsByID( int32_t *, const uint64_t *, uint32_t ) = 0;
    virtual int8_t SerializeResult( int32_t, void *, uint32_t * ) = 0;
    virtual int8_t DeserializeResult( int32_t *, const void *, uint32_t, int8_t ) = 0;
    virtual int8_t GenerateItems( int32_t *, const int32_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t GrantPromoItems( int32_t * ) = 0;
    virtual int8_t AddPromoItem( int32_t *, int32_t ) = 0;
    virtual int8_t AddPromoItems( int32_t *, const int32_t *, uint32_t ) = 0;
    virtual int8_t ConsumeItem( int32_t *, uint64_t, uint32_t ) = 0;
    virtual int8_t ExchangeItems( int32_t *, const int32_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t TransferItemQuantity( int32_t *, uint64_t, uint32_t, uint64_t ) = 0;
    virtual void SendItemDropHeartbeat(  ) = 0;
    virtual int8_t TriggerItemDrop( int32_t *, int32_t ) = 0;
    virtual int8_t TradeItems( int32_t *, CSteamID, const uint64_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t LoadItemDefinitions(  ) = 0;
    virtual int8_t GetItemDefinitionIDs( int32_t *, uint32_t * ) = 0;
    virtual int8_t GetItemDefinitionProperty( int32_t, const char *, char *, uint32_t * ) = 0;
    virtual uint64_t RequestEligiblePromoItemDefinitionsIDs( CSteamID ) = 0;
    virtual int8_t GetEligiblePromoItemDefinitionIDs( CSteamID, int32_t *, uint32_t * ) = 0;
    virtual uint64_t StartPurchase( const int32_t *, const uint32_t *, uint32_t ) = 0;
    virtual uint64_t RequestPrices(  ) = 0;
    virtual uint32_t GetNumItemsWithPrices(  ) = 0;
    virtual int8_t GetItemsWithPrices( int32_t *, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetItemPrice( int32_t, uint64_t * ) = 0;
    virtual uint64_t StartUpdateProperties(  ) = 0;
    virtual int8_t RemoveProperty( uint64_t, uint64_t, const char * ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, const char * ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, int8_t ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, int64_t ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, float ) = 0;
    virtual int8_t SubmitUpdateProperties( uint64_t, int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamVideo_STEAMVIDEO_INTERFACE_V002
{
#ifdef __cplusplus
    virtual void GetVideoURL( uint32_t ) = 0;
    virtual int8_t IsBroadcasting( int32_t * ) = 0;
    virtual void GetOPFSettings( uint32_t ) = 0;
    virtual int8_t GetOPFStringForApp( uint32_t, char *, int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004
{
#ifdef __cplusplus
    virtual ~u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004(  ) = 0;
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual uint64_t CreateBrowser( const char *, const char * ) = 0;
    virtual void RemoveBrowser( uint32_t ) = 0;
    virtual void LoadURL( uint32_t, const char *, const char * ) = 0;
    virtual void SetSize( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void StopLoad( uint32_t ) = 0;
    virtual void Reload( uint32_t ) = 0;
    virtual void GoBack( uint32_t ) = 0;
    virtual void GoForward( uint32_t ) = 0;
    virtual void AddHeader( uint32_t, const char *, const char * ) = 0;
    virtual void ExecuteJavascript( uint32_t, const char * ) = 0;
    virtual void MouseUp( uint32_t, uint32_t ) = 0;
    virtual void MouseDown( uint32_t, uint32_t ) = 0;
    virtual void MouseDoubleClick( uint32_t, uint32_t ) = 0;
    virtual void MouseMove( uint32_t, int32_t, int32_t ) = 0;
    virtual void MouseWheel( uint32_t, int32_t ) = 0;
    virtual void KeyDown( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyUp( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyChar( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void SetHorizontalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetVerticalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetKeyFocus( uint32_t, int8_t ) = 0;
    virtual void ViewSource( uint32_t ) = 0;
    virtual void CopyToClipboard( uint32_t ) = 0;
    virtual void PasteFromClipboard( uint32_t ) = 0;
    virtual void Find( uint32_t, const char *, int8_t, int8_t ) = 0;
    virtual void StopFind( uint32_t ) = 0;
    virtual void GetLinkAtPosition( uint32_t, int32_t, int32_t ) = 0;
    virtual void SetCookie( const char *, const char *, const char *, const char *, uint32_t, int8_t, int8_t ) = 0;
    virtual void SetPageScaleFactor( uint32_t, float, int32_t, int32_t ) = 0;
    virtual void SetBackgroundMode( uint32_t, int8_t ) = 0;
    virtual void SetDPIScalingFactor( uint32_t, float ) = 0;
    virtual void AllowStartRequest( uint32_t, int8_t ) = 0;
    virtual void JSDialogResponse( uint32_t, int8_t ) = 0;
    virtual void FileLoadDialogResponse( uint32_t, const char ** ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamParentalSettings_STEAMPARENTALSETTINGS_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual int8_t BIsParentalLockEnabled(  ) = 0;
    virtual int8_t BIsParentalLockLocked(  ) = 0;
    virtual int8_t BIsAppBlocked( uint32_t ) = 0;
    virtual int8_t BIsAppInBlockList( uint32_t ) = 0;
    virtual int8_t BIsFeatureBlocked( uint32_t ) = 0;
    virtual int8_t BIsFeatureInBlockList( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamController_SteamController006
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual void ActivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateAllActionSetLayers( uint64_t ) = 0;
    virtual int32_t GetActiveActionSetLayers( uint64_t, uint64_t * ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual ControllerDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual ControllerAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual ControllerMotionData_t GetMotionData( uint64_t ) = 0;
    virtual int8_t ShowDigitalActionOrigins( uint64_t, uint64_t, float, float, float ) = 0;
    virtual int8_t ShowAnalogActionOrigins( uint64_t, uint64_t, float, float, float ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForActionOrigin( uint32_t ) = 0;
    virtual uint32_t GetInputTypeForHandle( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient018
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameSearch*/ * GetISteamGameSearch( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void * DEPRECATED_GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusicRemote*/ * GetISteamMusicRemote( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamHTMLSurface*/ * GetISteamHTMLSurface( int32_t, int32_t, const char * ) = 0;
    virtual void DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void Set_SteamAPI_CCheckCallbackRegisteredInProcess( uint32_t (*U_CDECL )(int32_t) ) = 0;
    virtual void /*ISteamInventory*/ * GetISteamInventory( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamVideo*/ * GetISteamVideo( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParentalSettings*/ * GetISteamParentalSettings( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamInput*/ * GetISteamInput( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParties*/ * GetISteamParties( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser020
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
    virtual int32_t GetGameBadgeLevel( int32_t, int8_t ) = 0;
    virtual int32_t GetPlayerSteamLevel(  ) = 0;
    virtual uint64_t RequestStoreAuthURL( const char * ) = 0;
    virtual int8_t BIsPhoneVerified(  ) = 0;
    virtual int8_t BIsTwoFactorEnabled(  ) = 0;
    virtual int8_t BIsPhoneIdentifying(  ) = 0;
    virtual int8_t BIsPhoneRequiringVerification(  ) = 0;
    virtual uint64_t GetMarketEligibility(  ) = 0;
    virtual uint64_t GetDurationControl(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamFriends_SteamFriends017
{
#ifdef __cplusplus
    virtual const char * GetPersonaName(  ) = 0;
    virtual uint64_t SetPersonaName( const char * ) = 0;
    virtual uint32_t GetPersonaState(  ) = 0;
    virtual int32_t GetFriendCount( int32_t ) = 0;
    virtual CSteamID GetFriendByIndex( int32_t, int32_t ) = 0;
    virtual uint32_t GetFriendRelationship( CSteamID ) = 0;
    virtual uint32_t GetFriendPersonaState( CSteamID ) = 0;
    virtual const char * GetFriendPersonaName( CSteamID ) = 0;
    virtual int8_t GetFriendGamePlayed( CSteamID, FriendGameInfo_t * ) = 0;
    virtual const char * GetFriendPersonaNameHistory( CSteamID, int32_t ) = 0;
    virtual int32_t GetFriendSteamLevel( CSteamID ) = 0;
    virtual const char * GetPlayerNickname( CSteamID ) = 0;
    virtual int32_t GetFriendsGroupCount(  ) = 0;
    virtual int16_t GetFriendsGroupIDByIndex( int32_t ) = 0;
    virtual const char * GetFriendsGroupName( int16_t ) = 0;
    virtual int32_t GetFriendsGroupMembersCount( int16_t ) = 0;
    virtual void GetFriendsGroupMembersList( int16_t, CSteamID *, int32_t ) = 0;
    virtual int8_t HasFriend( CSteamID, int32_t ) = 0;
    virtual int32_t GetClanCount(  ) = 0;
    virtual CSteamID GetClanByIndex( int32_t ) = 0;
    virtual const char * GetClanName( CSteamID ) = 0;
    virtual const char * GetClanTag( CSteamID ) = 0;
    virtual int8_t GetClanActivityCounts( CSteamID, int32_t *, int32_t *, int32_t * ) = 0;
    virtual uint64_t DownloadClanActivityCounts( CSteamID *, int32_t ) = 0;
    virtual int32_t GetFriendCountFromSource( CSteamID ) = 0;
    virtual CSteamID GetFriendFromSourceByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t IsUserInSource( CSteamID, CSteamID ) = 0;
    virtual void SetInGameVoiceSpeaking( CSteamID, int8_t ) = 0;
    virtual void ActivateGameOverlay( const char * ) = 0;
    virtual void ActivateGameOverlayToUser( const char *, CSteamID ) = 0;
    virtual void ActivateGameOverlayToWebPage( const char *, uint32_t ) = 0;
    virtual void ActivateGameOverlayToStore( uint32_t, uint32_t ) = 0;
    virtual void SetPlayedWith( CSteamID ) = 0;
    virtual void ActivateGameOverlayInviteDialog( CSteamID ) = 0;
    virtual int32_t GetSmallFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetMediumFriendAvatar( CSteamID ) = 0;
    virtual int32_t GetLargeFriendAvatar( CSteamID ) = 0;
    virtual int8_t RequestUserInformation( CSteamID, int8_t ) = 0;
    virtual uint64_t RequestClanOfficerList( CSteamID ) = 0;
    virtual CSteamID GetClanOwner( CSteamID ) = 0;
    virtual int32_t GetClanOfficerCount( CSteamID ) = 0;
    virtual CSteamID GetClanOfficerByIndex( CSteamID, int32_t ) = 0;
    virtual uint32_t GetUserRestrictions(  ) = 0;
    virtual int8_t SetRichPresence( const char *, const char * ) = 0;
    virtual void ClearRichPresence(  ) = 0;
    virtual const char * GetFriendRichPresence( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendRichPresenceKeyCount( CSteamID ) = 0;
    virtual const char * GetFriendRichPresenceKeyByIndex( CSteamID, int32_t ) = 0;
    virtual void RequestFriendRichPresence( CSteamID ) = 0;
    virtual int8_t InviteUserToGame( CSteamID, const char * ) = 0;
    virtual int32_t GetCoplayFriendCount(  ) = 0;
    virtual CSteamID GetCoplayFriend( int32_t ) = 0;
    virtual int32_t GetFriendCoplayTime( CSteamID ) = 0;
    virtual uint32_t GetFriendCoplayGame( CSteamID ) = 0;
    virtual uint64_t JoinClanChatRoom( CSteamID ) = 0;
    virtual int8_t LeaveClanChatRoom( CSteamID ) = 0;
    virtual int32_t GetClanChatMemberCount( CSteamID ) = 0;
    virtual CSteamID GetChatMemberByIndex( CSteamID, int32_t ) = 0;
    virtual int8_t SendClanChatMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetClanChatMessage( CSteamID, int32_t, void *, int32_t, uint32_t *, CSteamID * ) = 0;
    virtual int8_t IsClanChatAdmin( CSteamID, CSteamID ) = 0;
    virtual int8_t IsClanChatWindowOpenInSteam( CSteamID ) = 0;
    virtual int8_t OpenClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t CloseClanChatWindowInSteam( CSteamID ) = 0;
    virtual int8_t SetListenForFriendsMessages( int8_t ) = 0;
    virtual int8_t ReplyToFriendMessage( CSteamID, const char * ) = 0;
    virtual int32_t GetFriendMessage( CSteamID, int32_t, void *, int32_t, uint32_t * ) = 0;
    virtual uint64_t GetFollowerCount( CSteamID ) = 0;
    virtual uint64_t IsFollowing( CSteamID ) = 0;
    virtual uint64_t EnumerateFollowingList( uint32_t ) = 0;
    virtual int8_t IsClanPublic( CSteamID ) = 0;
    virtual int8_t IsClanOfficialGameGroup( CSteamID ) = 0;
    virtual int32_t GetNumChatsWithUnreadPriorityMessages(  ) = 0;
    virtual void ActivateGameOverlayRemotePlayTogetherInviteDialog( CSteamID ) = 0;
    virtual int8_t RegisterProtocolInOverlayBrowser( const char * ) = 0;
    virtual void ActivateGameOverlayInviteDialogConnectString( const char * ) = 0;
    virtual uint64_t RequestEquippedProfileItems( CSteamID ) = 0;
    virtual int8_t BHasEquippedProfileItem( CSteamID, uint32_t ) = 0;
    virtual const char * GetProfileItemPropertyString( CSteamID, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetProfileItemPropertyUint( CSteamID, uint32_t, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameSearch_SteamMatchGameSearch001
{
#ifdef __cplusplus
    virtual uint32_t AddGameSearchParams( const char *, const char * ) = 0;
    virtual uint32_t SearchForGameWithLobby( CSteamID, int32_t, int32_t ) = 0;
    virtual uint32_t SearchForGameSolo( int32_t, int32_t ) = 0;
    virtual uint32_t AcceptGame(  ) = 0;
    virtual uint32_t DeclineGame(  ) = 0;
    virtual uint32_t RetrieveConnectionDetails( CSteamID, char *, int32_t ) = 0;
    virtual uint32_t EndGameSearch(  ) = 0;
    virtual uint32_t SetGameHostParams( const char *, const char * ) = 0;
    virtual uint32_t SetConnectionDetails( const char *, int32_t ) = 0;
    virtual uint32_t RequestPlayersForGame( int32_t, int32_t, int32_t ) = 0;
    virtual uint32_t HostConfirmGameStart( uint64_t ) = 0;
    virtual uint32_t CancelRequestPlayersForGame(  ) = 0;
    virtual uint32_t SubmitPlayerResult( uint64_t, CSteamID, uint32_t ) = 0;
    virtual uint32_t EndGame( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamParties_SteamParties002
{
#ifdef __cplusplus
    virtual uint32_t GetNumActiveBeacons(  ) = 0;
    virtual uint64_t GetBeaconByIndex( uint32_t ) = 0;
    virtual int8_t GetBeaconDetails( uint64_t, CSteamID *, u_SteamPartyBeaconLocation_t *, char *, int32_t ) = 0;
    virtual uint64_t JoinParty( uint64_t ) = 0;
    virtual int8_t GetNumAvailableBeaconLocations( uint32_t * ) = 0;
    virtual int8_t GetAvailableBeaconLocations( u_SteamPartyBeaconLocation_t *, uint32_t ) = 0;
    virtual uint64_t CreateBeacon( uint32_t, u_SteamPartyBeaconLocation_t *, const char *, const char * ) = 0;
    virtual void OnReservationCompleted( uint64_t, CSteamID ) = 0;
    virtual void CancelReservation( uint64_t, CSteamID ) = 0;
    virtual uint64_t ChangeNumOpenSlots( uint64_t, uint32_t ) = 0;
    virtual int8_t DestroyBeacon( uint64_t ) = 0;
    virtual int8_t GetBeaconLocationData( u_SteamPartyBeaconLocation_t, uint32_t, char *, int32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003
{
#ifdef __cplusplus
    virtual uint32_t CreateHTTPRequest( uint32_t, const char * ) = 0;
    virtual int8_t SetHTTPRequestContextValue( uint32_t, uint64_t ) = 0;
    virtual int8_t SetHTTPRequestNetworkActivityTimeout( uint32_t, uint32_t ) = 0;
    virtual int8_t SetHTTPRequestHeaderValue( uint32_t, const char *, const char * ) = 0;
    virtual int8_t SetHTTPRequestGetOrPostParameter( uint32_t, const char *, const char * ) = 0;
    virtual int8_t SendHTTPRequest( uint32_t, uint64_t * ) = 0;
    virtual int8_t SendHTTPRequestAndStreamResponse( uint32_t, uint64_t * ) = 0;
    virtual int8_t DeferHTTPRequest( uint32_t ) = 0;
    virtual int8_t PrioritizeHTTPRequest( uint32_t ) = 0;
    virtual int8_t GetHTTPResponseHeaderSize( uint32_t, const char *, uint32_t * ) = 0;
    virtual int8_t GetHTTPResponseHeaderValue( uint32_t, const char *, uint8_t *, uint32_t ) = 0;
    virtual int8_t GetHTTPResponseBodySize( uint32_t, uint32_t * ) = 0;
    virtual int8_t GetHTTPResponseBodyData( uint32_t, uint8_t *, uint32_t ) = 0;
    virtual int8_t GetHTTPStreamingResponseBodyData( uint32_t, uint32_t, uint8_t *, uint32_t ) = 0;
    virtual int8_t ReleaseHTTPRequest( uint32_t ) = 0;
    virtual int8_t GetHTTPDownloadProgressPct( uint32_t, float * ) = 0;
    virtual int8_t SetHTTPRequestRawPostBody( uint32_t, const char *, uint8_t *, uint32_t ) = 0;
    virtual uint32_t CreateCookieContainer( int8_t ) = 0;
    virtual int8_t ReleaseCookieContainer( uint32_t ) = 0;
    virtual int8_t SetCookie( uint32_t, const char *, const char *, const char * ) = 0;
    virtual int8_t SetHTTPRequestCookieContainer( uint32_t, uint32_t ) = 0;
    virtual int8_t SetHTTPRequestUserAgentInfo( uint32_t, const char * ) = 0;
    virtual int8_t SetHTTPRequestRequiresVerifiedCertificate( uint32_t, int8_t ) = 0;
    virtual int8_t SetHTTPRequestAbsoluteTimeoutMS( uint32_t, uint32_t ) = 0;
    virtual int8_t GetHTTPRequestWasTimedOut( uint32_t, int8_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamInput_SteamInput001
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual void ActivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateAllActionSetLayers( uint64_t ) = 0;
    virtual int32_t GetActiveActionSetLayers( uint64_t, uint64_t * ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual InputDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual InputAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetGlyphForActionOrigin( uint32_t ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual InputMotionData_t GetMotionData( uint64_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint32_t GetInputTypeForHandle( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual const char * GetStringForXboxOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForXboxOrigin( uint32_t ) = 0;
    virtual uint32_t GetActionOriginFromXboxOrigin( uint64_t, uint32_t ) = 0;
    virtual uint32_t TranslateActionOrigin( uint32_t, uint32_t ) = 0;
    virtual int8_t GetDeviceBindingRevision( uint64_t, int32_t *, int32_t * ) = 0;
    virtual uint32_t GetRemotePlaySessionID( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamController_SteamController007
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual void ActivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateAllActionSetLayers( uint64_t ) = 0;
    virtual int32_t GetActiveActionSetLayers( uint64_t, uint64_t * ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual InputDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual InputAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetGlyphForActionOrigin( uint32_t ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual InputMotionData_t GetMotionData( uint64_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint32_t GetInputTypeForHandle( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual const char * GetStringForXboxOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForXboxOrigin( uint32_t ) = 0;
    virtual uint32_t GetActionOriginFromXboxOrigin( uint64_t, uint32_t ) = 0;
    virtual uint32_t TranslateActionOrigin( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerBindingRevision( uint64_t, int32_t *, int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION012
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005
{
#ifdef __cplusplus
    virtual ~u_ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005(  ) = 0;
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual uint64_t CreateBrowser( const char *, const char * ) = 0;
    virtual void RemoveBrowser( uint32_t ) = 0;
    virtual void LoadURL( uint32_t, const char *, const char * ) = 0;
    virtual void SetSize( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void StopLoad( uint32_t ) = 0;
    virtual void Reload( uint32_t ) = 0;
    virtual void GoBack( uint32_t ) = 0;
    virtual void GoForward( uint32_t ) = 0;
    virtual void AddHeader( uint32_t, const char *, const char * ) = 0;
    virtual void ExecuteJavascript( uint32_t, const char * ) = 0;
    virtual void MouseUp( uint32_t, uint32_t ) = 0;
    virtual void MouseDown( uint32_t, uint32_t ) = 0;
    virtual void MouseDoubleClick( uint32_t, uint32_t ) = 0;
    virtual void MouseMove( uint32_t, int32_t, int32_t ) = 0;
    virtual void MouseWheel( uint32_t, int32_t ) = 0;
    virtual void KeyDown( uint32_t, uint32_t, uint32_t, int8_t ) = 0;
    virtual void KeyUp( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void KeyChar( uint32_t, uint32_t, uint32_t ) = 0;
    virtual void SetHorizontalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetVerticalScroll( uint32_t, uint32_t ) = 0;
    virtual void SetKeyFocus( uint32_t, int8_t ) = 0;
    virtual void ViewSource( uint32_t ) = 0;
    virtual void CopyToClipboard( uint32_t ) = 0;
    virtual void PasteFromClipboard( uint32_t ) = 0;
    virtual void Find( uint32_t, const char *, int8_t, int8_t ) = 0;
    virtual void StopFind( uint32_t ) = 0;
    virtual void GetLinkAtPosition( uint32_t, int32_t, int32_t ) = 0;
    virtual void SetCookie( const char *, const char *, const char *, const char *, uint32_t, int8_t, int8_t ) = 0;
    virtual void SetPageScaleFactor( uint32_t, float, int32_t, int32_t ) = 0;
    virtual void SetBackgroundMode( uint32_t, int8_t ) = 0;
    virtual void SetDPIScalingFactor( uint32_t, float ) = 0;
    virtual void OpenDeveloperTools( uint32_t ) = 0;
    virtual void AllowStartRequest( uint32_t, int8_t ) = 0;
    virtual void JSDialogResponse( uint32_t, int8_t ) = 0;
    virtual void FileLoadDialogResponse( uint32_t, const char ** ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamInventory_STEAMINVENTORY_INTERFACE_V003
{
#ifdef __cplusplus
    virtual uint32_t GetResultStatus( int32_t ) = 0;
    virtual int8_t GetResultItems( int32_t, SteamItemDetails_t *, uint32_t * ) = 0;
    virtual int8_t GetResultItemProperty( int32_t, uint32_t, const char *, char *, uint32_t * ) = 0;
    virtual uint32_t GetResultTimestamp( int32_t ) = 0;
    virtual int8_t CheckResultSteamID( int32_t, CSteamID ) = 0;
    virtual void DestroyResult( int32_t ) = 0;
    virtual int8_t GetAllItems( int32_t * ) = 0;
    virtual int8_t GetItemsByID( int32_t *, const uint64_t *, uint32_t ) = 0;
    virtual int8_t SerializeResult( int32_t, void *, uint32_t * ) = 0;
    virtual int8_t DeserializeResult( int32_t *, const void *, uint32_t, int8_t ) = 0;
    virtual int8_t GenerateItems( int32_t *, const int32_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t GrantPromoItems( int32_t * ) = 0;
    virtual int8_t AddPromoItem( int32_t *, int32_t ) = 0;
    virtual int8_t AddPromoItems( int32_t *, const int32_t *, uint32_t ) = 0;
    virtual int8_t ConsumeItem( int32_t *, uint64_t, uint32_t ) = 0;
    virtual int8_t ExchangeItems( int32_t *, const int32_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t TransferItemQuantity( int32_t *, uint64_t, uint32_t, uint64_t ) = 0;
    virtual void SendItemDropHeartbeat(  ) = 0;
    virtual int8_t TriggerItemDrop( int32_t *, int32_t ) = 0;
    virtual int8_t TradeItems( int32_t *, CSteamID, const uint64_t *, const uint32_t *, uint32_t, const uint64_t *, const uint32_t *, uint32_t ) = 0;
    virtual int8_t LoadItemDefinitions(  ) = 0;
    virtual int8_t GetItemDefinitionIDs( int32_t *, uint32_t * ) = 0;
    virtual int8_t GetItemDefinitionProperty( int32_t, const char *, char *, uint32_t * ) = 0;
    virtual uint64_t RequestEligiblePromoItemDefinitionsIDs( CSteamID ) = 0;
    virtual int8_t GetEligiblePromoItemDefinitionIDs( CSteamID, int32_t *, uint32_t * ) = 0;
    virtual uint64_t StartPurchase( const int32_t *, const uint32_t *, uint32_t ) = 0;
    virtual uint64_t RequestPrices(  ) = 0;
    virtual uint32_t GetNumItemsWithPrices(  ) = 0;
    virtual int8_t GetItemsWithPrices( int32_t *, uint64_t *, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetItemPrice( int32_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t StartUpdateProperties(  ) = 0;
    virtual int8_t RemoveProperty( uint64_t, uint64_t, const char * ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, const char * ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, int8_t ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, int64_t ) = 0;
    virtual int8_t SetProperty( uint64_t, uint64_t, const char *, float ) = 0;
    virtual int8_t SubmitUpdateProperties( uint64_t, int32_t * ) = 0;
    virtual int8_t InspectItem( int32_t *, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002
{
#ifdef __cplusplus
    virtual void SendP2PRendezvous( CSteamID, uint32_t, const void *, uint32_t ) = 0;
    virtual void SendP2PConnectionFailure( CSteamID, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t GetCertAsync(  ) = 0;
    virtual int32_t GetNetworkConfigJSON( void *, uint32_t ) = 0;
    virtual void CacheRelayTicket( const void *, uint32_t ) = 0;
    virtual uint32_t GetCachedRelayTicketCount(  ) = 0;
    virtual int32_t GetCachedRelayTicket( uint32_t, void *, uint32_t ) = 0;
    virtual void PostConnectionStateMsg( const void *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003
{
#ifdef __cplusplus
    virtual void SendP2PRendezvous( CSteamID, uint32_t, const void *, uint32_t ) = 0;
    virtual void SendP2PConnectionFailure( CSteamID, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t GetCertAsync(  ) = 0;
    virtual int32_t GetNetworkConfigJSON( void *, uint32_t, const char * ) = 0;
    virtual void CacheRelayTicket( const void *, uint32_t ) = 0;
    virtual uint32_t GetCachedRelayTicketCount(  ) = 0;
    virtual int32_t GetCachedRelayTicket( uint32_t, void *, uint32_t ) = 0;
    virtual void PostConnectionStateMsg( const void *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSockets_SteamNetworkingSockets002
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocketIP( const SteamNetworkingIPAddr * ) = 0;
    virtual uint32_t ConnectByIPAddress( const SteamNetworkingIPAddr * ) = 0;
    virtual uint32_t CreateListenSocketP2P( int32_t ) = 0;
    virtual uint32_t ConnectP2P( const SteamNetworkingIdentity_144 *, int32_t ) = 0;
    virtual uint32_t AcceptConnection( uint32_t ) = 0;
    virtual int8_t CloseConnection( uint32_t, int32_t, const char *, int8_t ) = 0;
    virtual int8_t CloseListenSocket( uint32_t ) = 0;
    virtual int8_t SetConnectionUserData( uint32_t, int64_t ) = 0;
    virtual int64_t GetConnectionUserData( uint32_t ) = 0;
    virtual void SetConnectionName( uint32_t, const char * ) = 0;
    virtual int8_t GetConnectionName( uint32_t, char *, int32_t ) = 0;
    virtual uint32_t SendMessageToConnection( uint32_t, const void *, uint32_t, int32_t ) = 0;
    virtual uint32_t FlushMessagesOnConnection( uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnConnection( uint32_t, u_SteamNetworkingMessage_t_144 **, int32_t ) = 0;
    virtual int32_t ReceiveMessagesOnListenSocket( uint32_t, u_SteamNetworkingMessage_t_144 **, int32_t ) = 0;
    virtual int8_t GetConnectionInfo( uint32_t, SteamNetConnectionInfo_t_144 * ) = 0;
    virtual int8_t GetQuickConnectionStatus( uint32_t, SteamNetworkingQuickConnectionStatus * ) = 0;
    virtual int32_t GetDetailedConnectionStatus( uint32_t, char *, int32_t ) = 0;
    virtual int8_t GetListenSocketAddress( uint32_t, SteamNetworkingIPAddr * ) = 0;
    virtual int8_t CreateSocketPair( uint32_t *, uint32_t *, int8_t, const SteamNetworkingIdentity_144 *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t GetIdentity( SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t ReceivedRelayAuthTicket( const void *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual int32_t FindRelayAuthTicketForServer( const SteamNetworkingIdentity_144 *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual uint32_t ConnectToHostedDedicatedServer( const SteamNetworkingIdentity_144 *, int32_t ) = 0;
    virtual uint16_t GetHostedDedicatedServerPort(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerPOPID(  ) = 0;
    virtual int8_t GetHostedDedicatedServerAddress( SteamDatagramHostedAddress * ) = 0;
    virtual uint32_t CreateHostedDedicatedServerListenSocket( int32_t ) = 0;
    virtual ~u_ISteamNetworkingSockets_SteamNetworkingSockets002(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingUtils_SteamNetworkingUtils001
{
#ifdef __cplusplus
    virtual float GetLocalPingLocation( SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeBetweenTwoLocations( const SteamNetworkPingLocation_t *, const SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeFromLocalHost( const SteamNetworkPingLocation_t * ) = 0;
    virtual void ConvertPingLocationToString( const SteamNetworkPingLocation_t *, char *, int32_t ) = 0;
    virtual int8_t ParsePingLocationString( const char *, SteamNetworkPingLocation_t * ) = 0;
    virtual int8_t CheckPingDataUpToDate( float ) = 0;
    virtual int8_t IsPingMeasurementInProgress(  ) = 0;
    virtual int32_t GetPingToDataCenter( uint32_t, uint32_t * ) = 0;
    virtual int32_t GetDirectPingToPOP( uint32_t ) = 0;
    virtual int32_t GetPOPCount(  ) = 0;
    virtual int32_t GetPOPList( uint32_t *, int32_t ) = 0;
    virtual int64_t GetLocalTimestamp(  ) = 0;
    virtual void SetDebugOutputFunction( uint32_t, void (*U_CDECL )(uint32_t, const char *) ) = 0;
    virtual int8_t SetConfigValue( uint32_t, uint32_t, int32_t, uint32_t, const void * ) = 0;
    virtual uint32_t GetConfigValue( uint32_t, uint32_t, int32_t, uint32_t *, void *, uint32_t * ) = 0;
    virtual int8_t GetConfigValueInfo( uint32_t, const char **, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetFirstConfigValue(  ) = 0;
    virtual void SteamNetworkingIPAddr_ToString( const SteamNetworkingIPAddr *, char *, uint32_t, int8_t ) = 0;
    virtual int8_t SteamNetworkingIPAddr_ParseString( SteamNetworkingIPAddr *, const char * ) = 0;
    virtual void SteamNetworkingIdentity_ToString( const SteamNetworkingIdentity_144 *, char *, uint32_t ) = 0;
    virtual int8_t SteamNetworkingIdentity_ParseString( SteamNetworkingIdentity_144 *, const char * ) = 0;
    virtual ~u_ISteamNetworkingUtils_SteamNetworkingUtils001(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION013
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, const char *, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveAllItemKeyValueTags( uint64_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSockets_SteamNetworkingSockets004
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocketIP( const SteamNetworkingIPAddr * ) = 0;
    virtual uint32_t ConnectByIPAddress( const SteamNetworkingIPAddr * ) = 0;
    virtual uint32_t CreateListenSocketP2P( int32_t ) = 0;
    virtual uint32_t ConnectP2P( const SteamNetworkingIdentity_144 *, int32_t ) = 0;
    virtual uint32_t AcceptConnection( uint32_t ) = 0;
    virtual int8_t CloseConnection( uint32_t, int32_t, const char *, int8_t ) = 0;
    virtual int8_t CloseListenSocket( uint32_t ) = 0;
    virtual int8_t SetConnectionUserData( uint32_t, int64_t ) = 0;
    virtual int64_t GetConnectionUserData( uint32_t ) = 0;
    virtual void SetConnectionName( uint32_t, const char * ) = 0;
    virtual int8_t GetConnectionName( uint32_t, char *, int32_t ) = 0;
    virtual uint32_t SendMessageToConnection( uint32_t, const void *, uint32_t, int32_t ) = 0;
    virtual uint32_t FlushMessagesOnConnection( uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnConnection( uint32_t, u_SteamNetworkingMessage_t_144 **, int32_t ) = 0;
    virtual int32_t ReceiveMessagesOnListenSocket( uint32_t, u_SteamNetworkingMessage_t_144 **, int32_t ) = 0;
    virtual int8_t GetConnectionInfo( uint32_t, SteamNetConnectionInfo_t_144 * ) = 0;
    virtual int8_t GetQuickConnectionStatus( uint32_t, SteamNetworkingQuickConnectionStatus * ) = 0;
    virtual int32_t GetDetailedConnectionStatus( uint32_t, char *, int32_t ) = 0;
    virtual int8_t GetListenSocketAddress( uint32_t, SteamNetworkingIPAddr * ) = 0;
    virtual int8_t CreateSocketPair( uint32_t *, uint32_t *, int8_t, const SteamNetworkingIdentity_144 *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t GetIdentity( SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t InitAuthentication(  ) = 0;
    virtual uint32_t GetAuthenticationStatus( SteamNetAuthenticationStatus_t * ) = 0;
    virtual int8_t ReceivedRelayAuthTicket( const void *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual int32_t FindRelayAuthTicketForServer( const SteamNetworkingIdentity_144 *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual uint32_t ConnectToHostedDedicatedServer( const SteamNetworkingIdentity_144 *, int32_t ) = 0;
    virtual uint16_t GetHostedDedicatedServerPort(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerPOPID(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerAddress( SteamDatagramHostedAddress * ) = 0;
    virtual uint32_t CreateHostedDedicatedServerListenSocket( int32_t ) = 0;
    virtual uint32_t GetGameCoordinatorServerLogin( SteamDatagramGameCoordinatorServerLogin *, int32_t *, void * ) = 0;
    virtual ~u_ISteamNetworkingSockets_SteamNetworkingSockets004(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingUtils_SteamNetworkingUtils002
{
#ifdef __cplusplus
    virtual uint32_t GetRelayNetworkStatus( SteamRelayNetworkStatus_t * ) = 0;
    virtual float GetLocalPingLocation( SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeBetweenTwoLocations( const SteamNetworkPingLocation_t *, const SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeFromLocalHost( const SteamNetworkPingLocation_t * ) = 0;
    virtual void ConvertPingLocationToString( const SteamNetworkPingLocation_t *, char *, int32_t ) = 0;
    virtual int8_t ParsePingLocationString( const char *, SteamNetworkPingLocation_t * ) = 0;
    virtual int8_t CheckPingDataUpToDate( float ) = 0;
    virtual int32_t GetPingToDataCenter( uint32_t, uint32_t * ) = 0;
    virtual int32_t GetDirectPingToPOP( uint32_t ) = 0;
    virtual int32_t GetPOPCount(  ) = 0;
    virtual int32_t GetPOPList( uint32_t *, int32_t ) = 0;
    virtual int64_t GetLocalTimestamp(  ) = 0;
    virtual void SetDebugOutputFunction( uint32_t, void (*U_CDECL )(uint32_t, const char *) ) = 0;
    virtual int8_t SetConfigValue( uint32_t, uint32_t, int32_t, uint32_t, const void * ) = 0;
    virtual uint32_t GetConfigValue( uint32_t, uint32_t, int32_t, uint32_t *, void *, uint32_t * ) = 0;
    virtual int8_t GetConfigValueInfo( uint32_t, const char **, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetFirstConfigValue(  ) = 0;
    virtual void SteamNetworkingIPAddr_ToString( const SteamNetworkingIPAddr *, char *, uint32_t, int8_t ) = 0;
    virtual int8_t SteamNetworkingIPAddr_ParseString( SteamNetworkingIPAddr *, const char * ) = 0;
    virtual void SteamNetworkingIdentity_ToString( const SteamNetworkingIdentity_144 *, char *, uint32_t ) = 0;
    virtual int8_t SteamNetworkingIdentity_ParseString( SteamNetworkingIdentity_144 *, const char * ) = 0;
    virtual ~u_ISteamNetworkingUtils_SteamNetworkingUtils002(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient019
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( uint32_t, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameSearch*/ * GetISteamGameSearch( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void * DEPRECATED_GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusicRemote*/ * GetISteamMusicRemote( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamHTMLSurface*/ * GetISteamHTMLSurface( int32_t, int32_t, const char * ) = 0;
    virtual void DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void Set_SteamAPI_CCheckCallbackRegisteredInProcess( uint32_t (*U_CDECL )(int32_t) ) = 0;
    virtual void /*ISteamInventory*/ * GetISteamInventory( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamVideo*/ * GetISteamVideo( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParentalSettings*/ * GetISteamParentalSettings( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamInput*/ * GetISteamInput( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParties*/ * GetISteamParties( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemotePlay*/ * GetISteamRemotePlay( int32_t, int32_t, const char * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001
{
#ifdef __cplusplus
    virtual uint32_t GetSessionCount(  ) = 0;
    virtual uint32_t GetSessionID( int32_t ) = 0;
    virtual CSteamID GetSessionSteamID( uint32_t ) = 0;
    virtual const char * GetSessionClientName( uint32_t ) = 0;
    virtual uint32_t GetSessionClientFormFactor( uint32_t ) = 0;
    virtual int8_t BGetSessionClientResolution( uint32_t, int32_t *, int32_t * ) = 0;
    virtual int8_t BSendRemotePlayTogetherInvite( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient020
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( const SteamIPAddress_t *, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameSearch*/ * GetISteamGameSearch( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void * DEPRECATED_GetISteamUnifiedMessages( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamAppList*/ * GetISteamAppList( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusicRemote*/ * GetISteamMusicRemote( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamHTMLSurface*/ * GetISteamHTMLSurface( int32_t, int32_t, const char * ) = 0;
    virtual void DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void Set_SteamAPI_CCheckCallbackRegisteredInProcess( uint32_t (*U_CDECL )(int32_t) ) = 0;
    virtual void /*ISteamInventory*/ * GetISteamInventory( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamVideo*/ * GetISteamVideo( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParentalSettings*/ * GetISteamParentalSettings( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamInput*/ * GetISteamInput( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParties*/ * GetISteamParties( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemotePlay*/ * GetISteamRemotePlay( int32_t, int32_t, const char * ) = 0;
    virtual void DestroyAllInterfaces(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworking_SteamNetworking006
{
#ifdef __cplusplus
    virtual int8_t SendP2PPacket( CSteamID, const void *, uint32_t, uint32_t, int32_t ) = 0;
    virtual int8_t IsP2PPacketAvailable( uint32_t *, int32_t ) = 0;
    virtual int8_t ReadP2PPacket( void *, uint32_t, uint32_t *, CSteamID *, int32_t ) = 0;
    virtual int8_t AcceptP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t CloseP2PSessionWithUser( CSteamID ) = 0;
    virtual int8_t CloseP2PChannelWithUser( CSteamID, int32_t ) = 0;
    virtual int8_t GetP2PSessionState( CSteamID, P2PSessionState_t * ) = 0;
    virtual int8_t AllowP2PPacketRelay( int8_t ) = 0;
    virtual uint32_t CreateListenSocket( int32_t, SteamIPAddress_t, uint16_t, int8_t ) = 0;
    virtual uint32_t CreateP2PConnectionSocket( CSteamID, int32_t, int32_t, int8_t ) = 0;
    virtual uint32_t CreateConnectionSocket( SteamIPAddress_t, uint16_t, int32_t ) = 0;
    virtual int8_t DestroySocket( uint32_t, int8_t ) = 0;
    virtual int8_t DestroyListenSocket( uint32_t, int8_t ) = 0;
    virtual int8_t SendDataOnSocket( uint32_t, void *, uint32_t, int8_t ) = 0;
    virtual int8_t IsDataAvailableOnSocket( uint32_t, uint32_t * ) = 0;
    virtual int8_t RetrieveDataFromSocket( uint32_t, void *, uint32_t, uint32_t * ) = 0;
    virtual int8_t IsDataAvailable( uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t RetrieveData( uint32_t, void *, uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetSocketInfo( uint32_t, CSteamID *, int32_t *, SteamIPAddress_t *, uint16_t * ) = 0;
    virtual int8_t GetListenSocketInfo( uint32_t, SteamIPAddress_t *, uint16_t * ) = 0;
    virtual uint32_t GetSocketConnectionType( uint32_t ) = 0;
    virtual int32_t GetMaxPacketSize( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION014
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, const char *, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddRequiredTagGroup( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveAllItemKeyValueTags( uint64_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer013
{
#ifdef __cplusplus
    virtual int8_t InitGameServer( uint32_t, uint16_t, uint16_t, uint32_t, uint32_t, const char * ) = 0;
    virtual void SetProduct( const char * ) = 0;
    virtual void SetGameDescription( const char * ) = 0;
    virtual void SetModDir( const char * ) = 0;
    virtual void SetDedicatedServer( int8_t ) = 0;
    virtual void LogOn( const char * ) = 0;
    virtual void LogOnAnonymous(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t WasRestartRequested(  ) = 0;
    virtual void SetMaxPlayerCount( int32_t ) = 0;
    virtual void SetBotPlayerCount( int32_t ) = 0;
    virtual void SetServerName( const char * ) = 0;
    virtual void SetMapName( const char * ) = 0;
    virtual void SetPasswordProtected( int8_t ) = 0;
    virtual void SetSpectatorPort( uint16_t ) = 0;
    virtual void SetSpectatorServerName( const char * ) = 0;
    virtual void ClearAllKeyValues(  ) = 0;
    virtual void SetKeyValue( const char *, const char * ) = 0;
    virtual void SetGameTags( const char * ) = 0;
    virtual void SetGameData( const char * ) = 0;
    virtual void SetRegion( const char * ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual uint64_t GetServerReputation(  ) = 0;
    virtual SteamIPAddress_t GetPublicIP(  ) = 0;
    virtual int8_t HandleIncomingPacket( const void *, int32_t, uint32_t, uint16_t ) = 0;
    virtual int32_t GetNextOutgoingPacket( void *, int32_t, uint32_t *, uint16_t * ) = 0;
    virtual void EnableHeartbeats( int8_t ) = 0;
    virtual void SetHeartbeatInterval( int32_t ) = 0;
    virtual void ForceHeartbeat(  ) = 0;
    virtual uint64_t AssociateWithClan( CSteamID ) = 0;
    virtual uint64_t ComputeNewPlayerCompatibility( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSockets_SteamNetworkingSockets006
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocketIP( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectByIPAddress( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t CreateListenSocketP2P( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectP2P( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t AcceptConnection( uint32_t ) = 0;
    virtual int8_t CloseConnection( uint32_t, int32_t, const char *, int8_t ) = 0;
    virtual int8_t CloseListenSocket( uint32_t ) = 0;
    virtual int8_t SetConnectionUserData( uint32_t, int64_t ) = 0;
    virtual int64_t GetConnectionUserData( uint32_t ) = 0;
    virtual void SetConnectionName( uint32_t, const char * ) = 0;
    virtual int8_t GetConnectionName( uint32_t, char *, int32_t ) = 0;
    virtual uint32_t SendMessageToConnection( uint32_t, const void *, uint32_t, int32_t, int64_t * ) = 0;
    virtual void SendMessages( int32_t, u_SteamNetworkingMessage_t_147 **, int64_t * ) = 0;
    virtual uint32_t FlushMessagesOnConnection( uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnConnection( uint32_t, u_SteamNetworkingMessage_t_147 **, int32_t ) = 0;
    virtual int32_t ReceiveMessagesOnListenSocket( uint32_t, u_SteamNetworkingMessage_t_147 **, int32_t ) = 0;
    virtual int8_t GetConnectionInfo( uint32_t, SteamNetConnectionInfo_t_144 * ) = 0;
    virtual int8_t GetQuickConnectionStatus( uint32_t, SteamNetworkingQuickConnectionStatus * ) = 0;
    virtual int32_t GetDetailedConnectionStatus( uint32_t, char *, int32_t ) = 0;
    virtual int8_t GetListenSocketAddress( uint32_t, SteamNetworkingIPAddr * ) = 0;
    virtual int8_t CreateSocketPair( uint32_t *, uint32_t *, int8_t, const SteamNetworkingIdentity_144 *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t GetIdentity( SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t InitAuthentication(  ) = 0;
    virtual uint32_t GetAuthenticationStatus( SteamNetAuthenticationStatus_t * ) = 0;
    virtual int8_t ReceivedRelayAuthTicket( const void *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual int32_t FindRelayAuthTicketForServer( const SteamNetworkingIdentity_144 *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual uint32_t ConnectToHostedDedicatedServer( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint16_t GetHostedDedicatedServerPort(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerPOPID(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerAddress( SteamDatagramHostedAddress * ) = 0;
    virtual uint32_t CreateHostedDedicatedServerListenSocket( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t GetGameCoordinatorServerLogin( SteamDatagramGameCoordinatorServerLogin *, int32_t *, void * ) = 0;
    virtual uint32_t ConnectP2PCustomSignaling( u_ISteamNetworkingConnectionCustomSignaling *, const SteamNetworkingIdentity_144 *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual int8_t ReceivedP2PCustomSignal( const void *, int32_t, u_ISteamNetworkingCustomSignalingRecvContext * ) = 0;
    virtual ~u_ISteamNetworkingSockets_SteamNetworkingSockets006(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingUtils_SteamNetworkingUtils003
{
#ifdef __cplusplus
    virtual u_SteamNetworkingMessage_t_147 * AllocateMessage( int32_t ) = 0;
    virtual uint32_t GetRelayNetworkStatus( SteamRelayNetworkStatus_t * ) = 0;
    virtual float GetLocalPingLocation( SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeBetweenTwoLocations( const SteamNetworkPingLocation_t *, const SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeFromLocalHost( const SteamNetworkPingLocation_t * ) = 0;
    virtual void ConvertPingLocationToString( const SteamNetworkPingLocation_t *, char *, int32_t ) = 0;
    virtual int8_t ParsePingLocationString( const char *, SteamNetworkPingLocation_t * ) = 0;
    virtual int8_t CheckPingDataUpToDate( float ) = 0;
    virtual int32_t GetPingToDataCenter( uint32_t, uint32_t * ) = 0;
    virtual int32_t GetDirectPingToPOP( uint32_t ) = 0;
    virtual int32_t GetPOPCount(  ) = 0;
    virtual int32_t GetPOPList( uint32_t *, int32_t ) = 0;
    virtual int64_t GetLocalTimestamp(  ) = 0;
    virtual void SetDebugOutputFunction( uint32_t, void (*U_CDECL )(uint32_t, const char *) ) = 0;
    virtual int8_t SetConfigValue( uint32_t, uint32_t, int32_t, uint32_t, const void * ) = 0;
    virtual uint32_t GetConfigValue( uint32_t, uint32_t, int32_t, uint32_t *, void *, uint32_t * ) = 0;
    virtual int8_t GetConfigValueInfo( uint32_t, const char **, uint32_t *, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t GetFirstConfigValue(  ) = 0;
    virtual void SteamNetworkingIPAddr_ToString( const SteamNetworkingIPAddr *, char *, uint32_t, int8_t ) = 0;
    virtual int8_t SteamNetworkingIPAddr_ParseString( SteamNetworkingIPAddr *, const char * ) = 0;
    virtual void SteamNetworkingIdentity_ToString( const SteamNetworkingIdentity_144 *, char *, uint32_t ) = 0;
    virtual int8_t SteamNetworkingIdentity_ParseString( SteamNetworkingIdentity_144 *, const char * ) = 0;
    virtual ~u_ISteamNetworkingUtils_SteamNetworkingUtils003(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSockets_SteamNetworkingSockets008
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocketIP( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectByIPAddress( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t CreateListenSocketP2P( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectP2P( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t AcceptConnection( uint32_t ) = 0;
    virtual int8_t CloseConnection( uint32_t, int32_t, const char *, int8_t ) = 0;
    virtual int8_t CloseListenSocket( uint32_t ) = 0;
    virtual int8_t SetConnectionUserData( uint32_t, int64_t ) = 0;
    virtual int64_t GetConnectionUserData( uint32_t ) = 0;
    virtual void SetConnectionName( uint32_t, const char * ) = 0;
    virtual int8_t GetConnectionName( uint32_t, char *, int32_t ) = 0;
    virtual uint32_t SendMessageToConnection( uint32_t, const void *, uint32_t, int32_t, int64_t * ) = 0;
    virtual void SendMessages( int32_t, u_SteamNetworkingMessage_t_147 *const *, int64_t * ) = 0;
    virtual uint32_t FlushMessagesOnConnection( uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnConnection( uint32_t, u_SteamNetworkingMessage_t_147 **, int32_t ) = 0;
    virtual int8_t GetConnectionInfo( uint32_t, SteamNetConnectionInfo_t_144 * ) = 0;
    virtual int8_t GetQuickConnectionStatus( uint32_t, SteamNetworkingQuickConnectionStatus * ) = 0;
    virtual int32_t GetDetailedConnectionStatus( uint32_t, char *, int32_t ) = 0;
    virtual int8_t GetListenSocketAddress( uint32_t, SteamNetworkingIPAddr * ) = 0;
    virtual int8_t CreateSocketPair( uint32_t *, uint32_t *, int8_t, const SteamNetworkingIdentity_144 *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t GetIdentity( SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t InitAuthentication(  ) = 0;
    virtual uint32_t GetAuthenticationStatus( SteamNetAuthenticationStatus_t * ) = 0;
    virtual uint32_t CreatePollGroup(  ) = 0;
    virtual int8_t DestroyPollGroup( uint32_t ) = 0;
    virtual int8_t SetConnectionPollGroup( uint32_t, uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnPollGroup( uint32_t, u_SteamNetworkingMessage_t_147 **, int32_t ) = 0;
    virtual int8_t ReceivedRelayAuthTicket( const void *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual int32_t FindRelayAuthTicketForServer( const SteamNetworkingIdentity_144 *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual uint32_t ConnectToHostedDedicatedServer( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint16_t GetHostedDedicatedServerPort(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerPOPID(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerAddress( SteamDatagramHostedAddress * ) = 0;
    virtual uint32_t CreateHostedDedicatedServerListenSocket( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t GetGameCoordinatorServerLogin( SteamDatagramGameCoordinatorServerLogin *, int32_t *, void * ) = 0;
    virtual uint32_t ConnectP2PCustomSignaling( u_ISteamNetworkingConnectionCustomSignaling *, const SteamNetworkingIdentity_144 *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual int8_t ReceivedP2PCustomSignal( const void *, int32_t, u_ISteamNetworkingCustomSignalingRecvContext * ) = 0;
    virtual int8_t GetCertificateRequest( int32_t *, void *, char (*)[1024] ) = 0;
    virtual int8_t SetCertificate( const void *, int32_t, char (*)[1024] ) = 0;
    virtual ~u_ISteamNetworkingSockets_SteamNetworkingSockets008(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser021
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection_DEPRECATED( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection_DEPRECATED( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
    virtual int32_t GetGameBadgeLevel( int32_t, int8_t ) = 0;
    virtual int32_t GetPlayerSteamLevel(  ) = 0;
    virtual uint64_t RequestStoreAuthURL( const char * ) = 0;
    virtual int8_t BIsPhoneVerified(  ) = 0;
    virtual int8_t BIsTwoFactorEnabled(  ) = 0;
    virtual int8_t BIsPhoneIdentifying(  ) = 0;
    virtual int8_t BIsPhoneRequiringVerification(  ) = 0;
    virtual uint64_t GetMarketEligibility(  ) = 0;
    virtual uint64_t GetDurationControl(  ) = 0;
    virtual int8_t BSetDurationControlOnlineState( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012
{
#ifdef __cplusplus
    virtual int8_t RequestCurrentStats(  ) = 0;
    virtual int8_t GetStat( const char *, int32_t * ) = 0;
    virtual int8_t GetStat( const char *, float * ) = 0;
    virtual int8_t SetStat( const char *, int32_t ) = 0;
    virtual int8_t SetStat( const char *, float ) = 0;
    virtual int8_t UpdateAvgRateStat( const char *, float, double ) = 0;
    virtual int8_t GetAchievement( const char *, int8_t * ) = 0;
    virtual int8_t SetAchievement( const char * ) = 0;
    virtual int8_t ClearAchievement( const char * ) = 0;
    virtual int8_t GetAchievementAndUnlockTime( const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t StoreStats(  ) = 0;
    virtual int32_t GetAchievementIcon( const char * ) = 0;
    virtual const char * GetAchievementDisplayAttribute( const char *, const char * ) = 0;
    virtual int8_t IndicateAchievementProgress( const char *, uint32_t, uint32_t ) = 0;
    virtual uint32_t GetNumAchievements(  ) = 0;
    virtual const char * GetAchievementName( uint32_t ) = 0;
    virtual uint64_t RequestUserStats( CSteamID ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, int32_t * ) = 0;
    virtual int8_t GetUserStat( CSteamID, const char *, float * ) = 0;
    virtual int8_t GetUserAchievement( CSteamID, const char *, int8_t * ) = 0;
    virtual int8_t GetUserAchievementAndUnlockTime( CSteamID, const char *, int8_t *, uint32_t * ) = 0;
    virtual int8_t ResetAllStats( int8_t ) = 0;
    virtual uint64_t FindOrCreateLeaderboard( const char *, uint32_t, uint32_t ) = 0;
    virtual uint64_t FindLeaderboard( const char * ) = 0;
    virtual const char * GetLeaderboardName( uint64_t ) = 0;
    virtual int32_t GetLeaderboardEntryCount( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardSortMethod( uint64_t ) = 0;
    virtual uint32_t GetLeaderboardDisplayType( uint64_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntries( uint64_t, uint32_t, int32_t, int32_t ) = 0;
    virtual uint64_t DownloadLeaderboardEntriesForUsers( uint64_t, CSteamID *, int32_t ) = 0;
    virtual int8_t GetDownloadedLeaderboardEntry( uint64_t, int32_t, u_LeaderboardEntry_t_123 *, int32_t *, int32_t ) = 0;
    virtual uint64_t UploadLeaderboardScore( uint64_t, uint32_t, int32_t, const int32_t *, int32_t ) = 0;
    virtual uint64_t AttachLeaderboardUGC( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetNumberOfCurrentPlayers(  ) = 0;
    virtual uint64_t RequestGlobalAchievementPercentages(  ) = 0;
    virtual int32_t GetMostAchievedAchievementInfo( char *, uint32_t, float *, int8_t * ) = 0;
    virtual int32_t GetNextMostAchievedAchievementInfo( int32_t, char *, uint32_t, float *, int8_t * ) = 0;
    virtual int8_t GetAchievementAchievedPercent( const char *, float * ) = 0;
    virtual uint64_t RequestGlobalStats( int32_t ) = 0;
    virtual int8_t GetGlobalStat( const char *, int64_t * ) = 0;
    virtual int8_t GetGlobalStat( const char *, double * ) = 0;
    virtual int32_t GetGlobalStatHistory( const char *, int64_t *, uint32_t ) = 0;
    virtual int32_t GetGlobalStatHistory( const char *, double *, uint32_t ) = 0;
    virtual int8_t GetAchievementProgressLimits( const char *, int32_t *, int32_t * ) = 0;
    virtual int8_t GetAchievementProgressLimits( const char *, float *, float * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUtils_SteamUtils010
{
#ifdef __cplusplus
    virtual uint32_t GetSecondsSinceAppActive(  ) = 0;
    virtual uint32_t GetSecondsSinceComputerActive(  ) = 0;
    virtual uint32_t GetConnectedUniverse(  ) = 0;
    virtual uint32_t GetServerRealTime(  ) = 0;
    virtual const char * GetIPCountry(  ) = 0;
    virtual int8_t GetImageSize( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t GetImageRGBA( int32_t, uint8_t *, int32_t ) = 0;
    virtual int8_t GetCSERIPPort( uint32_t *, uint16_t * ) = 0;
    virtual uint8_t GetCurrentBatteryPower(  ) = 0;
    virtual uint32_t GetAppID(  ) = 0;
    virtual void SetOverlayNotificationPosition( uint32_t ) = 0;
    virtual int8_t IsAPICallCompleted( uint64_t, int8_t * ) = 0;
    virtual uint32_t GetAPICallFailureReason( uint64_t ) = 0;
    virtual int8_t GetAPICallResult( uint64_t, void *, int32_t, int32_t, int8_t * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t IsOverlayEnabled(  ) = 0;
    virtual int8_t BOverlayNeedsPresent(  ) = 0;
    virtual uint64_t CheckFileSignature( const char * ) = 0;
    virtual int8_t ShowGamepadTextInput( uint32_t, uint32_t, const char *, uint32_t, const char * ) = 0;
    virtual uint32_t GetEnteredGamepadTextLength(  ) = 0;
    virtual int8_t GetEnteredGamepadTextInput( char *, uint32_t ) = 0;
    virtual const char * GetSteamUILanguage(  ) = 0;
    virtual int8_t IsSteamRunningInVR(  ) = 0;
    virtual void SetOverlayNotificationInset( int32_t, int32_t ) = 0;
    virtual int8_t IsSteamInBigPictureMode(  ) = 0;
    virtual void StartVRDashboard(  ) = 0;
    virtual int8_t IsVRHeadsetStreamingEnabled(  ) = 0;
    virtual void SetVRHeadsetStreamingEnabled( int8_t ) = 0;
    virtual int8_t IsSteamChinaLauncher(  ) = 0;
    virtual int8_t InitFilterText( uint32_t ) = 0;
    virtual int32_t FilterText( uint32_t, CSteamID, const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetIPv6ConnectivityState( uint32_t ) = 0;
    virtual int8_t IsSteamRunningOnSteamDeck(  ) = 0;
    virtual int8_t ShowFloatingGamepadTextInput( uint32_t, int32_t, int32_t, int32_t, int32_t ) = 0;
    virtual void SetGameLauncherMode( int8_t ) = 0;
    virtual int8_t DismissFloatingGamepadTextInput(  ) = 0;
    virtual int8_t DismissGamepadTextInput(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingMessages_SteamNetworkingMessages002
{
#ifdef __cplusplus
    virtual uint32_t SendMessageToUser( const SteamNetworkingIdentity_144 *, const void *, uint32_t, int32_t, int32_t ) = 0;
    virtual int32_t ReceiveMessagesOnChannel( int32_t, u_SteamNetworkingMessage_t_153a **, int32_t ) = 0;
    virtual int8_t AcceptSessionWithUser( const SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t CloseSessionWithUser( const SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t CloseChannelWithUser( const SteamNetworkingIdentity_144 *, int32_t ) = 0;
    virtual uint32_t GetSessionConnectionInfo( const SteamNetworkingIdentity_144 *, SteamNetConnectionInfo_t_153a *, SteamNetConnectionRealTimeStatus_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSockets_SteamNetworkingSockets009
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocketIP( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectByIPAddress( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t CreateListenSocketP2P( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectP2P( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t AcceptConnection( uint32_t ) = 0;
    virtual int8_t CloseConnection( uint32_t, int32_t, const char *, int8_t ) = 0;
    virtual int8_t CloseListenSocket( uint32_t ) = 0;
    virtual int8_t SetConnectionUserData( uint32_t, int64_t ) = 0;
    virtual int64_t GetConnectionUserData( uint32_t ) = 0;
    virtual void SetConnectionName( uint32_t, const char * ) = 0;
    virtual int8_t GetConnectionName( uint32_t, char *, int32_t ) = 0;
    virtual uint32_t SendMessageToConnection( uint32_t, const void *, uint32_t, int32_t, int64_t * ) = 0;
    virtual void SendMessages( int32_t, u_SteamNetworkingMessage_t_147 *const *, int64_t * ) = 0;
    virtual uint32_t FlushMessagesOnConnection( uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnConnection( uint32_t, u_SteamNetworkingMessage_t_147 **, int32_t ) = 0;
    virtual int8_t GetConnectionInfo( uint32_t, SteamNetConnectionInfo_t_144 * ) = 0;
    virtual int8_t GetQuickConnectionStatus( uint32_t, SteamNetworkingQuickConnectionStatus * ) = 0;
    virtual int32_t GetDetailedConnectionStatus( uint32_t, char *, int32_t ) = 0;
    virtual int8_t GetListenSocketAddress( uint32_t, SteamNetworkingIPAddr * ) = 0;
    virtual int8_t CreateSocketPair( uint32_t *, uint32_t *, int8_t, const SteamNetworkingIdentity_144 *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t GetIdentity( SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t InitAuthentication(  ) = 0;
    virtual uint32_t GetAuthenticationStatus( SteamNetAuthenticationStatus_t * ) = 0;
    virtual uint32_t CreatePollGroup(  ) = 0;
    virtual int8_t DestroyPollGroup( uint32_t ) = 0;
    virtual int8_t SetConnectionPollGroup( uint32_t, uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnPollGroup( uint32_t, u_SteamNetworkingMessage_t_147 **, int32_t ) = 0;
    virtual int8_t ReceivedRelayAuthTicket( const void *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual int32_t FindRelayAuthTicketForServer( const SteamNetworkingIdentity_144 *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual uint32_t ConnectToHostedDedicatedServer( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint16_t GetHostedDedicatedServerPort(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerPOPID(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerAddress( SteamDatagramHostedAddress * ) = 0;
    virtual uint32_t CreateHostedDedicatedServerListenSocket( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t GetGameCoordinatorServerLogin( SteamDatagramGameCoordinatorServerLogin *, int32_t *, void * ) = 0;
    virtual uint32_t ConnectP2PCustomSignaling( void /*ISteamNetworkingConnectionSignaling*/ *, const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual int8_t ReceivedP2PCustomSignal( const void *, int32_t, void /*ISteamNetworkingSignalingRecvContext*/ * ) = 0;
    virtual int8_t GetCertificateRequest( int32_t *, void *, char (*)[1024] ) = 0;
    virtual int8_t SetCertificate( const void *, int32_t, char (*)[1024] ) = 0;
    virtual void RunCallbacks(  ) = 0;
    virtual ~u_ISteamNetworkingSockets_SteamNetworkingSockets009(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamInput_SteamInput002
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual void ActivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateAllActionSetLayers( uint64_t ) = 0;
    virtual int32_t GetActiveActionSetLayers( uint64_t, uint64_t * ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual InputDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual InputAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetGlyphForActionOrigin( uint32_t ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual InputMotionData_t GetMotionData( uint64_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint32_t GetInputTypeForHandle( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual const char * GetStringForXboxOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForXboxOrigin( uint32_t ) = 0;
    virtual uint32_t GetActionOriginFromXboxOrigin( uint64_t, uint32_t ) = 0;
    virtual uint32_t TranslateActionOrigin( uint32_t, uint32_t ) = 0;
    virtual int8_t GetDeviceBindingRevision( uint64_t, int32_t *, int32_t * ) = 0;
    virtual uint32_t GetRemotePlaySessionID( uint64_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamController_SteamController008
{
#ifdef __cplusplus
    virtual int8_t Init(  ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual void ActivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateAllActionSetLayers( uint64_t ) = 0;
    virtual int32_t GetActiveActionSetLayers( uint64_t, uint64_t * ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual InputDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual InputAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetGlyphForActionOrigin( uint32_t ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual InputMotionData_t GetMotionData( uint64_t ) = 0;
    virtual void TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint32_t GetInputTypeForHandle( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual const char * GetStringForXboxOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForXboxOrigin( uint32_t ) = 0;
    virtual uint32_t GetActionOriginFromXboxOrigin( uint64_t, uint32_t ) = 0;
    virtual uint32_t TranslateActionOrigin( uint32_t, uint32_t ) = 0;
    virtual int8_t GetControllerBindingRevision( uint64_t, int32_t *, int32_t * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION015
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual uint32_t GetQueryUGCNumTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTag( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTagDisplayName( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, const char *, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddRequiredTagGroup( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveAllItemKeyValueTags( uint64_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
    virtual int8_t ShowWorkshopEULA(  ) = 0;
    virtual uint64_t GetWorkshopEULAStatus(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016
{
#ifdef __cplusplus
    virtual int8_t FileWrite( const char *, const void *, int32_t ) = 0;
    virtual int32_t FileRead( const char *, void *, int32_t ) = 0;
    virtual uint64_t FileWriteAsync( const char *, const void *, uint32_t ) = 0;
    virtual uint64_t FileReadAsync( const char *, uint32_t, uint32_t ) = 0;
    virtual int8_t FileReadAsyncComplete( uint64_t, void *, uint32_t ) = 0;
    virtual int8_t FileForget( const char * ) = 0;
    virtual int8_t FileDelete( const char * ) = 0;
    virtual uint64_t FileShare( const char * ) = 0;
    virtual int8_t SetSyncPlatforms( const char *, uint32_t ) = 0;
    virtual uint64_t FileWriteStreamOpen( const char * ) = 0;
    virtual int8_t FileWriteStreamWriteChunk( uint64_t, const void *, int32_t ) = 0;
    virtual int8_t FileWriteStreamClose( uint64_t ) = 0;
    virtual int8_t FileWriteStreamCancel( uint64_t ) = 0;
    virtual int8_t FileExists( const char * ) = 0;
    virtual int8_t FilePersisted( const char * ) = 0;
    virtual int32_t GetFileSize( const char * ) = 0;
    virtual int64_t GetFileTimestamp( const char * ) = 0;
    virtual uint32_t GetSyncPlatforms( const char * ) = 0;
    virtual int32_t GetFileCount(  ) = 0;
    virtual const char * GetFileNameAndSize( int32_t, int32_t * ) = 0;
    virtual int8_t GetQuota( uint64_t *, uint64_t * ) = 0;
    virtual int8_t IsCloudEnabledForAccount(  ) = 0;
    virtual int8_t IsCloudEnabledForApp(  ) = 0;
    virtual void SetCloudEnabledForApp( int8_t ) = 0;
    virtual uint64_t UGCDownload( uint64_t, uint32_t ) = 0;
    virtual int8_t GetUGCDownloadProgress( uint64_t, int32_t *, int32_t * ) = 0;
    virtual int8_t GetUGCDetails( uint64_t, uint32_t *, char **, int32_t *, CSteamID * ) = 0;
    virtual int32_t UGCRead( uint64_t, void *, int32_t, uint32_t, uint32_t ) = 0;
    virtual int32_t GetCachedUGCCount(  ) = 0;
    virtual uint64_t GetCachedUGCHandle( int32_t ) = 0;
    virtual uint64_t PublishWorkshopFile( const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t *, uint32_t ) = 0;
    virtual uint64_t CreatePublishedFileUpdateRequest( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFilePreviewFile( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileTitle( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileDescription( uint64_t, const char * ) = 0;
    virtual int8_t UpdatePublishedFileVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t UpdatePublishedFileTags( uint64_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t CommitPublishedFileUpdate( uint64_t ) = 0;
    virtual uint64_t GetPublishedFileDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t DeletePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserPublishedFiles( uint32_t ) = 0;
    virtual uint64_t SubscribePublishedFile( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSubscribedFiles( uint32_t ) = 0;
    virtual uint64_t UnsubscribePublishedFile( uint64_t ) = 0;
    virtual int8_t UpdatePublishedFileSetChangeDescription( uint64_t, const char * ) = 0;
    virtual uint64_t GetPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t UpdateUserPublishedItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserPublishedItemVoteDetails( uint64_t ) = 0;
    virtual uint64_t EnumerateUserSharedWorkshopFiles( CSteamID, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t PublishVideo( uint32_t, const char *, const char *, const char *, uint32_t, const char *, const char *, uint32_t, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t SetUserPublishedFileAction( uint64_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedFilesByUserAction( uint32_t, uint32_t ) = 0;
    virtual uint64_t EnumeratePublishedWorkshopFiles( uint32_t, uint32_t, uint32_t, uint32_t, u_SteamParamStringArray_t *, u_SteamParamStringArray_t * ) = 0;
    virtual uint64_t UGCDownloadToLocation( uint64_t, const char *, uint32_t ) = 0;
    virtual int32_t GetLocalFileChangeCount(  ) = 0;
    virtual const char * GetLocalFileChange( int32_t, uint32_t *, uint32_t * ) = 0;
    virtual int8_t BeginFileWriteBatch(  ) = 0;
    virtual int8_t EndFileWriteBatch(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamInput_SteamInput005
{
#ifdef __cplusplus
    virtual int8_t Init( int8_t ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual int8_t SetInputActionManifestFilePath( const char * ) = 0;
    virtual void RunFrame( int8_t ) = 0;
    virtual int8_t BWaitForData( int8_t, uint32_t ) = 0;
    virtual int8_t BNewDataAvailable(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual void EnableDeviceCallbacks(  ) = 0;
    virtual void EnableActionEventCallbacks( void (*U_CDECL )(SteamInputActionEvent_t *) ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual void ActivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateAllActionSetLayers( uint64_t ) = 0;
    virtual int32_t GetActiveActionSetLayers( uint64_t, uint64_t * ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual InputDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetStringForDigitalActionName( uint64_t ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual InputAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetGlyphPNGForActionOrigin( uint32_t, uint32_t, uint32_t ) = 0;
    virtual const char * GetGlyphSVGForActionOrigin( uint32_t, uint32_t ) = 0;
    virtual const char * GetGlyphForActionOrigin_Legacy( uint32_t ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual const char * GetStringForAnalogActionName( uint64_t ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual InputMotionData_t GetMotionData( uint64_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void TriggerVibrationExtended( uint64_t, uint16_t, uint16_t, uint16_t, uint16_t ) = 0;
    virtual void TriggerSimpleHapticEvent( uint64_t, uint32_t, uint8_t, char, uint8_t, char ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual void Legacy_TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void Legacy_TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint32_t GetInputTypeForHandle( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual const char * GetStringForXboxOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForXboxOrigin( uint32_t ) = 0;
    virtual uint32_t GetActionOriginFromXboxOrigin( uint64_t, uint32_t ) = 0;
    virtual uint32_t TranslateActionOrigin( uint32_t, uint32_t ) = 0;
    virtual int8_t GetDeviceBindingRevision( uint64_t, int32_t *, int32_t * ) = 0;
    virtual uint32_t GetRemotePlaySessionID( uint64_t ) = 0;
    virtual uint16_t GetSessionInputConfigurationSettings(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer014
{
#ifdef __cplusplus
    virtual int8_t InitGameServer( uint32_t, uint16_t, uint16_t, uint32_t, uint32_t, const char * ) = 0;
    virtual void SetProduct( const char * ) = 0;
    virtual void SetGameDescription( const char * ) = 0;
    virtual void SetModDir( const char * ) = 0;
    virtual void SetDedicatedServer( int8_t ) = 0;
    virtual void LogOn( const char * ) = 0;
    virtual void LogOnAnonymous(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t WasRestartRequested(  ) = 0;
    virtual void SetMaxPlayerCount( int32_t ) = 0;
    virtual void SetBotPlayerCount( int32_t ) = 0;
    virtual void SetServerName( const char * ) = 0;
    virtual void SetMapName( const char * ) = 0;
    virtual void SetPasswordProtected( int8_t ) = 0;
    virtual void SetSpectatorPort( uint16_t ) = 0;
    virtual void SetSpectatorServerName( const char * ) = 0;
    virtual void ClearAllKeyValues(  ) = 0;
    virtual void SetKeyValue( const char *, const char * ) = 0;
    virtual void SetGameTags( const char * ) = 0;
    virtual void SetGameData( const char * ) = 0;
    virtual void SetRegion( const char * ) = 0;
    virtual void SetAdvertiseServerActive( int8_t ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual uint64_t GetServerReputation(  ) = 0;
    virtual SteamIPAddress_t GetPublicIP(  ) = 0;
    virtual int8_t HandleIncomingPacket( const void *, int32_t, uint32_t, uint16_t ) = 0;
    virtual int32_t GetNextOutgoingPacket( void *, int32_t, uint32_t *, uint16_t * ) = 0;
    virtual uint64_t AssociateWithClan( CSteamID ) = 0;
    virtual uint64_t ComputeNewPlayerCompatibility( CSteamID ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate_DEPRECATED( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect_DEPRECATED( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual void SetMasterServerHeartbeatInterval_DEPRECATED( int32_t ) = 0;
    virtual void ForceMasterServerHeartbeat_DEPRECATED(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamInput_SteamInput006
{
#ifdef __cplusplus
    virtual int8_t Init( int8_t ) = 0;
    virtual int8_t Shutdown(  ) = 0;
    virtual int8_t SetInputActionManifestFilePath( const char * ) = 0;
    virtual void RunFrame( int8_t ) = 0;
    virtual int8_t BWaitForData( int8_t, uint32_t ) = 0;
    virtual int8_t BNewDataAvailable(  ) = 0;
    virtual int32_t GetConnectedControllers( uint64_t * ) = 0;
    virtual void EnableDeviceCallbacks(  ) = 0;
    virtual void EnableActionEventCallbacks( void (*U_CDECL )(SteamInputActionEvent_t *) ) = 0;
    virtual uint64_t GetActionSetHandle( const char * ) = 0;
    virtual void ActivateActionSet( uint64_t, uint64_t ) = 0;
    virtual uint64_t GetCurrentActionSet( uint64_t ) = 0;
    virtual void ActivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateActionSetLayer( uint64_t, uint64_t ) = 0;
    virtual void DeactivateAllActionSetLayers( uint64_t ) = 0;
    virtual int32_t GetActiveActionSetLayers( uint64_t, uint64_t * ) = 0;
    virtual uint64_t GetDigitalActionHandle( const char * ) = 0;
    virtual InputDigitalActionData_t GetDigitalActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetDigitalActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetStringForDigitalActionName( uint64_t ) = 0;
    virtual uint64_t GetAnalogActionHandle( const char * ) = 0;
    virtual InputAnalogActionData_t GetAnalogActionData( uint64_t, uint64_t ) = 0;
    virtual int32_t GetAnalogActionOrigins( uint64_t, uint64_t, uint64_t, uint32_t * ) = 0;
    virtual const char * GetGlyphPNGForActionOrigin( uint32_t, uint32_t, uint32_t ) = 0;
    virtual const char * GetGlyphSVGForActionOrigin( uint32_t, uint32_t ) = 0;
    virtual const char * GetGlyphForActionOrigin_Legacy( uint32_t ) = 0;
    virtual const char * GetStringForActionOrigin( uint32_t ) = 0;
    virtual const char * GetStringForAnalogActionName( uint64_t ) = 0;
    virtual void StopAnalogActionMomentum( uint64_t, uint64_t ) = 0;
    virtual InputMotionData_t GetMotionData( uint64_t ) = 0;
    virtual void TriggerVibration( uint64_t, uint16_t, uint16_t ) = 0;
    virtual void TriggerVibrationExtended( uint64_t, uint16_t, uint16_t, uint16_t, uint16_t ) = 0;
    virtual void TriggerSimpleHapticEvent( uint64_t, uint32_t, uint8_t, char, uint8_t, char ) = 0;
    virtual void SetLEDColor( uint64_t, uint8_t, uint8_t, uint8_t, uint32_t ) = 0;
    virtual void Legacy_TriggerHapticPulse( uint64_t, uint32_t, uint16_t ) = 0;
    virtual void Legacy_TriggerRepeatedHapticPulse( uint64_t, uint32_t, uint16_t, uint16_t, uint16_t, uint32_t ) = 0;
    virtual int8_t ShowBindingPanel( uint64_t ) = 0;
    virtual uint32_t GetInputTypeForHandle( uint64_t ) = 0;
    virtual uint64_t GetControllerForGamepadIndex( int32_t ) = 0;
    virtual int32_t GetGamepadIndexForController( uint64_t ) = 0;
    virtual const char * GetStringForXboxOrigin( uint32_t ) = 0;
    virtual const char * GetGlyphForXboxOrigin( uint32_t ) = 0;
    virtual uint32_t GetActionOriginFromXboxOrigin( uint64_t, uint32_t ) = 0;
    virtual uint32_t TranslateActionOrigin( uint32_t, uint32_t ) = 0;
    virtual int8_t GetDeviceBindingRevision( uint64_t, int32_t *, int32_t * ) = 0;
    virtual uint32_t GetRemotePlaySessionID( uint64_t ) = 0;
    virtual uint16_t GetSessionInputConfigurationSettings(  ) = 0;
    virtual void SetDualSenseTriggerEffect( uint64_t, const ScePadTriggerEffectParam * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION016
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual uint32_t GetQueryUGCNumTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTag( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTagDisplayName( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, const char *, char *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddRequiredTagGroup( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t SetTimeCreatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t SetTimeUpdatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveAllItemKeyValueTags( uint64_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
    virtual int8_t ShowWorkshopEULA(  ) = 0;
    virtual uint64_t GetWorkshopEULAStatus(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingSockets_SteamNetworkingSockets012
{
#ifdef __cplusplus
    virtual uint32_t CreateListenSocketIP( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectByIPAddress( const SteamNetworkingIPAddr *, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t CreateListenSocketP2P( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t ConnectP2P( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t AcceptConnection( uint32_t ) = 0;
    virtual int8_t CloseConnection( uint32_t, int32_t, const char *, int8_t ) = 0;
    virtual int8_t CloseListenSocket( uint32_t ) = 0;
    virtual int8_t SetConnectionUserData( uint32_t, int64_t ) = 0;
    virtual int64_t GetConnectionUserData( uint32_t ) = 0;
    virtual void SetConnectionName( uint32_t, const char * ) = 0;
    virtual int8_t GetConnectionName( uint32_t, char *, int32_t ) = 0;
    virtual uint32_t SendMessageToConnection( uint32_t, const void *, uint32_t, int32_t, int64_t * ) = 0;
    virtual void SendMessages( int32_t, u_SteamNetworkingMessage_t_153a *const *, int64_t * ) = 0;
    virtual uint32_t FlushMessagesOnConnection( uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnConnection( uint32_t, u_SteamNetworkingMessage_t_153a **, int32_t ) = 0;
    virtual int8_t GetConnectionInfo( uint32_t, SteamNetConnectionInfo_t_153a * ) = 0;
    virtual uint32_t GetConnectionRealTimeStatus( uint32_t, SteamNetConnectionRealTimeStatus_t *, int32_t, SteamNetConnectionRealTimeLaneStatus_t * ) = 0;
    virtual int32_t GetDetailedConnectionStatus( uint32_t, char *, int32_t ) = 0;
    virtual int8_t GetListenSocketAddress( uint32_t, SteamNetworkingIPAddr * ) = 0;
    virtual int8_t CreateSocketPair( uint32_t *, uint32_t *, int8_t, const SteamNetworkingIdentity_144 *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t ConfigureConnectionLanes( uint32_t, int32_t, const int32_t *, const uint16_t * ) = 0;
    virtual int8_t GetIdentity( SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t InitAuthentication(  ) = 0;
    virtual uint32_t GetAuthenticationStatus( SteamNetAuthenticationStatus_t * ) = 0;
    virtual uint32_t CreatePollGroup(  ) = 0;
    virtual int8_t DestroyPollGroup( uint32_t ) = 0;
    virtual int8_t SetConnectionPollGroup( uint32_t, uint32_t ) = 0;
    virtual int32_t ReceiveMessagesOnPollGroup( uint32_t, u_SteamNetworkingMessage_t_153a **, int32_t ) = 0;
    virtual int8_t ReceivedRelayAuthTicket( const void *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual int32_t FindRelayAuthTicketForServer( const SteamNetworkingIdentity_144 *, int32_t, SteamDatagramRelayAuthTicket * ) = 0;
    virtual uint32_t ConnectToHostedDedicatedServer( const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint16_t GetHostedDedicatedServerPort(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerPOPID(  ) = 0;
    virtual uint32_t GetHostedDedicatedServerAddress( SteamDatagramHostedAddress * ) = 0;
    virtual uint32_t CreateHostedDedicatedServerListenSocket( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t GetGameCoordinatorServerLogin( SteamDatagramGameCoordinatorServerLogin *, int32_t *, void * ) = 0;
    virtual uint32_t ConnectP2PCustomSignaling( void /*ISteamNetworkingConnectionSignaling*/ *, const SteamNetworkingIdentity_144 *, int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual int8_t ReceivedP2PCustomSignal( const void *, int32_t, void /*ISteamNetworkingSignalingRecvContext*/ * ) = 0;
    virtual int8_t GetCertificateRequest( int32_t *, void *, char (*)[1024] ) = 0;
    virtual int8_t SetCertificate( const void *, int32_t, char (*)[1024] ) = 0;
    virtual void ResetIdentity( const SteamNetworkingIdentity_144 * ) = 0;
    virtual void RunCallbacks(  ) = 0;
    virtual int8_t BeginAsyncRequestFakeIP( int32_t ) = 0;
    virtual void GetFakeIP( int32_t, SteamNetworkingFakeIPResult_t * ) = 0;
    virtual uint32_t CreateListenSocketP2PFakeIP( int32_t, int32_t, const SteamNetworkingConfigValue_t * ) = 0;
    virtual uint32_t GetRemoteFakeIPForConnection( uint32_t, SteamNetworkingIPAddr * ) = 0;
    virtual void /*ISteamNetworkingFakeUDPPort*/ * CreateFakeUDPPort( int32_t ) = 0;
    virtual ~u_ISteamNetworkingSockets_SteamNetworkingSockets012(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingUtils_SteamNetworkingUtils004
{
#ifdef __cplusplus
    virtual u_SteamNetworkingMessage_t_153a * AllocateMessage( int32_t ) = 0;
    virtual uint32_t GetRelayNetworkStatus( SteamRelayNetworkStatus_t * ) = 0;
    virtual float GetLocalPingLocation( SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeBetweenTwoLocations( const SteamNetworkPingLocation_t *, const SteamNetworkPingLocation_t * ) = 0;
    virtual int32_t EstimatePingTimeFromLocalHost( const SteamNetworkPingLocation_t * ) = 0;
    virtual void ConvertPingLocationToString( const SteamNetworkPingLocation_t *, char *, int32_t ) = 0;
    virtual int8_t ParsePingLocationString( const char *, SteamNetworkPingLocation_t * ) = 0;
    virtual int8_t CheckPingDataUpToDate( float ) = 0;
    virtual int32_t GetPingToDataCenter( uint32_t, uint32_t * ) = 0;
    virtual int32_t GetDirectPingToPOP( uint32_t ) = 0;
    virtual int32_t GetPOPCount(  ) = 0;
    virtual int32_t GetPOPList( uint32_t *, int32_t ) = 0;
    virtual int64_t GetLocalTimestamp(  ) = 0;
    virtual void SetDebugOutputFunction( uint32_t, void (*U_CDECL )(uint32_t, const char *) ) = 0;
    virtual uint32_t GetIPv4FakeIPType( uint32_t ) = 0;
    virtual uint32_t GetRealIdentityForFakeIP( const SteamNetworkingIPAddr *, SteamNetworkingIdentity_144 * ) = 0;
    virtual int8_t SetConfigValue( uint32_t, uint32_t, int32_t, uint32_t, const void * ) = 0;
    virtual uint32_t GetConfigValue( uint32_t, uint32_t, int32_t, uint32_t *, void *, uint32_t * ) = 0;
    virtual const char * GetConfigValueInfo( uint32_t, uint32_t *, uint32_t * ) = 0;
    virtual uint32_t IterateGenericEditableConfigValues( uint32_t, int8_t ) = 0;
    virtual void SteamNetworkingIPAddr_ToString( const SteamNetworkingIPAddr *, char *, uint32_t, int8_t ) = 0;
    virtual int8_t SteamNetworkingIPAddr_ParseString( SteamNetworkingIPAddr *, const char * ) = 0;
    virtual uint32_t SteamNetworkingIPAddr_GetFakeIPType( const SteamNetworkingIPAddr * ) = 0;
    virtual void SteamNetworkingIdentity_ToString( const SteamNetworkingIdentity_144 *, char *, uint32_t ) = 0;
    virtual int8_t SteamNetworkingIdentity_ParseString( SteamNetworkingIdentity_144 *, const char * ) = 0;
    virtual ~u_ISteamNetworkingUtils_SteamNetworkingUtils004(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamNetworkingFakeUDPPort_SteamNetworkingFakeUDPPort001
{
#ifdef __cplusplus
    virtual void DestroyFakeUDPPort(  ) = 0;
    virtual uint32_t SendMessageToFakeIP( const SteamNetworkingIPAddr *, const void *, uint32_t, int32_t ) = 0;
    virtual int32_t ReceiveMessages( u_SteamNetworkingMessage_t_153a **, int32_t ) = 0;
    virtual void ScheduleCleanup( const SteamNetworkingIPAddr * ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser022
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection_DEPRECATED( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection_DEPRECATED( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
    virtual int32_t GetGameBadgeLevel( int32_t, int8_t ) = 0;
    virtual int32_t GetPlayerSteamLevel(  ) = 0;
    virtual uint64_t RequestStoreAuthURL( const char * ) = 0;
    virtual int8_t BIsPhoneVerified(  ) = 0;
    virtual int8_t BIsTwoFactorEnabled(  ) = 0;
    virtual int8_t BIsPhoneIdentifying(  ) = 0;
    virtual int8_t BIsPhoneRequiringVerification(  ) = 0;
    virtual uint64_t GetMarketEligibility(  ) = 0;
    virtual uint64_t GetDurationControl(  ) = 0;
    virtual int8_t BSetDurationControlOnlineState( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION017
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual uint32_t GetQueryUGCNumTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTag( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTagDisplayName( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetQueryUGCContentDescriptors( uint64_t, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddRequiredTagGroup( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t SetTimeCreatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t SetTimeUpdatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveAllItemKeyValueTags( uint64_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual int8_t AddContentDescriptor( uint64_t, uint32_t ) = 0;
    virtual int8_t RemoveContentDescriptor( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
    virtual int8_t ShowWorkshopEULA(  ) = 0;
    virtual uint64_t GetWorkshopEULAStatus(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamGameServer_SteamGameServer015
{
#ifdef __cplusplus
    virtual int8_t InitGameServer( uint32_t, uint16_t, uint16_t, uint32_t, uint32_t, const char * ) = 0;
    virtual void SetProduct( const char * ) = 0;
    virtual void SetGameDescription( const char * ) = 0;
    virtual void SetModDir( const char * ) = 0;
    virtual void SetDedicatedServer( int8_t ) = 0;
    virtual void LogOn( const char * ) = 0;
    virtual void LogOnAnonymous(  ) = 0;
    virtual void LogOff(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual int8_t BSecure(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int8_t WasRestartRequested(  ) = 0;
    virtual void SetMaxPlayerCount( int32_t ) = 0;
    virtual void SetBotPlayerCount( int32_t ) = 0;
    virtual void SetServerName( const char * ) = 0;
    virtual void SetMapName( const char * ) = 0;
    virtual void SetPasswordProtected( int8_t ) = 0;
    virtual void SetSpectatorPort( uint16_t ) = 0;
    virtual void SetSpectatorServerName( const char * ) = 0;
    virtual void ClearAllKeyValues(  ) = 0;
    virtual void SetKeyValue( const char *, const char * ) = 0;
    virtual void SetGameTags( const char * ) = 0;
    virtual void SetGameData( const char * ) = 0;
    virtual void SetRegion( const char * ) = 0;
    virtual void SetAdvertiseServerActive( int8_t ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t RequestUserGroupStatus( CSteamID, CSteamID ) = 0;
    virtual void GetGameplayStats(  ) = 0;
    virtual uint64_t GetServerReputation(  ) = 0;
    virtual SteamIPAddress_t GetPublicIP(  ) = 0;
    virtual int8_t HandleIncomingPacket( const void *, int32_t, uint32_t, uint16_t ) = 0;
    virtual int32_t GetNextOutgoingPacket( void *, int32_t, uint32_t *, uint16_t * ) = 0;
    virtual uint64_t AssociateWithClan( CSteamID ) = 0;
    virtual uint64_t ComputeNewPlayerCompatibility( CSteamID ) = 0;
    virtual int8_t SendUserConnectAndAuthenticate_DEPRECATED( uint32_t, const void *, uint32_t, CSteamID * ) = 0;
    virtual CSteamID CreateUnauthenticatedUserConnection(  ) = 0;
    virtual void SendUserDisconnect_DEPRECATED( CSteamID ) = 0;
    virtual int8_t BUpdateUserData( CSteamID, const char *, uint32_t ) = 0;
    virtual void SetMasterServerHeartbeatInterval_DEPRECATED( int32_t ) = 0;
    virtual void ForceMasterServerHeartbeat_DEPRECATED(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUser_SteamUser023
{
#ifdef __cplusplus
    virtual int32_t GetHSteamUser(  ) = 0;
    virtual int8_t BLoggedOn(  ) = 0;
    virtual CSteamID GetSteamID(  ) = 0;
    virtual int32_t InitiateGameConnection_DEPRECATED( void *, int32_t, CSteamID, uint32_t, uint16_t, int8_t ) = 0;
    virtual void TerminateGameConnection_DEPRECATED( uint32_t, uint16_t ) = 0;
    virtual void TrackAppUsageEvent( CGameID, int32_t, const char * ) = 0;
    virtual int8_t GetUserDataFolder( char *, int32_t ) = 0;
    virtual void StartVoiceRecording(  ) = 0;
    virtual void StopVoiceRecording(  ) = 0;
    virtual uint32_t GetAvailableVoice( uint32_t *, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoice( int8_t, void *, uint32_t, uint32_t *, int8_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t DecompressVoice( const void *, uint32_t, void *, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual uint32_t GetVoiceOptimalSampleRate(  ) = 0;
    virtual uint32_t GetAuthSessionTicket( void *, int32_t, uint32_t *, const SteamNetworkingIdentity_144 * ) = 0;
    virtual uint32_t GetAuthTicketForWebApi( const char * ) = 0;
    virtual uint32_t BeginAuthSession( const void *, int32_t, CSteamID ) = 0;
    virtual void EndAuthSession( CSteamID ) = 0;
    virtual void CancelAuthTicket( uint32_t ) = 0;
    virtual uint32_t UserHasLicenseForApp( CSteamID, uint32_t ) = 0;
    virtual int8_t BIsBehindNAT(  ) = 0;
    virtual void AdvertiseGame( CSteamID, uint32_t, uint16_t ) = 0;
    virtual uint64_t RequestEncryptedAppTicket( void *, int32_t ) = 0;
    virtual int8_t GetEncryptedAppTicket( void *, int32_t, uint32_t * ) = 0;
    virtual int32_t GetGameBadgeLevel( int32_t, int8_t ) = 0;
    virtual int32_t GetPlayerSteamLevel(  ) = 0;
    virtual uint64_t RequestStoreAuthURL( const char * ) = 0;
    virtual int8_t BIsPhoneVerified(  ) = 0;
    virtual int8_t BIsTwoFactorEnabled(  ) = 0;
    virtual int8_t BIsPhoneIdentifying(  ) = 0;
    virtual int8_t BIsPhoneRequiringVerification(  ) = 0;
    virtual uint64_t GetMarketEligibility(  ) = 0;
    virtual uint64_t GetDurationControl(  ) = 0;
    virtual int8_t BSetDurationControlOnlineState( uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION018
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_128x * ) = 0;
    virtual uint32_t GetQueryUGCNumTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTag( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTagDisplayName( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetQueryUGCContentDescriptors( uint64_t, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddRequiredTagGroup( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t SetTimeCreatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t SetTimeUpdatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t *, int8_t ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveAllItemKeyValueTags( uint64_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual int8_t AddContentDescriptor( uint64_t, uint32_t ) = 0;
    virtual int8_t RemoveContentDescriptor( uint64_t, uint32_t ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
    virtual int8_t ShowWorkshopEULA(  ) = 0;
    virtual uint64_t GetWorkshopEULAStatus(  ) = 0;
    virtual uint32_t GetUserContentDescriptorPreferences( uint32_t *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002
{
#ifdef __cplusplus
    virtual uint32_t GetSessionCount(  ) = 0;
    virtual uint32_t GetSessionID( int32_t ) = 0;
    virtual CSteamID GetSessionSteamID( uint32_t ) = 0;
    virtual const char * GetSessionClientName( uint32_t ) = 0;
    virtual uint32_t GetSessionClientFormFactor( uint32_t ) = 0;
    virtual int8_t BGetSessionClientResolution( uint32_t, int32_t *, int32_t * ) = 0;
    virtual int8_t BStartRemotePlayTogether( int8_t ) = 0;
    virtual int8_t BSendRemotePlayTogetherInvite( CSteamID ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamClient_SteamClient021
{
#ifdef __cplusplus
    virtual int32_t CreateSteamPipe(  ) = 0;
    virtual int8_t BReleaseSteamPipe( int32_t ) = 0;
    virtual int32_t ConnectToGlobalUser( int32_t ) = 0;
    virtual int32_t CreateLocalUser( int32_t *, uint32_t ) = 0;
    virtual void ReleaseUser( int32_t, int32_t ) = 0;
    virtual void /*ISteamUser*/ * GetISteamUser( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServer*/ * GetISteamGameServer( int32_t, int32_t, const char * ) = 0;
    virtual void SetLocalIPBinding( const SteamIPAddress_t *, uint16_t ) = 0;
    virtual void /*ISteamFriends*/ * GetISteamFriends( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUtils*/ * GetISteamUtils( int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmaking*/ * GetISteamMatchmaking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMatchmakingServers*/ * GetISteamMatchmakingServers( int32_t, int32_t, const char * ) = 0;
    virtual void * GetISteamGenericInterface( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUserStats*/ * GetISteamUserStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameServerStats*/ * GetISteamGameServerStats( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamApps*/ * GetISteamApps( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamNetworking*/ * GetISteamNetworking( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemoteStorage*/ * GetISteamRemoteStorage( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamScreenshots*/ * GetISteamScreenshots( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamGameSearch*/ * GetISteamGameSearch( int32_t, int32_t, const char * ) = 0;
    virtual void RunFrame(  ) = 0;
    virtual uint32_t GetIPCCallCount(  ) = 0;
    virtual void SetWarningMessageHook( void (*U_CDECL )(int32_t, const char *) ) = 0;
    virtual int8_t BShutdownIfAllPipesClosed(  ) = 0;
    virtual void /*ISteamHTTP*/ * GetISteamHTTP( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamController*/ * GetISteamController( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamUGC*/ * GetISteamUGC( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusic*/ * GetISteamMusic( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamMusicRemote*/ * GetISteamMusicRemote( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamHTMLSurface*/ * GetISteamHTMLSurface( int32_t, int32_t, const char * ) = 0;
    virtual void DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void (*U_CDECL )(void) ) = 0;
    virtual void Set_SteamAPI_CCheckCallbackRegisteredInProcess( uint32_t (*U_CDECL )(int32_t) ) = 0;
    virtual void /*ISteamInventory*/ * GetISteamInventory( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamVideo*/ * GetISteamVideo( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParentalSettings*/ * GetISteamParentalSettings( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamInput*/ * GetISteamInput( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamParties*/ * GetISteamParties( int32_t, int32_t, const char * ) = 0;
    virtual void /*ISteamRemotePlay*/ * GetISteamRemotePlay( int32_t, int32_t, const char * ) = 0;
    virtual void DestroyAllInterfaces(  ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamUGC_STEAMUGC_INTERFACE_VERSION020
{
#ifdef __cplusplus
    virtual uint64_t CreateQueryUserUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, uint32_t ) = 0;
    virtual uint64_t CreateQueryAllUGCRequest( uint32_t, uint32_t, uint32_t, uint32_t, const char * ) = 0;
    virtual uint64_t CreateQueryUGCDetailsRequest( uint64_t *, uint32_t ) = 0;
    virtual uint64_t SendQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t GetQueryUGCResult( uint64_t, uint32_t, u_SteamUGCDetails_t_160 * ) = 0;
    virtual uint32_t GetQueryUGCNumTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTag( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCTagDisplayName( uint64_t, uint32_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCPreviewURL( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCMetadata( uint64_t, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCChildren( uint64_t, uint32_t, uint64_t *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCStatistic( uint64_t, uint32_t, uint32_t, uint64_t * ) = 0;
    virtual uint32_t GetQueryUGCNumAdditionalPreviews( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCAdditionalPreview( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t, uint32_t * ) = 0;
    virtual uint32_t GetQueryUGCNumKeyValueTags( uint64_t, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, uint32_t, char *, uint32_t, char *, uint32_t ) = 0;
    virtual int8_t GetQueryUGCKeyValueTag( uint64_t, uint32_t, const char *, char *, uint32_t ) = 0;
    virtual uint32_t GetNumSupportedGameVersions( uint64_t, uint32_t ) = 0;
    virtual int8_t GetSupportedGameVersionData( uint64_t, uint32_t, uint32_t, char *, char *, uint32_t ) = 0;
    virtual uint32_t GetQueryUGCContentDescriptors( uint64_t, uint32_t, uint32_t *, uint32_t ) = 0;
    virtual int8_t ReleaseQueryUGCRequest( uint64_t ) = 0;
    virtual int8_t AddRequiredTag( uint64_t, const char * ) = 0;
    virtual int8_t AddRequiredTagGroup( uint64_t, const u_SteamParamStringArray_t * ) = 0;
    virtual int8_t AddExcludedTag( uint64_t, const char * ) = 0;
    virtual int8_t SetReturnOnlyIDs( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnKeyValueTags( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnLongDescription( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnMetadata( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnChildren( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnAdditionalPreviews( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnTotalOnly( uint64_t, int8_t ) = 0;
    virtual int8_t SetReturnPlaytimeStats( uint64_t, uint32_t ) = 0;
    virtual int8_t SetLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowCachedResponse( uint64_t, uint32_t ) = 0;
    virtual int8_t SetAdminQuery( uint64_t, int8_t ) = 0;
    virtual int8_t SetCloudFileNameFilter( uint64_t, const char * ) = 0;
    virtual int8_t SetMatchAnyTag( uint64_t, int8_t ) = 0;
    virtual int8_t SetSearchText( uint64_t, const char * ) = 0;
    virtual int8_t SetRankedByTrendDays( uint64_t, uint32_t ) = 0;
    virtual int8_t SetTimeCreatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t SetTimeUpdatedDateRange( uint64_t, uint32_t, uint32_t ) = 0;
    virtual int8_t AddRequiredKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t RequestUGCDetails( uint64_t, uint32_t ) = 0;
    virtual uint64_t CreateItem( uint32_t, uint32_t ) = 0;
    virtual uint64_t StartItemUpdate( uint32_t, uint64_t ) = 0;
    virtual int8_t SetItemTitle( uint64_t, const char * ) = 0;
    virtual int8_t SetItemDescription( uint64_t, const char * ) = 0;
    virtual int8_t SetItemUpdateLanguage( uint64_t, const char * ) = 0;
    virtual int8_t SetItemMetadata( uint64_t, const char * ) = 0;
    virtual int8_t SetItemVisibility( uint64_t, uint32_t ) = 0;
    virtual int8_t SetItemTags( uint64_t, const u_SteamParamStringArray_t *, int8_t ) = 0;
    virtual int8_t SetItemContent( uint64_t, const char * ) = 0;
    virtual int8_t SetItemPreview( uint64_t, const char * ) = 0;
    virtual int8_t SetAllowLegacyUpload( uint64_t, int8_t ) = 0;
    virtual int8_t RemoveAllItemKeyValueTags( uint64_t ) = 0;
    virtual int8_t RemoveItemKeyValueTags( uint64_t, const char * ) = 0;
    virtual int8_t AddItemKeyValueTag( uint64_t, const char *, const char * ) = 0;
    virtual int8_t AddItemPreviewFile( uint64_t, const char *, uint32_t ) = 0;
    virtual int8_t AddItemPreviewVideo( uint64_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewFile( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t UpdateItemPreviewVideo( uint64_t, uint32_t, const char * ) = 0;
    virtual int8_t RemoveItemPreview( uint64_t, uint32_t ) = 0;
    virtual int8_t AddContentDescriptor( uint64_t, uint32_t ) = 0;
    virtual int8_t RemoveContentDescriptor( uint64_t, uint32_t ) = 0;
    virtual int8_t SetRequiredGameVersions( uint64_t, const char *, const char * ) = 0;
    virtual uint64_t SubmitItemUpdate( uint64_t, const char * ) = 0;
    virtual uint32_t GetItemUpdateProgress( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual uint64_t SetUserItemVote( uint64_t, int8_t ) = 0;
    virtual uint64_t GetUserItemVote( uint64_t ) = 0;
    virtual uint64_t AddItemToFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t RemoveItemFromFavorites( uint32_t, uint64_t ) = 0;
    virtual uint64_t SubscribeItem( uint64_t ) = 0;
    virtual uint64_t UnsubscribeItem( uint64_t ) = 0;
    virtual uint32_t GetNumSubscribedItems(  ) = 0;
    virtual uint32_t GetSubscribedItems( uint64_t *, uint32_t ) = 0;
    virtual uint32_t GetItemState( uint64_t ) = 0;
    virtual int8_t GetItemInstallInfo( uint64_t, uint64_t *, char *, uint32_t, uint32_t * ) = 0;
    virtual int8_t GetItemDownloadInfo( uint64_t, uint64_t *, uint64_t * ) = 0;
    virtual int8_t DownloadItem( uint64_t, int8_t ) = 0;
    virtual int8_t BInitWorkshopForGameServer( uint32_t, const char * ) = 0;
    virtual void SuspendDownloads( int8_t ) = 0;
    virtual uint64_t StartPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTracking( uint64_t *, uint32_t ) = 0;
    virtual uint64_t StopPlaytimeTrackingForAllItems(  ) = 0;
    virtual uint64_t AddDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t RemoveDependency( uint64_t, uint64_t ) = 0;
    virtual uint64_t AddAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t RemoveAppDependency( uint64_t, uint32_t ) = 0;
    virtual uint64_t GetAppDependencies( uint64_t ) = 0;
    virtual uint64_t DeleteItem( uint64_t ) = 0;
    virtual int8_t ShowWorkshopEULA(  ) = 0;
    virtual uint64_t GetWorkshopEULAStatus(  ) = 0;
    virtual uint32_t GetUserContentDescriptorPreferences( uint32_t *, uint32_t ) = 0;
#endif /* __cplusplus */
};

struct u_ISteamVideo_STEAMVIDEO_INTERFACE_V007
{
#ifdef __cplusplus
    virtual void GetVideoURL( uint32_t ) = 0;
    virtual int8_t IsBroadcasting( int32_t * ) = 0;
    virtual void GetOPFSettings( uint32_t ) = 0;
    virtual int8_t GetOPFStringForApp( uint32_t, char *, int32_t * ) = 0;
#endif /* __cplusplus */
};


NTSTATUS ISteamAppList_STEAMAPPLIST_INTERFACE_VERSION001_GetNumInstalledApps( void * );
NTSTATUS ISteamAppList_STEAMAPPLIST_INTERFACE_VERSION001_GetInstalledApps( void * );
NTSTATUS ISteamAppList_STEAMAPPLIST_INTERFACE_VERSION001_GetAppName( void * );
NTSTATUS ISteamAppList_STEAMAPPLIST_INTERFACE_VERSION001_GetAppInstallDir( void * );
NTSTATUS ISteamAppList_STEAMAPPLIST_INTERFACE_VERSION001_GetAppBuildId( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION001_GetAppData( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION002_BIsSubscribed( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION002_BIsLowViolence( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION002_BIsCybercafe( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION002_BIsVACBanned( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION002_GetCurrentGameLanguage( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION002_GetAvailableGameLanguages( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION002_BIsSubscribedApp( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_BIsSubscribed( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_BIsLowViolence( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_BIsCybercafe( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_BIsVACBanned( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_GetCurrentGameLanguage( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_GetAvailableGameLanguages( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_BIsSubscribedApp( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION003_BIsDlcInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BIsSubscribed( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BIsLowViolence( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BIsCybercafe( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BIsVACBanned( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_GetCurrentGameLanguage( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_GetAvailableGameLanguages( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BIsSubscribedApp( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BIsDlcInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_GetEarliestPurchaseUnixTime( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BIsSubscribedFromFreeWeekend( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_GetDLCCount( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_BGetDLCDataByIndex( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_InstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION004_UninstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsSubscribed( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsLowViolence( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsCybercafe( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsVACBanned( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_GetCurrentGameLanguage( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_GetAvailableGameLanguages( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsSubscribedApp( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsDlcInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_GetEarliestPurchaseUnixTime( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsSubscribedFromFreeWeekend( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_GetDLCCount( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BGetDLCDataByIndex( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_InstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_UninstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_RequestAppProofOfPurchaseKey( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_GetCurrentBetaName( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_MarkContentCorrupt( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_GetInstalledDepots( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_GetAppInstallDir( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION005_BIsAppInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsSubscribed( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsLowViolence( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsCybercafe( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsVACBanned( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetCurrentGameLanguage( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetAvailableGameLanguages( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsSubscribedApp( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsDlcInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetEarliestPurchaseUnixTime( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsSubscribedFromFreeWeekend( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetDLCCount( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BGetDLCDataByIndex( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_InstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_UninstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_RequestAppProofOfPurchaseKey( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetCurrentBetaName( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_MarkContentCorrupt( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetInstalledDepots( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetAppInstallDir( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_BIsAppInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetAppOwner( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION006_GetLaunchQueryParam( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsSubscribed( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsLowViolence( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsCybercafe( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsVACBanned( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetCurrentGameLanguage( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetAvailableGameLanguages( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsSubscribedApp( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsDlcInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetEarliestPurchaseUnixTime( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsSubscribedFromFreeWeekend( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetDLCCount( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BGetDLCDataByIndex( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_InstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_UninstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_RequestAppProofOfPurchaseKey( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetCurrentBetaName( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_MarkContentCorrupt( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetInstalledDepots( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetAppInstallDir( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_BIsAppInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetAppOwner( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetLaunchQueryParam( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetDlcDownloadProgress( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION007_GetAppBuildId( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsSubscribed( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsLowViolence( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsCybercafe( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsVACBanned( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetCurrentGameLanguage( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetAvailableGameLanguages( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsSubscribedApp( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsDlcInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetEarliestPurchaseUnixTime( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsSubscribedFromFreeWeekend( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetDLCCount( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BGetDLCDataByIndex( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_InstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_UninstallDLC( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_RequestAppProofOfPurchaseKey( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetCurrentBetaName( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_MarkContentCorrupt( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetInstalledDepots( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetAppInstallDir( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsAppInstalled( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetAppOwner( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetLaunchQueryParam( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetDlcDownloadProgress( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetAppBuildId( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_RequestAllProofOfPurchaseKeys( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetFileDetails( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetLaunchCommandLine( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsSubscribedFromFamilySharing( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_BIsTimedTrial( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_SetDlcContext( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetNumBetas( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_GetBetaInfo( void * );
NTSTATUS ISteamApps_STEAMAPPS_INTERFACE_VERSION008_SetActiveBeta( void * );
NTSTATUS ISteamAppTicket_STEAMAPPTICKET_INTERFACE_VERSION001_GetAppOwnershipTicketData( void * );
NTSTATUS ISteamController_STEAMCONTROLLER_INTERFACE_VERSION_Init( void * );
NTSTATUS ISteamController_STEAMCONTROLLER_INTERFACE_VERSION_Shutdown( void * );
NTSTATUS ISteamController_STEAMCONTROLLER_INTERFACE_VERSION_RunFrame( void * );
NTSTATUS ISteamController_STEAMCONTROLLER_INTERFACE_VERSION_GetControllerState( void * );
NTSTATUS ISteamController_STEAMCONTROLLER_INTERFACE_VERSION_TriggerHapticPulse( void * );
NTSTATUS ISteamController_STEAMCONTROLLER_INTERFACE_VERSION_SetOverrideMode( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_Init( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_Shutdown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_CreateBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_RemoveBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_LoadURL( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_SetSize( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_StopLoad( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_Reload( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_GoBack( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_GoForward( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_AddHeader( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_ExecuteJavascript( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_MouseUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_MouseDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_MouseDoubleClick( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_MouseMove( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_MouseWheel( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_KeyDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_KeyUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_KeyChar( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_SetHorizontalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_SetVerticalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_SetKeyFocus( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_ViewSource( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_CopyToClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_PasteFromClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_Find( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_StopFind( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_GetLinkAtPosition( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_AllowStartRequest( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_JSDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_001_FileLoadDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_Init( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_Shutdown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_CreateBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_RemoveBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_LoadURL( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_SetSize( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_StopLoad( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_Reload( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_GoBack( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_GoForward( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_AddHeader( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_ExecuteJavascript( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_MouseUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_MouseDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_MouseDoubleClick( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_MouseMove( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_MouseWheel( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_KeyDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_KeyUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_KeyChar( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_SetHorizontalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_SetVerticalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_SetKeyFocus( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_ViewSource( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_CopyToClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_PasteFromClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_Find( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_StopFind( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_GetLinkAtPosition( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_SetCookie( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_SetPageScaleFactor( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_AllowStartRequest( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_JSDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_002_FileLoadDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_Init( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_Shutdown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_CreateBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_RemoveBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_LoadURL( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_SetSize( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_StopLoad( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_Reload( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_GoBack( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_GoForward( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_AddHeader( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_ExecuteJavascript( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_MouseUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_MouseDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_MouseDoubleClick( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_MouseMove( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_MouseWheel( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_KeyDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_KeyUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_KeyChar( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_SetHorizontalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_SetVerticalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_SetKeyFocus( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_ViewSource( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_CopyToClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_PasteFromClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_Find( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_StopFind( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_GetLinkAtPosition( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_SetCookie( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_SetPageScaleFactor( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_SetBackgroundMode( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_AllowStartRequest( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_JSDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_003_FileLoadDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_Init( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_Shutdown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_CreateBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_RemoveBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_LoadURL( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetSize( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_StopLoad( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_Reload( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_GoBack( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_GoForward( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_AddHeader( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_ExecuteJavascript( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_MouseUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_MouseDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_MouseDoubleClick( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_MouseMove( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_MouseWheel( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_KeyDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_KeyUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_KeyChar( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetHorizontalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetVerticalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetKeyFocus( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_ViewSource( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_CopyToClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_PasteFromClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_Find( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_StopFind( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_GetLinkAtPosition( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetCookie( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetPageScaleFactor( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetBackgroundMode( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_SetDPIScalingFactor( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_AllowStartRequest( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_JSDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_004_FileLoadDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_Init( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_Shutdown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_CreateBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_RemoveBrowser( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_LoadURL( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetSize( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_StopLoad( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_Reload( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_GoBack( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_GoForward( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_AddHeader( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_ExecuteJavascript( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_MouseUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_MouseDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_MouseDoubleClick( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_MouseMove( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_MouseWheel( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_KeyDown( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_KeyUp( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_KeyChar( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetHorizontalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetVerticalScroll( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetKeyFocus( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_ViewSource( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_CopyToClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_PasteFromClipboard( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_Find( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_StopFind( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_GetLinkAtPosition( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetCookie( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetPageScaleFactor( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetBackgroundMode( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_SetDPIScalingFactor( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_OpenDeveloperTools( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_AllowStartRequest( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_JSDialogResponse( void * );
NTSTATUS ISteamHTMLSurface_STEAMHTMLSURFACE_INTERFACE_VERSION_005_FileLoadDialogResponse( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_CreateHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_SetHTTPRequestContextValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_SetHTTPRequestNetworkActivityTimeout( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_SetHTTPRequestHeaderValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_SetHTTPRequestGetOrPostParameter( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_SendHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_DeferHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_PrioritizeHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_GetHTTPResponseHeaderSize( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_GetHTTPResponseHeaderValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_GetHTTPResponseBodySize( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_GetHTTPResponseBodyData( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_ReleaseHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_GetHTTPDownloadProgressPct( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION001_SetHTTPRequestRawPostBody( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_CreateHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestContextValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestNetworkActivityTimeout( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestHeaderValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestGetOrPostParameter( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SendHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SendHTTPRequestAndStreamResponse( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_DeferHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_PrioritizeHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_GetHTTPResponseHeaderSize( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_GetHTTPResponseHeaderValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_GetHTTPResponseBodySize( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_GetHTTPResponseBodyData( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_GetHTTPStreamingResponseBodyData( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_ReleaseHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_GetHTTPDownloadProgressPct( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestRawPostBody( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_CreateCookieContainer( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_ReleaseCookieContainer( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetCookie( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestCookieContainer( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestUserAgentInfo( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestRequiresVerifiedCertificate( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_SetHTTPRequestAbsoluteTimeoutMS( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION002_GetHTTPRequestWasTimedOut( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_CreateHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestContextValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestNetworkActivityTimeout( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestHeaderValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestGetOrPostParameter( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SendHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SendHTTPRequestAndStreamResponse( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_DeferHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_PrioritizeHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_GetHTTPResponseHeaderSize( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_GetHTTPResponseHeaderValue( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_GetHTTPResponseBodySize( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_GetHTTPResponseBodyData( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_GetHTTPStreamingResponseBodyData( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_ReleaseHTTPRequest( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_GetHTTPDownloadProgressPct( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestRawPostBody( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_CreateCookieContainer( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_ReleaseCookieContainer( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetCookie( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestCookieContainer( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestUserAgentInfo( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestRequiresVerifiedCertificate( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_SetHTTPRequestAbsoluteTimeoutMS( void * );
NTSTATUS ISteamHTTP_STEAMHTTP_INTERFACE_VERSION003_GetHTTPRequestWasTimedOut( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetResultStatus( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetResultItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetResultTimestamp( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_CheckResultSteamID( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_DestroyResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetAllItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetItemsByID( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_SerializeResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_DeserializeResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GenerateItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GrantPromoItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_AddPromoItem( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_AddPromoItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_ConsumeItem( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_ExchangeItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_TransferItemQuantity( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_SendItemDropHeartbeat( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_TriggerItemDrop( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_TradeItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_LoadItemDefinitions( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetItemDefinitionIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetItemDefinitionProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_RequestEligiblePromoItemDefinitionsIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V001_GetEligiblePromoItemDefinitionIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetResultStatus( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetResultItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetResultItemProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetResultTimestamp( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_CheckResultSteamID( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_DestroyResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetAllItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetItemsByID( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_SerializeResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_DeserializeResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GenerateItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GrantPromoItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_AddPromoItem( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_AddPromoItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_ConsumeItem( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_ExchangeItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_TransferItemQuantity( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_SendItemDropHeartbeat( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_TriggerItemDrop( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_TradeItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_LoadItemDefinitions( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetItemDefinitionIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetItemDefinitionProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_RequestEligiblePromoItemDefinitionsIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetEligiblePromoItemDefinitionIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_StartPurchase( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_RequestPrices( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetNumItemsWithPrices( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetItemsWithPrices( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_GetItemPrice( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_StartUpdateProperties( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_RemoveProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_SetProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_SetProperty_2( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_SetProperty_3( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_SetProperty_4( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V002_SubmitUpdateProperties( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetResultStatus( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetResultItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetResultItemProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetResultTimestamp( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_CheckResultSteamID( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_DestroyResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetAllItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetItemsByID( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_SerializeResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_DeserializeResult( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GenerateItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GrantPromoItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_AddPromoItem( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_AddPromoItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_ConsumeItem( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_ExchangeItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_TransferItemQuantity( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_SendItemDropHeartbeat( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_TriggerItemDrop( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_TradeItems( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_LoadItemDefinitions( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetItemDefinitionIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetItemDefinitionProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_RequestEligiblePromoItemDefinitionsIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetEligiblePromoItemDefinitionIDs( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_StartPurchase( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_RequestPrices( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetNumItemsWithPrices( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetItemsWithPrices( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_GetItemPrice( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_StartUpdateProperties( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_RemoveProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_SetProperty( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_SetProperty_2( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_SetProperty_3( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_SetProperty_4( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_SubmitUpdateProperties( void * );
NTSTATUS ISteamInventory_STEAMINVENTORY_INTERFACE_V003_InspectItem( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_RegisterSteamMusicRemote( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_DeregisterSteamMusicRemote( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_BIsCurrentMusicRemote( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_BActivationSuccess( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_SetDisplayName( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_SetPNGIcon_64x64( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_EnablePlayPrevious( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_EnablePlayNext( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_EnableShuffled( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_EnableLooped( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_EnableQueue( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_EnablePlaylists( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_UpdatePlaybackStatus( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_UpdateShuffled( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_UpdateLooped( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_UpdateVolume( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_CurrentEntryWillChange( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_CurrentEntryIsAvailable( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_UpdateCurrentEntryText( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_UpdateCurrentEntryElapsedSeconds( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_UpdateCurrentEntryCoverArt( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_CurrentEntryDidChange( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_QueueWillChange( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_ResetQueueEntries( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_SetQueueEntry( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_SetCurrentQueueEntry( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_QueueDidChange( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_PlaylistWillChange( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_ResetPlaylistEntries( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_SetPlaylistEntry( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_SetCurrentPlaylistEntry( void * );
NTSTATUS ISteamMusicRemote_STEAMMUSICREMOTE_INTERFACE_VERSION001_PlaylistDidChange( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_BIsEnabled( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_BIsPlaying( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_GetPlaybackStatus( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_Play( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_Pause( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_PlayPrevious( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_PlayNext( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_SetVolume( void * );
NTSTATUS ISteamMusic_STEAMMUSIC_INTERFACE_VERSION001_GetVolume( void * );
NTSTATUS ISteamParentalSettings_STEAMPARENTALSETTINGS_INTERFACE_VERSION001_BIsParentalLockEnabled( void * );
NTSTATUS ISteamParentalSettings_STEAMPARENTALSETTINGS_INTERFACE_VERSION001_BIsParentalLockLocked( void * );
NTSTATUS ISteamParentalSettings_STEAMPARENTALSETTINGS_INTERFACE_VERSION001_BIsAppBlocked( void * );
NTSTATUS ISteamParentalSettings_STEAMPARENTALSETTINGS_INTERFACE_VERSION001_BIsAppInBlockList( void * );
NTSTATUS ISteamParentalSettings_STEAMPARENTALSETTINGS_INTERFACE_VERSION001_BIsFeatureBlocked( void * );
NTSTATUS ISteamParentalSettings_STEAMPARENTALSETTINGS_INTERFACE_VERSION001_BIsFeatureInBlockList( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001_GetSessionCount( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001_GetSessionID( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001_GetSessionSteamID( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001_GetSessionClientName( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001_GetSessionClientFormFactor( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001_BGetSessionClientResolution( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION001_BSendRemotePlayTogetherInvite( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_GetSessionCount( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_GetSessionID( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_GetSessionSteamID( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_GetSessionClientName( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_GetSessionClientFormFactor( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_BGetSessionClientResolution( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_BStartRemotePlayTogether( void * );
NTSTATUS ISteamRemotePlay_STEAMREMOTEPLAY_INTERFACE_VERSION002_BSendRemotePlayTogetherInvite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION001_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION002_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION003_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION004_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_PublishFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_UpdatePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION005_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION006_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION007_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION008_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION009_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION010_UGCDownloadToLocation( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION011_UGCDownloadToLocation( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION012_UGCDownloadToLocation( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileWriteAsync( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileReadAsync( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileReadAsyncComplete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION013_UGCDownloadToLocation( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileWriteAsync( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileReadAsync( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileReadAsyncComplete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION014_UGCDownloadToLocation( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileWrite( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileWriteAsync( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileReadAsync( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileReadAsyncComplete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileForget( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileDelete( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileShare( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_SetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileWriteStreamOpen( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileWriteStreamWriteChunk( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileWriteStreamClose( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileWriteStreamCancel( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FileExists( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_FilePersisted( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetFileSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetFileTimestamp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetSyncPlatforms( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetFileCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetFileNameAndSize( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetQuota( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_IsCloudEnabledForAccount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_IsCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_SetCloudEnabledForApp( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UGCDownload( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetUGCDownloadProgress( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetUGCDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UGCRead( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetCachedUGCCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetCachedUGCHandle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_PublishWorkshopFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_CreatePublishedFileUpdateRequest( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdatePublishedFileFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdatePublishedFilePreviewFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdatePublishedFileTitle( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdatePublishedFileDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdatePublishedFileVisibility( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdatePublishedFileTags( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_CommitPublishedFileUpdate( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetPublishedFileDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_DeletePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_EnumerateUserPublishedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_SubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_EnumerateUserSubscribedFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UnsubscribePublishedFile( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdatePublishedFileSetChangeDescription( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UpdateUserPublishedItemVote( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetUserPublishedItemVoteDetails( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_EnumerateUserSharedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_PublishVideo( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_SetUserPublishedFileAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_EnumeratePublishedFilesByUserAction( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_EnumeratePublishedWorkshopFiles( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_UGCDownloadToLocation( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetLocalFileChangeCount( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_GetLocalFileChange( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_BeginFileWriteBatch( void * );
NTSTATUS ISteamRemoteStorage_STEAMREMOTESTORAGE_INTERFACE_VERSION016_EndFileWriteBatch( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION001_WriteScreenshot( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION001_AddScreenshotToLibrary( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION001_TriggerScreenshot( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION001_HookScreenshots( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION001_SetLocation( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION001_TagUser( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002_WriteScreenshot( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002_AddScreenshotToLibrary( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002_TriggerScreenshot( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002_HookScreenshots( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002_SetLocation( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002_TagUser( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION002_TagPublishedFile( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_WriteScreenshot( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_AddScreenshotToLibrary( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_TriggerScreenshot( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_HookScreenshots( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_SetLocation( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_TagUser( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_TagPublishedFile( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_IsScreenshotsHooked( void * );
NTSTATUS ISteamScreenshots_STEAMSCREENSHOTS_INTERFACE_VERSION003_AddVRScreenshotToLibrary( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION001_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION002_GetItemUpdateInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION003_GetItemUpdateInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION004_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION005_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION006_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION007_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION008_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION009_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION010_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION012_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetQueryUGCKeyValueTag_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_RemoveAllItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION013_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetQueryUGCKeyValueTag_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddRequiredTagGroup( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_RemoveAllItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION014_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCNumTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCTagDisplayName( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetQueryUGCKeyValueTag_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddRequiredTagGroup( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_RemoveAllItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_ShowWorkshopEULA( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION015_GetWorkshopEULAStatus( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCNumTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCTagDisplayName( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetQueryUGCKeyValueTag_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddRequiredTagGroup( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetTimeCreatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetTimeUpdatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_RemoveAllItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_ShowWorkshopEULA( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION016_GetWorkshopEULAStatus( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCNumTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCTagDisplayName( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCKeyValueTag_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetQueryUGCContentDescriptors( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddRequiredTagGroup( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetTimeCreatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetTimeUpdatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RemoveAllItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddContentDescriptor( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RemoveContentDescriptor( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_ShowWorkshopEULA( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION017_GetWorkshopEULAStatus( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCNumTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCTagDisplayName( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCKeyValueTag_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetQueryUGCContentDescriptors( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddRequiredTagGroup( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetTimeCreatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetTimeUpdatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RemoveAllItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddContentDescriptor( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RemoveContentDescriptor( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_ShowWorkshopEULA( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetWorkshopEULAStatus( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION018_GetUserContentDescriptorPreferences( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_CreateQueryUserUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_CreateQueryAllUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_CreateQueryAllUGCRequest_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_CreateQueryUGCDetailsRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SendQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCResult( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCNumTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCTagDisplayName( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCPreviewURL( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCStatistic( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCNumAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCAdditionalPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCNumKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCKeyValueTag_2( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetNumSupportedGameVersions( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetSupportedGameVersionData( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetQueryUGCContentDescriptors( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_ReleaseQueryUGCRequest( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddRequiredTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddRequiredTagGroup( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddExcludedTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnOnlyIDs( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnLongDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnChildren( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnAdditionalPreviews( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnTotalOnly( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetReturnPlaytimeStats( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetAllowCachedResponse( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetAdminQuery( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetCloudFileNameFilter( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetMatchAnyTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetSearchText( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetRankedByTrendDays( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetTimeCreatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetTimeUpdatedDateRange( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddRequiredKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RequestUGCDetails( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_CreateItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_StartItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemTitle( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemDescription( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemUpdateLanguage( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemMetadata( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemVisibility( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemContent( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetAllowLegacyUpload( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RemoveAllItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RemoveItemKeyValueTags( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddItemKeyValueTag( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_UpdateItemPreviewFile( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_UpdateItemPreviewVideo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RemoveItemPreview( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddContentDescriptor( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RemoveContentDescriptor( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetRequiredGameVersions( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SubmitItemUpdate( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetItemUpdateProgress( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetUserItemVote( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddItemToFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RemoveItemFromFavorites( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_UnsubscribeItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetNumSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetSubscribedItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetItemState( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetItemInstallInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetItemDownloadInfo( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_DownloadItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_BInitWorkshopForGameServer( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_SuspendDownloads( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_StartPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_StopPlaytimeTracking( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_StopPlaytimeTrackingForAllItems( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RemoveDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_AddAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_RemoveAppDependency( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetAppDependencies( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_DeleteItem( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_ShowWorkshopEULA( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetWorkshopEULAStatus( void * );
NTSTATUS ISteamUGC_STEAMUGC_INTERFACE_VERSION020_GetUserContentDescriptorPreferences( void * );
NTSTATUS ISteamUnifiedMessages_STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001_SendMethod( void * );
NTSTATUS ISteamUnifiedMessages_STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001_GetMethodResponseInfo( void * );
NTSTATUS ISteamUnifiedMessages_STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001_GetMethodResponseData( void * );
NTSTATUS ISteamUnifiedMessages_STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001_ReleaseMethod( void * );
NTSTATUS ISteamUnifiedMessages_STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001_SendNotification( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetNumStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetStatName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetStatType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetNumAchievements( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetAchievementName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetNumGroupAchievements( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetGroupAchievementName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetGroupAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_SetGroupAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_ClearGroupAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION001_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetNumStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetStatName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetStatType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetNumAchievements( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetAchievementName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION002_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION003_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION004_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION005_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION006_GetNumberOfCurrentPlayers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetUserAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION007_GetNumberOfCurrentPlayers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetUserAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_AttachLeaderboardUGC( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION008_GetNumberOfCurrentPlayers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetUserAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_DownloadLeaderboardEntriesForUsers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_AttachLeaderboardUGC( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION009_GetNumberOfCurrentPlayers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetUserAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_DownloadLeaderboardEntriesForUsers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_AttachLeaderboardUGC( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetNumberOfCurrentPlayers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_RequestGlobalAchievementPercentages( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetMostAchievedAchievementInfo( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetNextMostAchievedAchievementInfo( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetAchievementAchievedPercent( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_RequestGlobalStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetGlobalStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetGlobalStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetGlobalStatHistory( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION010_GetGlobalStatHistory_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetNumAchievements( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetAchievementName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetUserAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_DownloadLeaderboardEntriesForUsers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_AttachLeaderboardUGC( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetNumberOfCurrentPlayers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_RequestGlobalAchievementPercentages( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetMostAchievedAchievementInfo( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetNextMostAchievedAchievementInfo( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetAchievementAchievedPercent( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_RequestGlobalStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetGlobalStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetGlobalStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetGlobalStatHistory( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION011_GetGlobalStatHistory_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_RequestCurrentStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_SetStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_SetStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_UpdateAvgRateStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_SetAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_ClearAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_StoreStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievementIcon( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievementDisplayAttribute( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_IndicateAchievementProgress( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetNumAchievements( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievementName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_RequestUserStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetUserStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetUserStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetUserAchievement( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetUserAchievementAndUnlockTime( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_ResetAllStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_FindOrCreateLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_FindLeaderboard( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetLeaderboardName( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetLeaderboardEntryCount( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetLeaderboardSortMethod( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetLeaderboardDisplayType( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_DownloadLeaderboardEntries( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_DownloadLeaderboardEntriesForUsers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetDownloadedLeaderboardEntry( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_UploadLeaderboardScore( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_AttachLeaderboardUGC( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetNumberOfCurrentPlayers( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_RequestGlobalAchievementPercentages( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetMostAchievedAchievementInfo( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetNextMostAchievedAchievementInfo( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievementAchievedPercent( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_RequestGlobalStats( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetGlobalStat( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetGlobalStat_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetGlobalStatHistory( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetGlobalStatHistory_2( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievementProgressLimits( void * );
NTSTATUS ISteamUserStats_STEAMUSERSTATS_INTERFACE_VERSION012_GetAchievementProgressLimits_2( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V001_GetVideoURL( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V001_IsBroadcasting( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V002_GetVideoURL( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V002_IsBroadcasting( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V002_GetOPFSettings( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V002_GetOPFStringForApp( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V007_GetVideoURL( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V007_IsBroadcasting( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V007_GetOPFSettings( void * );
NTSTATUS ISteamVideo_STEAMVIDEO_INTERFACE_V007_GetOPFStringForApp( void * );
NTSTATUS ISteamClient_SteamClient006_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient006_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient006_CreateGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient006_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient006_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient006_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient006_GetIVAC( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient006_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient006_GetUniverseName( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamBilling( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamContentServer( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamMasterServerUpdater( void * );
NTSTATUS ISteamClient_SteamClient006_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient006_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient006_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient007_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient007_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient007_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient007_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient007_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient007_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamContentServer( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamMasterServerUpdater( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient007_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient007_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient007_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient007_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient008_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient008_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient008_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient008_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient008_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient008_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamMasterServerUpdater( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient008_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient008_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient008_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient008_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient009_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient009_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient009_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient009_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient009_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient009_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamMasterServerUpdater( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient009_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient009_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient009_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient009_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient010_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient010_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient010_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient010_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient010_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient010_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamMasterServerUpdater( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient010_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient010_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient010_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient010_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient010_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient011_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient011_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient011_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient011_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient011_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient011_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamMasterServerUpdater( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient011_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient011_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient011_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient011_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient011_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient012_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient012_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient012_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient012_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient012_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient012_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient012_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient012_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient012_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient012_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient012_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient013_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient013_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient013_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient013_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient013_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient013_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient013_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient013_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient013_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient013_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamInventory( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamVideo( void * );
NTSTATUS ISteamClient_SteamClient013_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient014_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient014_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient014_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient014_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient014_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient014_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient014_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient014_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient014_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient014_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient014_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient015_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient015_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient015_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient015_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient015_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient015_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient015_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient015_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient015_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient015_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient015_GetISteamMusicRemote( void * );
NTSTATUS ISteamClient_SteamClient016_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient016_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient016_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient016_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient016_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient016_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient016_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient016_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient016_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient016_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamMusicRemote( void * );
NTSTATUS ISteamClient_SteamClient016_GetISteamHTMLSurface( void * );
NTSTATUS ISteamClient_SteamClient016_Set_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient016_Remove_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient016_Set_SteamAPI_CCheckCallbackRegisteredInProcess( void * );
NTSTATUS ISteamClient_SteamClient017_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient017_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient017_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient017_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient017_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient017_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient017_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient017_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient017_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient017_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient017_DEPRECATED_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamMusicRemote( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamHTMLSurface( void * );
NTSTATUS ISteamClient_SteamClient017_DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient017_DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient017_Set_SteamAPI_CCheckCallbackRegisteredInProcess( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamInventory( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamVideo( void * );
NTSTATUS ISteamClient_SteamClient017_GetISteamParentalSettings( void * );
NTSTATUS ISteamClient_SteamClient018_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient018_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient018_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient018_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient018_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient018_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamGameSearch( void * );
NTSTATUS ISteamClient_SteamClient018_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient018_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient018_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient018_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient018_DEPRECATED_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamMusicRemote( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamHTMLSurface( void * );
NTSTATUS ISteamClient_SteamClient018_DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient018_DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient018_Set_SteamAPI_CCheckCallbackRegisteredInProcess( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamInventory( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamVideo( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamParentalSettings( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamInput( void * );
NTSTATUS ISteamClient_SteamClient018_GetISteamParties( void * );
NTSTATUS ISteamClient_SteamClient019_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient019_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient019_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient019_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient019_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient019_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamGameSearch( void * );
NTSTATUS ISteamClient_SteamClient019_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient019_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient019_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient019_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient019_DEPRECATED_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamMusicRemote( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamHTMLSurface( void * );
NTSTATUS ISteamClient_SteamClient019_DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient019_DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient019_Set_SteamAPI_CCheckCallbackRegisteredInProcess( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamInventory( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamVideo( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamParentalSettings( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamInput( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamParties( void * );
NTSTATUS ISteamClient_SteamClient019_GetISteamRemotePlay( void * );
NTSTATUS ISteamClient_SteamClient020_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient020_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient020_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient020_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient020_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient020_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamGameSearch( void * );
NTSTATUS ISteamClient_SteamClient020_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient020_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient020_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient020_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient020_DEPRECATED_GetISteamUnifiedMessages( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamAppList( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamMusicRemote( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamHTMLSurface( void * );
NTSTATUS ISteamClient_SteamClient020_DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient020_DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient020_Set_SteamAPI_CCheckCallbackRegisteredInProcess( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamInventory( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamVideo( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamParentalSettings( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamInput( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamParties( void * );
NTSTATUS ISteamClient_SteamClient020_GetISteamRemotePlay( void * );
NTSTATUS ISteamClient_SteamClient020_DestroyAllInterfaces( void * );
NTSTATUS ISteamClient_SteamClient021_CreateSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient021_BReleaseSteamPipe( void * );
NTSTATUS ISteamClient_SteamClient021_ConnectToGlobalUser( void * );
NTSTATUS ISteamClient_SteamClient021_CreateLocalUser( void * );
NTSTATUS ISteamClient_SteamClient021_ReleaseUser( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamUser( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamGameServer( void * );
NTSTATUS ISteamClient_SteamClient021_SetLocalIPBinding( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamFriends( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamUtils( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamMatchmaking( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamMatchmakingServers( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamGenericInterface( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamUserStats( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamGameServerStats( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamApps( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamNetworking( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamRemoteStorage( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamScreenshots( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamGameSearch( void * );
NTSTATUS ISteamClient_SteamClient021_RunFrame( void * );
NTSTATUS ISteamClient_SteamClient021_GetIPCCallCount( void * );
NTSTATUS ISteamClient_SteamClient021_SetWarningMessageHook( void * );
NTSTATUS ISteamClient_SteamClient021_BShutdownIfAllPipesClosed( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamHTTP( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamController( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamUGC( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamMusic( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamMusicRemote( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamHTMLSurface( void * );
NTSTATUS ISteamClient_SteamClient021_DEPRECATED_Set_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient021_DEPRECATED_Remove_SteamAPI_CPostAPIResultInProcess( void * );
NTSTATUS ISteamClient_SteamClient021_Set_SteamAPI_CCheckCallbackRegisteredInProcess( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamInventory( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamVideo( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamParentalSettings( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamInput( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamParties( void * );
NTSTATUS ISteamClient_SteamClient021_GetISteamRemotePlay( void * );
NTSTATUS ISteamClient_SteamClient021_DestroyAllInterfaces( void * );
NTSTATUS ISteamController_SteamController003_Init( void * );
NTSTATUS ISteamController_SteamController003_Shutdown( void * );
NTSTATUS ISteamController_SteamController003_RunFrame( void * );
NTSTATUS ISteamController_SteamController003_GetConnectedControllers( void * );
NTSTATUS ISteamController_SteamController003_ShowBindingPanel( void * );
NTSTATUS ISteamController_SteamController003_GetActionSetHandle( void * );
NTSTATUS ISteamController_SteamController003_ActivateActionSet( void * );
NTSTATUS ISteamController_SteamController003_GetCurrentActionSet( void * );
NTSTATUS ISteamController_SteamController003_GetDigitalActionHandle( void * );
NTSTATUS ISteamController_SteamController003_GetDigitalActionData( void * );
NTSTATUS ISteamController_SteamController003_GetDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController003_GetAnalogActionHandle( void * );
NTSTATUS ISteamController_SteamController003_GetAnalogActionData( void * );
NTSTATUS ISteamController_SteamController003_GetAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController003_StopAnalogActionMomentum( void * );
NTSTATUS ISteamController_SteamController003_TriggerHapticPulse( void * );
NTSTATUS ISteamController_SteamController003_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamController_SteamController004_Init( void * );
NTSTATUS ISteamController_SteamController004_Shutdown( void * );
NTSTATUS ISteamController_SteamController004_RunFrame( void * );
NTSTATUS ISteamController_SteamController004_GetConnectedControllers( void * );
NTSTATUS ISteamController_SteamController004_ShowBindingPanel( void * );
NTSTATUS ISteamController_SteamController004_GetActionSetHandle( void * );
NTSTATUS ISteamController_SteamController004_ActivateActionSet( void * );
NTSTATUS ISteamController_SteamController004_GetCurrentActionSet( void * );
NTSTATUS ISteamController_SteamController004_GetDigitalActionHandle( void * );
NTSTATUS ISteamController_SteamController004_GetDigitalActionData( void * );
NTSTATUS ISteamController_SteamController004_GetDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController004_GetAnalogActionHandle( void * );
NTSTATUS ISteamController_SteamController004_GetAnalogActionData( void * );
NTSTATUS ISteamController_SteamController004_GetAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController004_StopAnalogActionMomentum( void * );
NTSTATUS ISteamController_SteamController004_TriggerHapticPulse( void * );
NTSTATUS ISteamController_SteamController004_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamController_SteamController004_GetGamepadIndexForController( void * );
NTSTATUS ISteamController_SteamController004_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamController_SteamController004_GetMotionData( void * );
NTSTATUS ISteamController_SteamController004_ShowDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController004_ShowAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController005_Init( void * );
NTSTATUS ISteamController_SteamController005_Shutdown( void * );
NTSTATUS ISteamController_SteamController005_RunFrame( void * );
NTSTATUS ISteamController_SteamController005_GetConnectedControllers( void * );
NTSTATUS ISteamController_SteamController005_ShowBindingPanel( void * );
NTSTATUS ISteamController_SteamController005_GetActionSetHandle( void * );
NTSTATUS ISteamController_SteamController005_ActivateActionSet( void * );
NTSTATUS ISteamController_SteamController005_GetCurrentActionSet( void * );
NTSTATUS ISteamController_SteamController005_GetDigitalActionHandle( void * );
NTSTATUS ISteamController_SteamController005_GetDigitalActionData( void * );
NTSTATUS ISteamController_SteamController005_GetDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController005_GetAnalogActionHandle( void * );
NTSTATUS ISteamController_SteamController005_GetAnalogActionData( void * );
NTSTATUS ISteamController_SteamController005_GetAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController005_StopAnalogActionMomentum( void * );
NTSTATUS ISteamController_SteamController005_TriggerHapticPulse( void * );
NTSTATUS ISteamController_SteamController005_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamController_SteamController005_TriggerVibration( void * );
NTSTATUS ISteamController_SteamController005_SetLEDColor( void * );
NTSTATUS ISteamController_SteamController005_GetGamepadIndexForController( void * );
NTSTATUS ISteamController_SteamController005_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamController_SteamController005_GetMotionData( void * );
NTSTATUS ISteamController_SteamController005_ShowDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController005_ShowAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController005_GetStringForActionOrigin( void * );
NTSTATUS ISteamController_SteamController005_GetGlyphForActionOrigin( void * );
NTSTATUS ISteamController_SteamController006_Init( void * );
NTSTATUS ISteamController_SteamController006_Shutdown( void * );
NTSTATUS ISteamController_SteamController006_RunFrame( void * );
NTSTATUS ISteamController_SteamController006_GetConnectedControllers( void * );
NTSTATUS ISteamController_SteamController006_ShowBindingPanel( void * );
NTSTATUS ISteamController_SteamController006_GetActionSetHandle( void * );
NTSTATUS ISteamController_SteamController006_ActivateActionSet( void * );
NTSTATUS ISteamController_SteamController006_GetCurrentActionSet( void * );
NTSTATUS ISteamController_SteamController006_ActivateActionSetLayer( void * );
NTSTATUS ISteamController_SteamController006_DeactivateActionSetLayer( void * );
NTSTATUS ISteamController_SteamController006_DeactivateAllActionSetLayers( void * );
NTSTATUS ISteamController_SteamController006_GetActiveActionSetLayers( void * );
NTSTATUS ISteamController_SteamController006_GetDigitalActionHandle( void * );
NTSTATUS ISteamController_SteamController006_GetDigitalActionData( void * );
NTSTATUS ISteamController_SteamController006_GetDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController006_GetAnalogActionHandle( void * );
NTSTATUS ISteamController_SteamController006_GetAnalogActionData( void * );
NTSTATUS ISteamController_SteamController006_GetAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController006_StopAnalogActionMomentum( void * );
NTSTATUS ISteamController_SteamController006_TriggerHapticPulse( void * );
NTSTATUS ISteamController_SteamController006_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamController_SteamController006_TriggerVibration( void * );
NTSTATUS ISteamController_SteamController006_SetLEDColor( void * );
NTSTATUS ISteamController_SteamController006_GetGamepadIndexForController( void * );
NTSTATUS ISteamController_SteamController006_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamController_SteamController006_GetMotionData( void * );
NTSTATUS ISteamController_SteamController006_ShowDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController006_ShowAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController006_GetStringForActionOrigin( void * );
NTSTATUS ISteamController_SteamController006_GetGlyphForActionOrigin( void * );
NTSTATUS ISteamController_SteamController006_GetInputTypeForHandle( void * );
NTSTATUS ISteamController_SteamController007_Init( void * );
NTSTATUS ISteamController_SteamController007_Shutdown( void * );
NTSTATUS ISteamController_SteamController007_RunFrame( void * );
NTSTATUS ISteamController_SteamController007_GetConnectedControllers( void * );
NTSTATUS ISteamController_SteamController007_GetActionSetHandle( void * );
NTSTATUS ISteamController_SteamController007_ActivateActionSet( void * );
NTSTATUS ISteamController_SteamController007_GetCurrentActionSet( void * );
NTSTATUS ISteamController_SteamController007_ActivateActionSetLayer( void * );
NTSTATUS ISteamController_SteamController007_DeactivateActionSetLayer( void * );
NTSTATUS ISteamController_SteamController007_DeactivateAllActionSetLayers( void * );
NTSTATUS ISteamController_SteamController007_GetActiveActionSetLayers( void * );
NTSTATUS ISteamController_SteamController007_GetDigitalActionHandle( void * );
NTSTATUS ISteamController_SteamController007_GetDigitalActionData( void * );
NTSTATUS ISteamController_SteamController007_GetDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController007_GetAnalogActionHandle( void * );
NTSTATUS ISteamController_SteamController007_GetAnalogActionData( void * );
NTSTATUS ISteamController_SteamController007_GetAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController007_GetGlyphForActionOrigin( void * );
NTSTATUS ISteamController_SteamController007_GetStringForActionOrigin( void * );
NTSTATUS ISteamController_SteamController007_StopAnalogActionMomentum( void * );
NTSTATUS ISteamController_SteamController007_GetMotionData( void * );
NTSTATUS ISteamController_SteamController007_TriggerHapticPulse( void * );
NTSTATUS ISteamController_SteamController007_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamController_SteamController007_TriggerVibration( void * );
NTSTATUS ISteamController_SteamController007_SetLEDColor( void * );
NTSTATUS ISteamController_SteamController007_ShowBindingPanel( void * );
NTSTATUS ISteamController_SteamController007_GetInputTypeForHandle( void * );
NTSTATUS ISteamController_SteamController007_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamController_SteamController007_GetGamepadIndexForController( void * );
NTSTATUS ISteamController_SteamController007_GetStringForXboxOrigin( void * );
NTSTATUS ISteamController_SteamController007_GetGlyphForXboxOrigin( void * );
NTSTATUS ISteamController_SteamController007_GetActionOriginFromXboxOrigin( void * );
NTSTATUS ISteamController_SteamController007_TranslateActionOrigin( void * );
NTSTATUS ISteamController_SteamController007_GetControllerBindingRevision( void * );
NTSTATUS ISteamController_SteamController008_Init( void * );
NTSTATUS ISteamController_SteamController008_Shutdown( void * );
NTSTATUS ISteamController_SteamController008_RunFrame( void * );
NTSTATUS ISteamController_SteamController008_GetConnectedControllers( void * );
NTSTATUS ISteamController_SteamController008_GetActionSetHandle( void * );
NTSTATUS ISteamController_SteamController008_ActivateActionSet( void * );
NTSTATUS ISteamController_SteamController008_GetCurrentActionSet( void * );
NTSTATUS ISteamController_SteamController008_ActivateActionSetLayer( void * );
NTSTATUS ISteamController_SteamController008_DeactivateActionSetLayer( void * );
NTSTATUS ISteamController_SteamController008_DeactivateAllActionSetLayers( void * );
NTSTATUS ISteamController_SteamController008_GetActiveActionSetLayers( void * );
NTSTATUS ISteamController_SteamController008_GetDigitalActionHandle( void * );
NTSTATUS ISteamController_SteamController008_GetDigitalActionData( void * );
NTSTATUS ISteamController_SteamController008_GetDigitalActionOrigins( void * );
NTSTATUS ISteamController_SteamController008_GetAnalogActionHandle( void * );
NTSTATUS ISteamController_SteamController008_GetAnalogActionData( void * );
NTSTATUS ISteamController_SteamController008_GetAnalogActionOrigins( void * );
NTSTATUS ISteamController_SteamController008_GetGlyphForActionOrigin( void * );
NTSTATUS ISteamController_SteamController008_GetStringForActionOrigin( void * );
NTSTATUS ISteamController_SteamController008_StopAnalogActionMomentum( void * );
NTSTATUS ISteamController_SteamController008_GetMotionData( void * );
NTSTATUS ISteamController_SteamController008_TriggerHapticPulse( void * );
NTSTATUS ISteamController_SteamController008_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamController_SteamController008_TriggerVibration( void * );
NTSTATUS ISteamController_SteamController008_SetLEDColor( void * );
NTSTATUS ISteamController_SteamController008_ShowBindingPanel( void * );
NTSTATUS ISteamController_SteamController008_GetInputTypeForHandle( void * );
NTSTATUS ISteamController_SteamController008_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamController_SteamController008_GetGamepadIndexForController( void * );
NTSTATUS ISteamController_SteamController008_GetStringForXboxOrigin( void * );
NTSTATUS ISteamController_SteamController008_GetGlyphForXboxOrigin( void * );
NTSTATUS ISteamController_SteamController008_GetActionOriginFromXboxOrigin( void * );
NTSTATUS ISteamController_SteamController008_TranslateActionOrigin( void * );
NTSTATUS ISteamController_SteamController008_GetControllerBindingRevision( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends001_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends001_SetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends001_AddFriend( void * );
NTSTATUS ISteamFriends_SteamFriends001_RemoveFriend( void * );
NTSTATUS ISteamFriends_SteamFriends001_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends001_Deprecated_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends001_AddFriendByName( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends001_SendMsgToFriend( void * );
NTSTATUS ISteamFriends_SteamFriends001_SetFriendRegValue( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendRegValue( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends001_SendMsgToFriend_2( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetChatIDOfChatHistoryStart( void * );
NTSTATUS ISteamFriends_SteamFriends001_SetChatHistoryStart( void * );
NTSTATUS ISteamFriends_SteamFriends001_ClearChatHistory( void * );
NTSTATUS ISteamFriends_SteamFriends001_InviteFriendByEmail( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetBlockedFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends001_GetFriendGamePlayed2( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends002_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends002_SetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends002_SetFriendRegValue( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendRegValue( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends002_AddFriend( void * );
NTSTATUS ISteamFriends_SteamFriends002_RemoveFriend( void * );
NTSTATUS ISteamFriends_SteamFriends002_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends002_AddFriendByName( void * );
NTSTATUS ISteamFriends_SteamFriends002_InviteFriendByEmail( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends002_SendMsgToFriend( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetChatIDOfChatHistoryStart( void * );
NTSTATUS ISteamFriends_SteamFriends002_SetChatHistoryStart( void * );
NTSTATUS ISteamFriends_SteamFriends002_ClearChatHistory( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends002_InviteFriendToClan( void * );
NTSTATUS ISteamFriends_SteamFriends002_AcknowledgeInviteToClan( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends002_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends003_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends003_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends003_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends003_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends003_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends003_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends004_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends004_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends004_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends004_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends004_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends004_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends005_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends005_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends005_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends005_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends005_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends005_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends005_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends005_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends005_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends005_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends006_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends006_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends006_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends006_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends006_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends006_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends006_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends006_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends006_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends006_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends006_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends007_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends007_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends007_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends007_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends007_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends007_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends007_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends007_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends007_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends007_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends007_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends008_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends008_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends008_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends008_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends008_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends008_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends008_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends008_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends008_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends008_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends008_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends008_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends008_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends009_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends009_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends009_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends009_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends009_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends009_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends009_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends009_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends009_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends009_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends009_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends009_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends009_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends009_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends009_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends009_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends010_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends010_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends010_DownloadClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends010_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends010_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends010_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends010_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends010_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends010_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends010_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends010_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends010_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends010_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends010_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends010_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends010_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends010_JoinClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends010_LeaveClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanChatMemberCount( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetChatMemberByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends010_SendClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends010_IsClanChatAdmin( void * );
NTSTATUS ISteamFriends_SteamFriends010_IsClanChatWindowOpenInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends010_OpenClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends010_CloseClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends010_SetListenForFriendsMessages( void * );
NTSTATUS ISteamFriends_SteamFriends010_ReplyToFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends010_GetFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends011_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends011_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends011_DownloadClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends011_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends011_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends011_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends011_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends011_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends011_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends011_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends011_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends011_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends011_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends011_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends011_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends011_RequestFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends011_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends011_JoinClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends011_LeaveClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanChatMemberCount( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetChatMemberByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends011_SendClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends011_IsClanChatAdmin( void * );
NTSTATUS ISteamFriends_SteamFriends011_IsClanChatWindowOpenInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends011_OpenClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends011_CloseClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends011_SetListenForFriendsMessages( void * );
NTSTATUS ISteamFriends_SteamFriends011_ReplyToFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends011_GetFollowerCount( void * );
NTSTATUS ISteamFriends_SteamFriends011_IsFollowing( void * );
NTSTATUS ISteamFriends_SteamFriends011_EnumerateFollowingList( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends012_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends012_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends012_DownloadClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends012_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends012_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends012_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends012_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends012_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends012_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends012_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends012_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends012_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends012_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends012_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends012_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends012_RequestFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends012_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends012_JoinClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends012_LeaveClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanChatMemberCount( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetChatMemberByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends012_SendClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends012_IsClanChatAdmin( void * );
NTSTATUS ISteamFriends_SteamFriends012_IsClanChatWindowOpenInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends012_OpenClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends012_CloseClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends012_SetListenForFriendsMessages( void * );
NTSTATUS ISteamFriends_SteamFriends012_ReplyToFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends012_GetFollowerCount( void * );
NTSTATUS ISteamFriends_SteamFriends012_IsFollowing( void * );
NTSTATUS ISteamFriends_SteamFriends012_EnumerateFollowingList( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends013_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends013_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends013_DownloadClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends013_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends013_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends013_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends013_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends013_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends013_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends013_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends013_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends013_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends013_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends013_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends013_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends013_RequestFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends013_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends013_JoinClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends013_LeaveClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanChatMemberCount( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetChatMemberByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends013_SendClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends013_IsClanChatAdmin( void * );
NTSTATUS ISteamFriends_SteamFriends013_IsClanChatWindowOpenInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends013_OpenClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends013_CloseClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends013_SetListenForFriendsMessages( void * );
NTSTATUS ISteamFriends_SteamFriends013_ReplyToFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends013_GetFollowerCount( void * );
NTSTATUS ISteamFriends_SteamFriends013_IsFollowing( void * );
NTSTATUS ISteamFriends_SteamFriends013_EnumerateFollowingList( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends014_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetPlayerNickname( void * );
NTSTATUS ISteamFriends_SteamFriends014_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends014_DownloadClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends014_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends014_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends014_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends014_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends014_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends014_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends014_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends014_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends014_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends014_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends014_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends014_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends014_RequestFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends014_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends014_JoinClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends014_LeaveClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanChatMemberCount( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetChatMemberByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends014_SendClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends014_IsClanChatAdmin( void * );
NTSTATUS ISteamFriends_SteamFriends014_IsClanChatWindowOpenInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends014_OpenClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends014_CloseClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends014_SetListenForFriendsMessages( void * );
NTSTATUS ISteamFriends_SteamFriends014_ReplyToFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends014_GetFollowerCount( void * );
NTSTATUS ISteamFriends_SteamFriends014_IsFollowing( void * );
NTSTATUS ISteamFriends_SteamFriends014_EnumerateFollowingList( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends015_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendSteamLevel( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetPlayerNickname( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendsGroupCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendsGroupIDByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendsGroupName( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendsGroupMembersCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendsGroupMembersList( void * );
NTSTATUS ISteamFriends_SteamFriends015_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends015_DownloadClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends015_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends015_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends015_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends015_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends015_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends015_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends015_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends015_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends015_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends015_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends015_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends015_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends015_RequestFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends015_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends015_JoinClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends015_LeaveClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanChatMemberCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetChatMemberByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends015_SendClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends015_IsClanChatAdmin( void * );
NTSTATUS ISteamFriends_SteamFriends015_IsClanChatWindowOpenInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends015_OpenClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends015_CloseClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends015_SetListenForFriendsMessages( void * );
NTSTATUS ISteamFriends_SteamFriends015_ReplyToFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends015_GetFollowerCount( void * );
NTSTATUS ISteamFriends_SteamFriends015_IsFollowing( void * );
NTSTATUS ISteamFriends_SteamFriends015_EnumerateFollowingList( void * );
NTSTATUS ISteamFriends_SteamFriends015_IsClanPublic( void * );
NTSTATUS ISteamFriends_SteamFriends015_IsClanOfficialGameGroup( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends017_SetPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendRelationship( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendPersonaState( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendPersonaName( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendGamePlayed( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendPersonaNameHistory( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendSteamLevel( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetPlayerNickname( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendsGroupCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendsGroupIDByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendsGroupName( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendsGroupMembersCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendsGroupMembersList( void * );
NTSTATUS ISteamFriends_SteamFriends017_HasFriend( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanName( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanTag( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends017_DownloadClanActivityCounts( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendCountFromSource( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendFromSourceByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends017_IsUserInSource( void * );
NTSTATUS ISteamFriends_SteamFriends017_SetInGameVoiceSpeaking( void * );
NTSTATUS ISteamFriends_SteamFriends017_ActivateGameOverlay( void * );
NTSTATUS ISteamFriends_SteamFriends017_ActivateGameOverlayToUser( void * );
NTSTATUS ISteamFriends_SteamFriends017_ActivateGameOverlayToWebPage( void * );
NTSTATUS ISteamFriends_SteamFriends017_ActivateGameOverlayToStore( void * );
NTSTATUS ISteamFriends_SteamFriends017_SetPlayedWith( void * );
NTSTATUS ISteamFriends_SteamFriends017_ActivateGameOverlayInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetSmallFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetMediumFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetLargeFriendAvatar( void * );
NTSTATUS ISteamFriends_SteamFriends017_RequestUserInformation( void * );
NTSTATUS ISteamFriends_SteamFriends017_RequestClanOfficerList( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanOwner( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanOfficerCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanOfficerByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetUserRestrictions( void * );
NTSTATUS ISteamFriends_SteamFriends017_SetRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends017_ClearRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendRichPresenceKeyCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendRichPresenceKeyByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends017_RequestFriendRichPresence( void * );
NTSTATUS ISteamFriends_SteamFriends017_InviteUserToGame( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetCoplayFriendCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetCoplayFriend( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendCoplayTime( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendCoplayGame( void * );
NTSTATUS ISteamFriends_SteamFriends017_JoinClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends017_LeaveClanChatRoom( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanChatMemberCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetChatMemberByIndex( void * );
NTSTATUS ISteamFriends_SteamFriends017_SendClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetClanChatMessage( void * );
NTSTATUS ISteamFriends_SteamFriends017_IsClanChatAdmin( void * );
NTSTATUS ISteamFriends_SteamFriends017_IsClanChatWindowOpenInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends017_OpenClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends017_CloseClanChatWindowInSteam( void * );
NTSTATUS ISteamFriends_SteamFriends017_SetListenForFriendsMessages( void * );
NTSTATUS ISteamFriends_SteamFriends017_ReplyToFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFriendMessage( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetFollowerCount( void * );
NTSTATUS ISteamFriends_SteamFriends017_IsFollowing( void * );
NTSTATUS ISteamFriends_SteamFriends017_EnumerateFollowingList( void * );
NTSTATUS ISteamFriends_SteamFriends017_IsClanPublic( void * );
NTSTATUS ISteamFriends_SteamFriends017_IsClanOfficialGameGroup( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetNumChatsWithUnreadPriorityMessages( void * );
NTSTATUS ISteamFriends_SteamFriends017_ActivateGameOverlayRemotePlayTogetherInviteDialog( void * );
NTSTATUS ISteamFriends_SteamFriends017_RegisterProtocolInOverlayBrowser( void * );
NTSTATUS ISteamFriends_SteamFriends017_ActivateGameOverlayInviteDialogConnectString( void * );
NTSTATUS ISteamFriends_SteamFriends017_RequestEquippedProfileItems( void * );
NTSTATUS ISteamFriends_SteamFriends017_BHasEquippedProfileItem( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetProfileItemPropertyString( void * );
NTSTATUS ISteamFriends_SteamFriends017_GetProfileItemPropertyUint( void * );
NTSTATUS ISteamGameCoordinator_SteamGameCoordinator001_SendMessage( void * );
NTSTATUS ISteamGameCoordinator_SteamGameCoordinator001_IsMessageAvailable( void * );
NTSTATUS ISteamGameCoordinator_SteamGameCoordinator001_RetrieveMessage( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSetSpawnCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSGetSteam2GetEncryptionKeyToSendToNewClient( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSendSteam2UserConnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSendSteam3UserConnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSRemoveUserConnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSendUserStatusResponse( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_Obsolete_GSSetStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSUpdateStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSetServerType( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSetServerType2( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSUpdateStatus2( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSCreateUnauthenticatedUser( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSetUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSUpdateSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer002_GSSetGameType( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSGetSteam2GetEncryptionKeyToSendToNewClient( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSSendUserConnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSRemoveUserConnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSSendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSSetSpawnCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSSetServerType( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSUpdateStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSCreateUnauthenticatedUser( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSSetUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSUpdateSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSSetGameType( void * );
NTSTATUS ISteamGameServer_SteamGameServer003_GSGetUserAchievementStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_BSetServerType( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_UpdateServerStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_UpdateSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_SetGameType( void * );
NTSTATUS ISteamGameServer_SteamGameServer004_BGetUserAchievementStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_BSetServerType( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_UpdateServerStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_UpdateSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_SetGameType( void * );
NTSTATUS ISteamGameServer_SteamGameServer005_BGetUserAchievementStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_BSetServerType( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_UpdateServerStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_UpdateSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_SetGameType( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_BGetUserAchievementStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer008_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_BSetServerType( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_UpdateServerStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_UpdateSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_SetGameType( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_BGetUserAchievementStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_SetGameData( void * );
NTSTATUS ISteamGameServer_SteamGameServer009_UserHasLicenseForApp( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_BSetServerType( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_UpdateServerStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_UpdateSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_SetGameTags( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_GetServerReputation( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_SetGameData( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_UserHasLicenseForApp( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_GetAuthSessionTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_BeginAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_EndAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer010_CancelAuthTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_InitGameServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetProduct( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetGameDescription( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetModDir( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetDedicatedServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_LogOnAnonymous( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_WasRestartRequested( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetMaxPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetBotPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetMapName( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetPasswordProtected( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetSpectatorServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_ClearAllKeyValues( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetKeyValue( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetGameTags( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetGameData( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetRegion( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_GetAuthSessionTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_BeginAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_EndAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_CancelAuthTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_UserHasLicenseForApp( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_GetServerReputation( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_HandleIncomingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_GetNextOutgoingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_EnableHeartbeats( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_SetHeartbeatInterval( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_ForceHeartbeat( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_AssociateWithClan( void * );
NTSTATUS ISteamGameServer_SteamGameServer011_ComputeNewPlayerCompatibility( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_InitGameServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetProduct( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetGameDescription( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetModDir( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetDedicatedServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_LogOnAnonymous( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_WasRestartRequested( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetMaxPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetBotPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetMapName( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetPasswordProtected( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetSpectatorServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_ClearAllKeyValues( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetKeyValue( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetGameTags( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetGameData( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetRegion( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_GetAuthSessionTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_BeginAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_EndAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_CancelAuthTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_UserHasLicenseForApp( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_GetServerReputation( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_HandleIncomingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_GetNextOutgoingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_EnableHeartbeats( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_SetHeartbeatInterval( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_ForceHeartbeat( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_AssociateWithClan( void * );
NTSTATUS ISteamGameServer_SteamGameServer012_ComputeNewPlayerCompatibility( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_InitGameServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetProduct( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetGameDescription( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetModDir( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetDedicatedServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_LogOnAnonymous( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_WasRestartRequested( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetMaxPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetBotPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetMapName( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetPasswordProtected( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetSpectatorServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_ClearAllKeyValues( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetKeyValue( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetGameTags( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetGameData( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetRegion( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SendUserConnectAndAuthenticate( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SendUserDisconnect( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_GetAuthSessionTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_BeginAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_EndAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_CancelAuthTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_UserHasLicenseForApp( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_GetServerReputation( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_HandleIncomingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_GetNextOutgoingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_EnableHeartbeats( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_SetHeartbeatInterval( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_ForceHeartbeat( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_AssociateWithClan( void * );
NTSTATUS ISteamGameServer_SteamGameServer013_ComputeNewPlayerCompatibility( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_InitGameServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetProduct( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetGameDescription( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetModDir( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetDedicatedServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_LogOnAnonymous( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_WasRestartRequested( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetMaxPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetBotPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetMapName( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetPasswordProtected( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetSpectatorServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_ClearAllKeyValues( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetKeyValue( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetGameTags( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetGameData( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetRegion( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetAdvertiseServerActive( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_GetAuthSessionTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_BeginAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_EndAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_CancelAuthTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_UserHasLicenseForApp( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_GetServerReputation( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_HandleIncomingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_GetNextOutgoingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_AssociateWithClan( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_ComputeNewPlayerCompatibility( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SendUserConnectAndAuthenticate_DEPRECATED( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SendUserDisconnect_DEPRECATED( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_SetMasterServerHeartbeatInterval_DEPRECATED( void * );
NTSTATUS ISteamGameServer_SteamGameServer014_ForceMasterServerHeartbeat_DEPRECATED( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_InitGameServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetProduct( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetGameDescription( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetModDir( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetDedicatedServer( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_LogOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_LogOnAnonymous( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_LogOff( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_BLoggedOn( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_BSecure( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_GetSteamID( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_WasRestartRequested( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetMaxPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetBotPlayerCount( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetMapName( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetPasswordProtected( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetSpectatorPort( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetSpectatorServerName( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_ClearAllKeyValues( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetKeyValue( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetGameTags( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetGameData( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetRegion( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetAdvertiseServerActive( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_GetAuthSessionTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_BeginAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_EndAuthSession( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_CancelAuthTicket( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_UserHasLicenseForApp( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_RequestUserGroupStatus( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_GetGameplayStats( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_GetServerReputation( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_GetPublicIP( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_HandleIncomingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_GetNextOutgoingPacket( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_AssociateWithClan( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_ComputeNewPlayerCompatibility( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SendUserConnectAndAuthenticate_DEPRECATED( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_CreateUnauthenticatedUserConnection( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SendUserDisconnect_DEPRECATED( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_BUpdateUserData( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_SetMasterServerHeartbeatInterval_DEPRECATED( void * );
NTSTATUS ISteamGameServer_SteamGameServer015_ForceMasterServerHeartbeat_DEPRECATED( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_RequestUserStats( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_GetUserStat( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_GetUserStat_2( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_GetUserAchievement( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_SetUserStat( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_SetUserStat_2( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_UpdateUserAvgRateStat( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_SetUserAchievement( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_ClearUserAchievement( void * );
NTSTATUS ISteamGameServerStats_SteamGameServerStats001_StoreUserStats( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_GetNewSession( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_EndSession( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddSessionAttributeInt( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddSessionAttributeString( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddSessionAttributeFloat( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddNewRow( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_CommitRow( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_CommitOutstandingRows( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddRowAttributeInt( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddRowAtributeString( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddRowAttributeFloat( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddSessionAttributeInt64( void * );
NTSTATUS ISteamGameStats_SteamGameStats001_AddRowAttributeInt64( void * );
NTSTATUS ISteamInput_SteamInput001_Init( void * );
NTSTATUS ISteamInput_SteamInput001_Shutdown( void * );
NTSTATUS ISteamInput_SteamInput001_RunFrame( void * );
NTSTATUS ISteamInput_SteamInput001_GetConnectedControllers( void * );
NTSTATUS ISteamInput_SteamInput001_GetActionSetHandle( void * );
NTSTATUS ISteamInput_SteamInput001_ActivateActionSet( void * );
NTSTATUS ISteamInput_SteamInput001_GetCurrentActionSet( void * );
NTSTATUS ISteamInput_SteamInput001_ActivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput001_DeactivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput001_DeactivateAllActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput001_GetActiveActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput001_GetDigitalActionHandle( void * );
NTSTATUS ISteamInput_SteamInput001_GetDigitalActionData( void * );
NTSTATUS ISteamInput_SteamInput001_GetDigitalActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput001_GetAnalogActionHandle( void * );
NTSTATUS ISteamInput_SteamInput001_GetAnalogActionData( void * );
NTSTATUS ISteamInput_SteamInput001_GetAnalogActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput001_GetGlyphForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput001_GetStringForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput001_StopAnalogActionMomentum( void * );
NTSTATUS ISteamInput_SteamInput001_GetMotionData( void * );
NTSTATUS ISteamInput_SteamInput001_TriggerVibration( void * );
NTSTATUS ISteamInput_SteamInput001_SetLEDColor( void * );
NTSTATUS ISteamInput_SteamInput001_TriggerHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput001_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput001_ShowBindingPanel( void * );
NTSTATUS ISteamInput_SteamInput001_GetInputTypeForHandle( void * );
NTSTATUS ISteamInput_SteamInput001_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamInput_SteamInput001_GetGamepadIndexForController( void * );
NTSTATUS ISteamInput_SteamInput001_GetStringForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput001_GetGlyphForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput001_GetActionOriginFromXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput001_TranslateActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput001_GetDeviceBindingRevision( void * );
NTSTATUS ISteamInput_SteamInput001_GetRemotePlaySessionID( void * );
NTSTATUS ISteamInput_SteamInput002_Init( void * );
NTSTATUS ISteamInput_SteamInput002_Shutdown( void * );
NTSTATUS ISteamInput_SteamInput002_RunFrame( void * );
NTSTATUS ISteamInput_SteamInput002_GetConnectedControllers( void * );
NTSTATUS ISteamInput_SteamInput002_GetActionSetHandle( void * );
NTSTATUS ISteamInput_SteamInput002_ActivateActionSet( void * );
NTSTATUS ISteamInput_SteamInput002_GetCurrentActionSet( void * );
NTSTATUS ISteamInput_SteamInput002_ActivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput002_DeactivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput002_DeactivateAllActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput002_GetActiveActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput002_GetDigitalActionHandle( void * );
NTSTATUS ISteamInput_SteamInput002_GetDigitalActionData( void * );
NTSTATUS ISteamInput_SteamInput002_GetDigitalActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput002_GetAnalogActionHandle( void * );
NTSTATUS ISteamInput_SteamInput002_GetAnalogActionData( void * );
NTSTATUS ISteamInput_SteamInput002_GetAnalogActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput002_GetGlyphForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput002_GetStringForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput002_StopAnalogActionMomentum( void * );
NTSTATUS ISteamInput_SteamInput002_GetMotionData( void * );
NTSTATUS ISteamInput_SteamInput002_TriggerVibration( void * );
NTSTATUS ISteamInput_SteamInput002_SetLEDColor( void * );
NTSTATUS ISteamInput_SteamInput002_TriggerHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput002_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput002_ShowBindingPanel( void * );
NTSTATUS ISteamInput_SteamInput002_GetInputTypeForHandle( void * );
NTSTATUS ISteamInput_SteamInput002_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamInput_SteamInput002_GetGamepadIndexForController( void * );
NTSTATUS ISteamInput_SteamInput002_GetStringForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput002_GetGlyphForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput002_GetActionOriginFromXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput002_TranslateActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput002_GetDeviceBindingRevision( void * );
NTSTATUS ISteamInput_SteamInput002_GetRemotePlaySessionID( void * );
NTSTATUS ISteamInput_SteamInput005_Init( void * );
NTSTATUS ISteamInput_SteamInput005_Shutdown( void * );
NTSTATUS ISteamInput_SteamInput005_SetInputActionManifestFilePath( void * );
NTSTATUS ISteamInput_SteamInput005_RunFrame( void * );
NTSTATUS ISteamInput_SteamInput005_BWaitForData( void * );
NTSTATUS ISteamInput_SteamInput005_BNewDataAvailable( void * );
NTSTATUS ISteamInput_SteamInput005_GetConnectedControllers( void * );
NTSTATUS ISteamInput_SteamInput005_EnableDeviceCallbacks( void * );
NTSTATUS ISteamInput_SteamInput005_EnableActionEventCallbacks( void * );
NTSTATUS ISteamInput_SteamInput005_GetActionSetHandle( void * );
NTSTATUS ISteamInput_SteamInput005_ActivateActionSet( void * );
NTSTATUS ISteamInput_SteamInput005_GetCurrentActionSet( void * );
NTSTATUS ISteamInput_SteamInput005_ActivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput005_DeactivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput005_DeactivateAllActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput005_GetActiveActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput005_GetDigitalActionHandle( void * );
NTSTATUS ISteamInput_SteamInput005_GetDigitalActionData( void * );
NTSTATUS ISteamInput_SteamInput005_GetDigitalActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput005_GetStringForDigitalActionName( void * );
NTSTATUS ISteamInput_SteamInput005_GetAnalogActionHandle( void * );
NTSTATUS ISteamInput_SteamInput005_GetAnalogActionData( void * );
NTSTATUS ISteamInput_SteamInput005_GetAnalogActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput005_GetGlyphPNGForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput005_GetGlyphSVGForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput005_GetGlyphForActionOrigin_Legacy( void * );
NTSTATUS ISteamInput_SteamInput005_GetStringForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput005_GetStringForAnalogActionName( void * );
NTSTATUS ISteamInput_SteamInput005_StopAnalogActionMomentum( void * );
NTSTATUS ISteamInput_SteamInput005_GetMotionData( void * );
NTSTATUS ISteamInput_SteamInput005_TriggerVibration( void * );
NTSTATUS ISteamInput_SteamInput005_TriggerVibrationExtended( void * );
NTSTATUS ISteamInput_SteamInput005_TriggerSimpleHapticEvent( void * );
NTSTATUS ISteamInput_SteamInput005_SetLEDColor( void * );
NTSTATUS ISteamInput_SteamInput005_Legacy_TriggerHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput005_Legacy_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput005_ShowBindingPanel( void * );
NTSTATUS ISteamInput_SteamInput005_GetInputTypeForHandle( void * );
NTSTATUS ISteamInput_SteamInput005_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamInput_SteamInput005_GetGamepadIndexForController( void * );
NTSTATUS ISteamInput_SteamInput005_GetStringForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput005_GetGlyphForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput005_GetActionOriginFromXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput005_TranslateActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput005_GetDeviceBindingRevision( void * );
NTSTATUS ISteamInput_SteamInput005_GetRemotePlaySessionID( void * );
NTSTATUS ISteamInput_SteamInput005_GetSessionInputConfigurationSettings( void * );
NTSTATUS ISteamInput_SteamInput006_Init( void * );
NTSTATUS ISteamInput_SteamInput006_Shutdown( void * );
NTSTATUS ISteamInput_SteamInput006_SetInputActionManifestFilePath( void * );
NTSTATUS ISteamInput_SteamInput006_RunFrame( void * );
NTSTATUS ISteamInput_SteamInput006_BWaitForData( void * );
NTSTATUS ISteamInput_SteamInput006_BNewDataAvailable( void * );
NTSTATUS ISteamInput_SteamInput006_GetConnectedControllers( void * );
NTSTATUS ISteamInput_SteamInput006_EnableDeviceCallbacks( void * );
NTSTATUS ISteamInput_SteamInput006_EnableActionEventCallbacks( void * );
NTSTATUS ISteamInput_SteamInput006_GetActionSetHandle( void * );
NTSTATUS ISteamInput_SteamInput006_ActivateActionSet( void * );
NTSTATUS ISteamInput_SteamInput006_GetCurrentActionSet( void * );
NTSTATUS ISteamInput_SteamInput006_ActivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput006_DeactivateActionSetLayer( void * );
NTSTATUS ISteamInput_SteamInput006_DeactivateAllActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput006_GetActiveActionSetLayers( void * );
NTSTATUS ISteamInput_SteamInput006_GetDigitalActionHandle( void * );
NTSTATUS ISteamInput_SteamInput006_GetDigitalActionData( void * );
NTSTATUS ISteamInput_SteamInput006_GetDigitalActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput006_GetStringForDigitalActionName( void * );
NTSTATUS ISteamInput_SteamInput006_GetAnalogActionHandle( void * );
NTSTATUS ISteamInput_SteamInput006_GetAnalogActionData( void * );
NTSTATUS ISteamInput_SteamInput006_GetAnalogActionOrigins( void * );
NTSTATUS ISteamInput_SteamInput006_GetGlyphPNGForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput006_GetGlyphSVGForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput006_GetGlyphForActionOrigin_Legacy( void * );
NTSTATUS ISteamInput_SteamInput006_GetStringForActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput006_GetStringForAnalogActionName( void * );
NTSTATUS ISteamInput_SteamInput006_StopAnalogActionMomentum( void * );
NTSTATUS ISteamInput_SteamInput006_GetMotionData( void * );
NTSTATUS ISteamInput_SteamInput006_TriggerVibration( void * );
NTSTATUS ISteamInput_SteamInput006_TriggerVibrationExtended( void * );
NTSTATUS ISteamInput_SteamInput006_TriggerSimpleHapticEvent( void * );
NTSTATUS ISteamInput_SteamInput006_SetLEDColor( void * );
NTSTATUS ISteamInput_SteamInput006_Legacy_TriggerHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput006_Legacy_TriggerRepeatedHapticPulse( void * );
NTSTATUS ISteamInput_SteamInput006_ShowBindingPanel( void * );
NTSTATUS ISteamInput_SteamInput006_GetInputTypeForHandle( void * );
NTSTATUS ISteamInput_SteamInput006_GetControllerForGamepadIndex( void * );
NTSTATUS ISteamInput_SteamInput006_GetGamepadIndexForController( void * );
NTSTATUS ISteamInput_SteamInput006_GetStringForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput006_GetGlyphForXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput006_GetActionOriginFromXboxOrigin( void * );
NTSTATUS ISteamInput_SteamInput006_TranslateActionOrigin( void * );
NTSTATUS ISteamInput_SteamInput006_GetDeviceBindingRevision( void * );
NTSTATUS ISteamInput_SteamInput006_GetRemotePlaySessionID( void * );
NTSTATUS ISteamInput_SteamInput006_GetSessionInputConfigurationSettings( void * );
NTSTATUS ISteamInput_SteamInput006_SetDualSenseTriggerEffect( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_SetActive( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_SetHeartbeatInterval( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_HandleIncomingPacket( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_GetNextOutgoingPacket( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_SetBasicServerData( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_ClearAllKeyValues( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_SetKeyValue( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_NotifyShutdown( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_WasRestartRequested( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_ForceHeartbeat( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_AddMasterServer( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_RemoveMasterServer( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_GetNumMasterServers( void * );
NTSTATUS ISteamMasterServerUpdater_SteamMasterServerUpdater001_GetMasterServerAddress( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_AddGameSearchParams( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_SearchForGameWithLobby( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_SearchForGameSolo( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_AcceptGame( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_DeclineGame( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_RetrieveConnectionDetails( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_EndGameSearch( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_SetGameHostParams( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_SetConnectionDetails( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_RequestPlayersForGame( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_HostConfirmGameStart( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_CancelRequestPlayersForGame( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_SubmitPlayerResult( void * );
NTSTATUS ISteamGameSearch_SteamMatchGameSearch001_EndGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetFavoriteGame2( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_AddFavoriteGame2( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_RemoveFavoriteGame2( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking001_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking002_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_AddRequestLobbyListFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_AddRequestLobbyListNumericalFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_AddRequestLobbyListSlotsAvailableFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_SetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_GetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_SetLobbyVoiceEnabled( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking003_RequestFriendsLobbies( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_AddRequestLobbyListFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_AddRequestLobbyListNumericalFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_AddRequestLobbyListSlotsAvailableFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_SetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_GetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking004_RequestFriendsLobbies( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_AddRequestLobbyListFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_AddRequestLobbyListNumericalFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_AddRequestLobbyListSlotsAvailableFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_AddRequestLobbyListNearValueFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_SetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_RequestFriendsLobbies( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_SetLobbyType( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking005_GetLobbyDistance( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_AddRequestLobbyListFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_AddRequestLobbyListNumericalFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_AddRequestLobbyListNearValueFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_SetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_SetLobbyType( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking006_GetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_AddRequestLobbyListStringFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_AddRequestLobbyListNumericalFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_AddRequestLobbyListNearValueFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_AddRequestLobbyListFilterSlotsAvailable( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyDataCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyDataByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_DeleteLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SetLobbyType( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SetLobbyJoinable( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_GetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking007_SetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_AddRequestLobbyListStringFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_AddRequestLobbyListNumericalFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_AddRequestLobbyListNearValueFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_AddRequestLobbyListFilterSlotsAvailable( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_AddRequestLobbyListDistanceFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_AddRequestLobbyListResultCountFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyDataCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyDataByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_DeleteLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SetLobbyType( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SetLobbyJoinable( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_GetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking008_SetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetFavoriteGameCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_RemoveFavoriteGame( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_RequestLobbyList( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddRequestLobbyListStringFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddRequestLobbyListNumericalFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddRequestLobbyListNearValueFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddRequestLobbyListFilterSlotsAvailable( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddRequestLobbyListDistanceFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddRequestLobbyListResultCountFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_AddRequestLobbyListCompatibleMembersFilter( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_CreateLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_JoinLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_LeaveLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_InviteUserToLobby( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetNumLobbyMembers( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyMemberByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyDataCount( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyDataByIndex( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_DeleteLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLobbyMemberData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SendLobbyChatMsg( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyChatEntry( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_RequestLobbyData( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyGameServer( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyMemberLimit( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLobbyType( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLobbyJoinable( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_GetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLobbyOwner( void * );
NTSTATUS ISteamMatchmaking_SteamMatchMaking009_SetLinkedLobby( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RequestInternetServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RequestLANServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RequestFriendsServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RequestFavoritesServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RequestHistoryServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RequestSpectatorServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_GetServerDetails( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_CancelQuery( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RefreshQuery( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_IsRefreshing( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_GetServerCount( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_RefreshServer( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_PingServer( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_PlayerDetails( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_ServerRules( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers001_CancelServerQuery( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RequestInternetServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RequestLANServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RequestFriendsServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RequestFavoritesServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RequestHistoryServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RequestSpectatorServerList( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_ReleaseRequest( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_GetServerDetails( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_CancelQuery( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RefreshQuery( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_IsRefreshing( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_GetServerCount( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_RefreshServer( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_PingServer( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_PlayerDetails( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_ServerRules( void * );
NTSTATUS ISteamMatchmakingServers_SteamMatchMakingServers002_CancelServerQuery( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_CreateListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_CreateP2PConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_CreateConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_DestroySocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_DestroyListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_SendDataOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_IsDataAvailableOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_RetrieveDataFromSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_IsDataAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_RetrieveData( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_GetSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking001_GetListenSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_CreateListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_CreateP2PConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_CreateConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_DestroySocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_DestroyListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_SendDataOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_IsDataAvailableOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_RetrieveDataFromSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_IsDataAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_RetrieveData( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_GetSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_GetListenSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_GetSocketConnectionType( void * );
NTSTATUS ISteamNetworking_SteamNetworking002_GetMaxPacketSize( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_SendP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_IsP2PPacketAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_ReadP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_AcceptP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_CloseP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_GetP2PSessionState( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_CreateListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_CreateP2PConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_CreateConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_DestroySocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_DestroyListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_SendDataOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_IsDataAvailableOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_RetrieveDataFromSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_IsDataAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_RetrieveData( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_GetSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_GetListenSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_GetSocketConnectionType( void * );
NTSTATUS ISteamNetworking_SteamNetworking003_GetMaxPacketSize( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_SendP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_IsP2PPacketAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_ReadP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_AcceptP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_CloseP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_GetP2PSessionState( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_CreateListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_CreateP2PConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_CreateConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_DestroySocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_DestroyListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_SendDataOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_IsDataAvailableOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_RetrieveDataFromSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_IsDataAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_RetrieveData( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_GetSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_GetListenSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_GetSocketConnectionType( void * );
NTSTATUS ISteamNetworking_SteamNetworking004_GetMaxPacketSize( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_SendP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_IsP2PPacketAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_ReadP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_AcceptP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_CloseP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_CloseP2PChannelWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_GetP2PSessionState( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_AllowP2PPacketRelay( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_CreateListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_CreateP2PConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_CreateConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_DestroySocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_DestroyListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_SendDataOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_IsDataAvailableOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_RetrieveDataFromSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_IsDataAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_RetrieveData( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_GetSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_GetListenSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_GetSocketConnectionType( void * );
NTSTATUS ISteamNetworking_SteamNetworking005_GetMaxPacketSize( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_SendP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_IsP2PPacketAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_ReadP2PPacket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_AcceptP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_CloseP2PSessionWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_CloseP2PChannelWithUser( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_GetP2PSessionState( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_AllowP2PPacketRelay( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_CreateListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_CreateP2PConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_CreateConnectionSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_DestroySocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_DestroyListenSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_SendDataOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_IsDataAvailableOnSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_RetrieveDataFromSocket( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_IsDataAvailable( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_RetrieveData( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_GetSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_GetListenSocketInfo( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_GetSocketConnectionType( void * );
NTSTATUS ISteamNetworking_SteamNetworking006_GetMaxPacketSize( void * );
NTSTATUS ISteamNetworkingFakeUDPPort_SteamNetworkingFakeUDPPort001_DestroyFakeUDPPort( void * );
NTSTATUS ISteamNetworkingFakeUDPPort_SteamNetworkingFakeUDPPort001_SendMessageToFakeIP( void * );
NTSTATUS ISteamNetworkingFakeUDPPort_SteamNetworkingFakeUDPPort001_ReceiveMessages( void * );
NTSTATUS ISteamNetworkingFakeUDPPort_SteamNetworkingFakeUDPPort001_ScheduleCleanup( void * );
NTSTATUS ISteamNetworkingMessages_SteamNetworkingMessages002_SendMessageToUser( void * );
NTSTATUS ISteamNetworkingMessages_SteamNetworkingMessages002_ReceiveMessagesOnChannel( void * );
NTSTATUS ISteamNetworkingMessages_SteamNetworkingMessages002_AcceptSessionWithUser( void * );
NTSTATUS ISteamNetworkingMessages_SteamNetworkingMessages002_CloseSessionWithUser( void * );
NTSTATUS ISteamNetworkingMessages_SteamNetworkingMessages002_CloseChannelWithUser( void * );
NTSTATUS ISteamNetworkingMessages_SteamNetworkingMessages002_GetSessionConnectionInfo( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_CreateListenSocketIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_ConnectByIPAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_CreateListenSocketP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_ConnectP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_AcceptConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_CloseConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_CloseListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_SetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_SetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_SendMessageToConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_FlushMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_ReceiveMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_ReceiveMessagesOnListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetConnectionInfo( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetQuickConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetDetailedConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetListenSocketAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_CreateSocketPair( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetIdentity( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_ReceivedRelayAuthTicket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_FindRelayAuthTicketForServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_ConnectToHostedDedicatedServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetHostedDedicatedServerPort( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetHostedDedicatedServerPOPID( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_GetHostedDedicatedServerAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets002_CreateHostedDedicatedServerListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_CreateListenSocketIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_ConnectByIPAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_CreateListenSocketP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_ConnectP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_AcceptConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_CloseConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_CloseListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_SetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_SetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_SendMessageToConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_FlushMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_ReceiveMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_ReceiveMessagesOnListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetConnectionInfo( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetQuickConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetDetailedConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetListenSocketAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_CreateSocketPair( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetIdentity( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_InitAuthentication( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetAuthenticationStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_ReceivedRelayAuthTicket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_FindRelayAuthTicketForServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_ConnectToHostedDedicatedServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetHostedDedicatedServerPort( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetHostedDedicatedServerPOPID( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetHostedDedicatedServerAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_CreateHostedDedicatedServerListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets004_GetGameCoordinatorServerLogin( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_CreateListenSocketIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ConnectByIPAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_CreateListenSocketP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ConnectP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_AcceptConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_CloseConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_CloseListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_SetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_SetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_SendMessageToConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_SendMessages( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_FlushMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ReceiveMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ReceiveMessagesOnListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetConnectionInfo( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetQuickConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetDetailedConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetListenSocketAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_CreateSocketPair( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetIdentity( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_InitAuthentication( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetAuthenticationStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ReceivedRelayAuthTicket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_FindRelayAuthTicketForServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ConnectToHostedDedicatedServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetHostedDedicatedServerPort( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetHostedDedicatedServerPOPID( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetHostedDedicatedServerAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_CreateHostedDedicatedServerListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_GetGameCoordinatorServerLogin( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ConnectP2PCustomSignaling( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets006_ReceivedP2PCustomSignal( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_CreateListenSocketIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ConnectByIPAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_CreateListenSocketP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ConnectP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_AcceptConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_CloseConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_CloseListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_SetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_SetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_SendMessageToConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_SendMessages( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_FlushMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ReceiveMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetConnectionInfo( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetQuickConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetDetailedConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetListenSocketAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_CreateSocketPair( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetIdentity( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_InitAuthentication( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetAuthenticationStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_CreatePollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_DestroyPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_SetConnectionPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ReceiveMessagesOnPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ReceivedRelayAuthTicket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_FindRelayAuthTicketForServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ConnectToHostedDedicatedServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetHostedDedicatedServerPort( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetHostedDedicatedServerPOPID( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetHostedDedicatedServerAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_CreateHostedDedicatedServerListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetGameCoordinatorServerLogin( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ConnectP2PCustomSignaling( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_ReceivedP2PCustomSignal( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_GetCertificateRequest( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets008_SetCertificate( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_CreateListenSocketIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ConnectByIPAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_CreateListenSocketP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ConnectP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_AcceptConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_CloseConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_CloseListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_SetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_SetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_SendMessageToConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_SendMessages( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_FlushMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ReceiveMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetConnectionInfo( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetQuickConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetDetailedConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetListenSocketAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_CreateSocketPair( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetIdentity( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_InitAuthentication( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetAuthenticationStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_CreatePollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_DestroyPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_SetConnectionPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ReceiveMessagesOnPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ReceivedRelayAuthTicket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_FindRelayAuthTicketForServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ConnectToHostedDedicatedServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetHostedDedicatedServerPort( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetHostedDedicatedServerPOPID( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetHostedDedicatedServerAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_CreateHostedDedicatedServerListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetGameCoordinatorServerLogin( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ConnectP2PCustomSignaling( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_ReceivedP2PCustomSignal( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_GetCertificateRequest( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_SetCertificate( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets009_RunCallbacks( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CreateListenSocketIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ConnectByIPAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CreateListenSocketP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ConnectP2P( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_AcceptConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CloseConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CloseListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_SetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetConnectionUserData( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_SetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetConnectionName( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_SendMessageToConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_SendMessages( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_FlushMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ReceiveMessagesOnConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetConnectionInfo( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetConnectionRealTimeStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetDetailedConnectionStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetListenSocketAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CreateSocketPair( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ConfigureConnectionLanes( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetIdentity( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_InitAuthentication( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetAuthenticationStatus( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CreatePollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_DestroyPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_SetConnectionPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ReceiveMessagesOnPollGroup( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ReceivedRelayAuthTicket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_FindRelayAuthTicketForServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ConnectToHostedDedicatedServer( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetHostedDedicatedServerPort( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetHostedDedicatedServerPOPID( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetHostedDedicatedServerAddress( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CreateHostedDedicatedServerListenSocket( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetGameCoordinatorServerLogin( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ConnectP2PCustomSignaling( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ReceivedP2PCustomSignal( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetCertificateRequest( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_SetCertificate( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_ResetIdentity( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_RunCallbacks( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_BeginAsyncRequestFakeIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetFakeIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CreateListenSocketP2PFakeIP( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_GetRemoteFakeIPForConnection( void * );
NTSTATUS ISteamNetworkingSockets_SteamNetworkingSockets012_CreateFakeUDPPort( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_SendP2PRendezvous( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_SendP2PConnectionFailure( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_GetCertAsync( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_GetNetworkConfigJSON( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_CacheRelayTicket( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_GetCachedRelayTicketCount( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_GetCachedRelayTicket( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized002_PostConnectionStateMsg( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_SendP2PRendezvous( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_SendP2PConnectionFailure( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_GetCertAsync( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_GetNetworkConfigJSON( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_CacheRelayTicket( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_GetCachedRelayTicketCount( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_GetCachedRelayTicket( void * );
NTSTATUS ISteamNetworkingSocketsSerialized_SteamNetworkingSocketsSerialized003_PostConnectionStateMsg( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetLocalPingLocation( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_EstimatePingTimeBetweenTwoLocations( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_EstimatePingTimeFromLocalHost( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_ConvertPingLocationToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_ParsePingLocationString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_CheckPingDataUpToDate( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_IsPingMeasurementInProgress( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetPingToDataCenter( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetDirectPingToPOP( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetPOPCount( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetPOPList( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetLocalTimestamp( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_SetDebugOutputFunction( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_SetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetConfigValueInfo( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_GetFirstConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_SteamNetworkingIPAddr_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_SteamNetworkingIPAddr_ParseString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_SteamNetworkingIdentity_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils001_SteamNetworkingIdentity_ParseString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetRelayNetworkStatus( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetLocalPingLocation( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_EstimatePingTimeBetweenTwoLocations( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_EstimatePingTimeFromLocalHost( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_ConvertPingLocationToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_ParsePingLocationString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_CheckPingDataUpToDate( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetPingToDataCenter( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetDirectPingToPOP( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetPOPCount( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetPOPList( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetLocalTimestamp( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_SetDebugOutputFunction( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_SetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetConfigValueInfo( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_GetFirstConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_SteamNetworkingIPAddr_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_SteamNetworkingIPAddr_ParseString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_SteamNetworkingIdentity_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils002_SteamNetworkingIdentity_ParseString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_AllocateMessage( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetRelayNetworkStatus( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetLocalPingLocation( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_EstimatePingTimeBetweenTwoLocations( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_EstimatePingTimeFromLocalHost( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_ConvertPingLocationToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_ParsePingLocationString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_CheckPingDataUpToDate( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetPingToDataCenter( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetDirectPingToPOP( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetPOPCount( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetPOPList( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetLocalTimestamp( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_SetDebugOutputFunction( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_SetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetConfigValueInfo( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_GetFirstConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_SteamNetworkingIPAddr_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_SteamNetworkingIPAddr_ParseString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_SteamNetworkingIdentity_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils003_SteamNetworkingIdentity_ParseString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_AllocateMessage( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetRelayNetworkStatus( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetLocalPingLocation( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_EstimatePingTimeBetweenTwoLocations( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_EstimatePingTimeFromLocalHost( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_ConvertPingLocationToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_ParsePingLocationString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_CheckPingDataUpToDate( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetPingToDataCenter( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetDirectPingToPOP( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetPOPCount( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetPOPList( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetLocalTimestamp( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_SetDebugOutputFunction( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetIPv4FakeIPType( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetRealIdentityForFakeIP( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_SetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetConfigValue( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_GetConfigValueInfo( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_IterateGenericEditableConfigValues( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_SteamNetworkingIPAddr_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_SteamNetworkingIPAddr_ParseString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_SteamNetworkingIPAddr_GetFakeIPType( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_SteamNetworkingIdentity_ToString( void * );
NTSTATUS ISteamNetworkingUtils_SteamNetworkingUtils004_SteamNetworkingIdentity_ParseString( void * );
NTSTATUS ISteamParties_SteamParties002_GetNumActiveBeacons( void * );
NTSTATUS ISteamParties_SteamParties002_GetBeaconByIndex( void * );
NTSTATUS ISteamParties_SteamParties002_GetBeaconDetails( void * );
NTSTATUS ISteamParties_SteamParties002_JoinParty( void * );
NTSTATUS ISteamParties_SteamParties002_GetNumAvailableBeaconLocations( void * );
NTSTATUS ISteamParties_SteamParties002_GetAvailableBeaconLocations( void * );
NTSTATUS ISteamParties_SteamParties002_CreateBeacon( void * );
NTSTATUS ISteamParties_SteamParties002_OnReservationCompleted( void * );
NTSTATUS ISteamParties_SteamParties002_CancelReservation( void * );
NTSTATUS ISteamParties_SteamParties002_ChangeNumOpenSlots( void * );
NTSTATUS ISteamParties_SteamParties002_DestroyBeacon( void * );
NTSTATUS ISteamParties_SteamParties002_GetBeaconLocationData( void * );
NTSTATUS ISteamUser_SteamUser004_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser004_LogOn( void * );
NTSTATUS ISteamUser_SteamUser004_LogOff( void * );
NTSTATUS ISteamUser_SteamUser004_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser004_GetLogonState( void * );
NTSTATUS ISteamUser_SteamUser004_BConnected( void * );
NTSTATUS ISteamUser_SteamUser004_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser004_IsVACBanned( void * );
NTSTATUS ISteamUser_SteamUser004_RequireShowVACBannedMessage( void * );
NTSTATUS ISteamUser_SteamUser004_AcknowledgeVACBanning( void * );
NTSTATUS ISteamUser_SteamUser004_NClientGameIDAdd( void * );
NTSTATUS ISteamUser_SteamUser004_RemoveClientGame( void * );
NTSTATUS ISteamUser_SteamUser004_SetClientGameServer( void * );
NTSTATUS ISteamUser_SteamUser004_SetSteam2Ticket( void * );
NTSTATUS ISteamUser_SteamUser004_AddServerNetAddress( void * );
NTSTATUS ISteamUser_SteamUser004_SetEmail( void * );
NTSTATUS ISteamUser_SteamUser004_GetSteamGameConnectToken( void * );
NTSTATUS ISteamUser_SteamUser004_SetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser004_GetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser004_SetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser004_GetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser004_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser004_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser004_SetSelfAsPrimaryChatDestination( void * );
NTSTATUS ISteamUser_SteamUser004_IsPrimaryChatDestination( void * );
NTSTATUS ISteamUser_SteamUser004_RequestLegacyCDKey( void * );
NTSTATUS ISteamUser_SteamUser005_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser005_LogOn( void * );
NTSTATUS ISteamUser_SteamUser005_LogOff( void * );
NTSTATUS ISteamUser_SteamUser005_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser005_GetLogonState( void * );
NTSTATUS ISteamUser_SteamUser005_BConnected( void * );
NTSTATUS ISteamUser_SteamUser005_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser005_IsVACBanned( void * );
NTSTATUS ISteamUser_SteamUser005_RequireShowVACBannedMessage( void * );
NTSTATUS ISteamUser_SteamUser005_AcknowledgeVACBanning( void * );
NTSTATUS ISteamUser_SteamUser005_SetSteam2Ticket( void * );
NTSTATUS ISteamUser_SteamUser005_AddServerNetAddress( void * );
NTSTATUS ISteamUser_SteamUser005_SetEmail( void * );
NTSTATUS ISteamUser_SteamUser005_SetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser005_GetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser005_SetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser005_GetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser005_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser005_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser005_SetSelfAsPrimaryChatDestination( void * );
NTSTATUS ISteamUser_SteamUser005_IsPrimaryChatDestination( void * );
NTSTATUS ISteamUser_SteamUser005_RequestLegacyCDKey( void * );
NTSTATUS ISteamUser_SteamUser005_SendGuestPassByEmail( void * );
NTSTATUS ISteamUser_SteamUser005_SendGuestPassByAccountID( void * );
NTSTATUS ISteamUser_SteamUser005_AckGuestPass( void * );
NTSTATUS ISteamUser_SteamUser005_RedeemGuestPass( void * );
NTSTATUS ISteamUser_SteamUser005_GetGuestPassToGiveCount( void * );
NTSTATUS ISteamUser_SteamUser005_GetGuestPassToRedeemCount( void * );
NTSTATUS ISteamUser_SteamUser005_GetGuestPassLastUpdateTime( void * );
NTSTATUS ISteamUser_SteamUser005_GetGuestPassToGiveInfo( void * );
NTSTATUS ISteamUser_SteamUser005_GetGuestPassToRedeemInfo( void * );
NTSTATUS ISteamUser_SteamUser005_GetGuestPassToRedeemSenderAddress( void * );
NTSTATUS ISteamUser_SteamUser005_GetGuestPassToRedeemSenderName( void * );
NTSTATUS ISteamUser_SteamUser005_AcknowledgeMessageByGID( void * );
NTSTATUS ISteamUser_SteamUser005_SetLanguage( void * );
NTSTATUS ISteamUser_SteamUser005_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser005_SetAccountName( void * );
NTSTATUS ISteamUser_SteamUser005_SetPassword( void * );
NTSTATUS ISteamUser_SteamUser005_SetAccountCreationTime( void * );
NTSTATUS ISteamUser_SteamUser006_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser006_LogOn( void * );
NTSTATUS ISteamUser_SteamUser006_LogOff( void * );
NTSTATUS ISteamUser_SteamUser006_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser006_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser006_SetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser006_GetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser006_SetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser006_GetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser006_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser006_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser006_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser007_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser007_LogOn( void * );
NTSTATUS ISteamUser_SteamUser007_LogOff( void * );
NTSTATUS ISteamUser_SteamUser007_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser007_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser007_SetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser007_GetRegistryString( void * );
NTSTATUS ISteamUser_SteamUser007_SetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser007_GetRegistryInt( void * );
NTSTATUS ISteamUser_SteamUser007_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser007_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser007_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser007_RefreshSteam2Login( void * );
NTSTATUS ISteamUser_SteamUser008_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser008_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser008_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser008_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser008_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser008_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser008_RefreshSteam2Login( void * );
NTSTATUS ISteamUser_SteamUser009_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser009_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser009_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser009_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser009_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser009_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser009_RefreshSteam2Login( void * );
NTSTATUS ISteamUser_SteamUser010_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser010_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser010_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser010_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser010_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser010_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser011_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser011_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser011_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser011_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser011_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser011_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser011_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser011_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser011_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser011_GetCompressedVoice( void * );
NTSTATUS ISteamUser_SteamUser011_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser012_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser012_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser012_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser012_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser012_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser012_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser012_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser012_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser012_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser012_GetCompressedVoice( void * );
NTSTATUS ISteamUser_SteamUser012_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser012_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser012_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser012_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser012_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser012_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser013_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser013_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser013_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser013_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser013_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser013_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser013_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser013_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser013_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser013_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser013_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser013_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser013_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser013_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser013_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser013_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser013_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser014_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser014_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser014_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser014_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser014_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser014_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser014_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser014_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser014_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser014_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser014_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser014_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser014_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser014_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser014_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser014_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser014_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser014_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser014_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser014_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser014_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser015_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser015_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser015_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser015_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser015_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser015_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser015_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser015_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser015_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser015_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser015_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser015_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser015_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser015_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser015_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser015_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser015_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser015_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser015_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser015_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser015_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser015_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser016_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser016_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser016_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser016_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser016_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser016_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser016_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser016_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser016_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser016_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser016_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser016_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser016_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser016_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser016_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser016_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser016_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser016_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser016_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser016_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser016_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser016_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser017_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser017_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser017_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser017_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser017_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser017_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser017_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser017_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser017_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser017_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser017_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser017_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser017_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser017_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser017_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser017_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser017_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser017_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser017_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser017_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser017_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser017_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser017_GetGameBadgeLevel( void * );
NTSTATUS ISteamUser_SteamUser017_GetPlayerSteamLevel( void * );
NTSTATUS ISteamUser_SteamUser018_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser018_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser018_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser018_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser018_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser018_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser018_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser018_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser018_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser018_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser018_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser018_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser018_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser018_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser018_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser018_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser018_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser018_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser018_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser018_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser018_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser018_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser018_GetGameBadgeLevel( void * );
NTSTATUS ISteamUser_SteamUser018_GetPlayerSteamLevel( void * );
NTSTATUS ISteamUser_SteamUser018_RequestStoreAuthURL( void * );
NTSTATUS ISteamUser_SteamUser019_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser019_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser019_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser019_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser019_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser019_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser019_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser019_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser019_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser019_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser019_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser019_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser019_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser019_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser019_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser019_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser019_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser019_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser019_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser019_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser019_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser019_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser019_GetGameBadgeLevel( void * );
NTSTATUS ISteamUser_SteamUser019_GetPlayerSteamLevel( void * );
NTSTATUS ISteamUser_SteamUser019_RequestStoreAuthURL( void * );
NTSTATUS ISteamUser_SteamUser019_BIsPhoneVerified( void * );
NTSTATUS ISteamUser_SteamUser019_BIsTwoFactorEnabled( void * );
NTSTATUS ISteamUser_SteamUser019_BIsPhoneIdentifying( void * );
NTSTATUS ISteamUser_SteamUser019_BIsPhoneRequiringVerification( void * );
NTSTATUS ISteamUser_SteamUser020_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser020_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser020_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser020_InitiateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser020_TerminateGameConnection( void * );
NTSTATUS ISteamUser_SteamUser020_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser020_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser020_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser020_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser020_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser020_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser020_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser020_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser020_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser020_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser020_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser020_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser020_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser020_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser020_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser020_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser020_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser020_GetGameBadgeLevel( void * );
NTSTATUS ISteamUser_SteamUser020_GetPlayerSteamLevel( void * );
NTSTATUS ISteamUser_SteamUser020_RequestStoreAuthURL( void * );
NTSTATUS ISteamUser_SteamUser020_BIsPhoneVerified( void * );
NTSTATUS ISteamUser_SteamUser020_BIsTwoFactorEnabled( void * );
NTSTATUS ISteamUser_SteamUser020_BIsPhoneIdentifying( void * );
NTSTATUS ISteamUser_SteamUser020_BIsPhoneRequiringVerification( void * );
NTSTATUS ISteamUser_SteamUser020_GetMarketEligibility( void * );
NTSTATUS ISteamUser_SteamUser020_GetDurationControl( void * );
NTSTATUS ISteamUser_SteamUser021_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser021_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser021_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser021_InitiateGameConnection_DEPRECATED( void * );
NTSTATUS ISteamUser_SteamUser021_TerminateGameConnection_DEPRECATED( void * );
NTSTATUS ISteamUser_SteamUser021_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser021_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser021_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser021_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser021_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser021_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser021_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser021_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser021_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser021_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser021_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser021_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser021_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser021_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser021_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser021_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser021_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser021_GetGameBadgeLevel( void * );
NTSTATUS ISteamUser_SteamUser021_GetPlayerSteamLevel( void * );
NTSTATUS ISteamUser_SteamUser021_RequestStoreAuthURL( void * );
NTSTATUS ISteamUser_SteamUser021_BIsPhoneVerified( void * );
NTSTATUS ISteamUser_SteamUser021_BIsTwoFactorEnabled( void * );
NTSTATUS ISteamUser_SteamUser021_BIsPhoneIdentifying( void * );
NTSTATUS ISteamUser_SteamUser021_BIsPhoneRequiringVerification( void * );
NTSTATUS ISteamUser_SteamUser021_GetMarketEligibility( void * );
NTSTATUS ISteamUser_SteamUser021_GetDurationControl( void * );
NTSTATUS ISteamUser_SteamUser021_BSetDurationControlOnlineState( void * );
NTSTATUS ISteamUser_SteamUser022_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser022_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser022_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser022_InitiateGameConnection_DEPRECATED( void * );
NTSTATUS ISteamUser_SteamUser022_TerminateGameConnection_DEPRECATED( void * );
NTSTATUS ISteamUser_SteamUser022_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser022_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser022_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser022_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser022_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser022_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser022_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser022_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser022_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser022_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser022_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser022_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser022_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser022_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser022_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser022_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser022_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser022_GetGameBadgeLevel( void * );
NTSTATUS ISteamUser_SteamUser022_GetPlayerSteamLevel( void * );
NTSTATUS ISteamUser_SteamUser022_RequestStoreAuthURL( void * );
NTSTATUS ISteamUser_SteamUser022_BIsPhoneVerified( void * );
NTSTATUS ISteamUser_SteamUser022_BIsTwoFactorEnabled( void * );
NTSTATUS ISteamUser_SteamUser022_BIsPhoneIdentifying( void * );
NTSTATUS ISteamUser_SteamUser022_BIsPhoneRequiringVerification( void * );
NTSTATUS ISteamUser_SteamUser022_GetMarketEligibility( void * );
NTSTATUS ISteamUser_SteamUser022_GetDurationControl( void * );
NTSTATUS ISteamUser_SteamUser022_BSetDurationControlOnlineState( void * );
NTSTATUS ISteamUser_SteamUser023_GetHSteamUser( void * );
NTSTATUS ISteamUser_SteamUser023_BLoggedOn( void * );
NTSTATUS ISteamUser_SteamUser023_GetSteamID( void * );
NTSTATUS ISteamUser_SteamUser023_InitiateGameConnection_DEPRECATED( void * );
NTSTATUS ISteamUser_SteamUser023_TerminateGameConnection_DEPRECATED( void * );
NTSTATUS ISteamUser_SteamUser023_TrackAppUsageEvent( void * );
NTSTATUS ISteamUser_SteamUser023_GetUserDataFolder( void * );
NTSTATUS ISteamUser_SteamUser023_StartVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser023_StopVoiceRecording( void * );
NTSTATUS ISteamUser_SteamUser023_GetAvailableVoice( void * );
NTSTATUS ISteamUser_SteamUser023_GetVoice( void * );
NTSTATUS ISteamUser_SteamUser023_DecompressVoice( void * );
NTSTATUS ISteamUser_SteamUser023_GetVoiceOptimalSampleRate( void * );
NTSTATUS ISteamUser_SteamUser023_GetAuthSessionTicket( void * );
NTSTATUS ISteamUser_SteamUser023_GetAuthTicketForWebApi( void * );
NTSTATUS ISteamUser_SteamUser023_BeginAuthSession( void * );
NTSTATUS ISteamUser_SteamUser023_EndAuthSession( void * );
NTSTATUS ISteamUser_SteamUser023_CancelAuthTicket( void * );
NTSTATUS ISteamUser_SteamUser023_UserHasLicenseForApp( void * );
NTSTATUS ISteamUser_SteamUser023_BIsBehindNAT( void * );
NTSTATUS ISteamUser_SteamUser023_AdvertiseGame( void * );
NTSTATUS ISteamUser_SteamUser023_RequestEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser023_GetEncryptedAppTicket( void * );
NTSTATUS ISteamUser_SteamUser023_GetGameBadgeLevel( void * );
NTSTATUS ISteamUser_SteamUser023_GetPlayerSteamLevel( void * );
NTSTATUS ISteamUser_SteamUser023_RequestStoreAuthURL( void * );
NTSTATUS ISteamUser_SteamUser023_BIsPhoneVerified( void * );
NTSTATUS ISteamUser_SteamUser023_BIsTwoFactorEnabled( void * );
NTSTATUS ISteamUser_SteamUser023_BIsPhoneIdentifying( void * );
NTSTATUS ISteamUser_SteamUser023_BIsPhoneRequiringVerification( void * );
NTSTATUS ISteamUser_SteamUser023_GetMarketEligibility( void * );
NTSTATUS ISteamUser_SteamUser023_GetDurationControl( void * );
NTSTATUS ISteamUser_SteamUser023_BSetDurationControlOnlineState( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils002_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils002_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils002_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils004_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils004_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils004_RunFrame( void * );
NTSTATUS ISteamUtils_SteamUtils004_GetIPCCallCount( void * );
NTSTATUS ISteamUtils_SteamUtils004_SetWarningMessageHook( void * );
NTSTATUS ISteamUtils_SteamUtils004_IsOverlayEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils005_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils005_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils005_RunFrame( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetIPCCallCount( void * );
NTSTATUS ISteamUtils_SteamUtils005_SetWarningMessageHook( void * );
NTSTATUS ISteamUtils_SteamUtils005_IsOverlayEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils005_BOverlayNeedsPresent( void * );
NTSTATUS ISteamUtils_SteamUtils005_CheckFileSignature( void * );
NTSTATUS ISteamUtils_SteamUtils005_ShowGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetEnteredGamepadTextLength( void * );
NTSTATUS ISteamUtils_SteamUtils005_GetEnteredGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils006_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils006_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils006_RunFrame( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetIPCCallCount( void * );
NTSTATUS ISteamUtils_SteamUtils006_SetWarningMessageHook( void * );
NTSTATUS ISteamUtils_SteamUtils006_IsOverlayEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils006_BOverlayNeedsPresent( void * );
NTSTATUS ISteamUtils_SteamUtils006_CheckFileSignature( void * );
NTSTATUS ISteamUtils_SteamUtils006_ShowGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetEnteredGamepadTextLength( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetEnteredGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils006_GetSteamUILanguage( void * );
NTSTATUS ISteamUtils_SteamUtils006_IsSteamRunningInVR( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils007_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils007_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils007_RunFrame( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetIPCCallCount( void * );
NTSTATUS ISteamUtils_SteamUtils007_SetWarningMessageHook( void * );
NTSTATUS ISteamUtils_SteamUtils007_IsOverlayEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils007_BOverlayNeedsPresent( void * );
NTSTATUS ISteamUtils_SteamUtils007_CheckFileSignature( void * );
NTSTATUS ISteamUtils_SteamUtils007_ShowGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetEnteredGamepadTextLength( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetEnteredGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils007_GetSteamUILanguage( void * );
NTSTATUS ISteamUtils_SteamUtils007_IsSteamRunningInVR( void * );
NTSTATUS ISteamUtils_SteamUtils007_SetOverlayNotificationInset( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils008_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils008_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils008_RunFrame( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetIPCCallCount( void * );
NTSTATUS ISteamUtils_SteamUtils008_SetWarningMessageHook( void * );
NTSTATUS ISteamUtils_SteamUtils008_IsOverlayEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils008_BOverlayNeedsPresent( void * );
NTSTATUS ISteamUtils_SteamUtils008_CheckFileSignature( void * );
NTSTATUS ISteamUtils_SteamUtils008_ShowGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetEnteredGamepadTextLength( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetEnteredGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils008_GetSteamUILanguage( void * );
NTSTATUS ISteamUtils_SteamUtils008_IsSteamRunningInVR( void * );
NTSTATUS ISteamUtils_SteamUtils008_SetOverlayNotificationInset( void * );
NTSTATUS ISteamUtils_SteamUtils008_IsSteamInBigPictureMode( void * );
NTSTATUS ISteamUtils_SteamUtils008_StartVRDashboard( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils009_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils009_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils009_RunFrame( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetIPCCallCount( void * );
NTSTATUS ISteamUtils_SteamUtils009_SetWarningMessageHook( void * );
NTSTATUS ISteamUtils_SteamUtils009_IsOverlayEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils009_BOverlayNeedsPresent( void * );
NTSTATUS ISteamUtils_SteamUtils009_CheckFileSignature( void * );
NTSTATUS ISteamUtils_SteamUtils009_ShowGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetEnteredGamepadTextLength( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetEnteredGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetSteamUILanguage( void * );
NTSTATUS ISteamUtils_SteamUtils009_IsSteamRunningInVR( void * );
NTSTATUS ISteamUtils_SteamUtils009_SetOverlayNotificationInset( void * );
NTSTATUS ISteamUtils_SteamUtils009_IsSteamInBigPictureMode( void * );
NTSTATUS ISteamUtils_SteamUtils009_StartVRDashboard( void * );
NTSTATUS ISteamUtils_SteamUtils009_IsVRHeadsetStreamingEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils009_SetVRHeadsetStreamingEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils009_IsSteamChinaLauncher( void * );
NTSTATUS ISteamUtils_SteamUtils009_InitFilterText( void * );
NTSTATUS ISteamUtils_SteamUtils009_FilterText( void * );
NTSTATUS ISteamUtils_SteamUtils009_GetIPv6ConnectivityState( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetSecondsSinceAppActive( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetSecondsSinceComputerActive( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetConnectedUniverse( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetServerRealTime( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetIPCountry( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetImageSize( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetImageRGBA( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetCSERIPPort( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetCurrentBatteryPower( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetAppID( void * );
NTSTATUS ISteamUtils_SteamUtils010_SetOverlayNotificationPosition( void * );
NTSTATUS ISteamUtils_SteamUtils010_IsAPICallCompleted( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetAPICallFailureReason( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetAPICallResult( void * );
NTSTATUS ISteamUtils_SteamUtils010_RunFrame( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetIPCCallCount( void * );
NTSTATUS ISteamUtils_SteamUtils010_SetWarningMessageHook( void * );
NTSTATUS ISteamUtils_SteamUtils010_IsOverlayEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils010_BOverlayNeedsPresent( void * );
NTSTATUS ISteamUtils_SteamUtils010_CheckFileSignature( void * );
NTSTATUS ISteamUtils_SteamUtils010_ShowGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetEnteredGamepadTextLength( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetEnteredGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetSteamUILanguage( void * );
NTSTATUS ISteamUtils_SteamUtils010_IsSteamRunningInVR( void * );
NTSTATUS ISteamUtils_SteamUtils010_SetOverlayNotificationInset( void * );
NTSTATUS ISteamUtils_SteamUtils010_IsSteamInBigPictureMode( void * );
NTSTATUS ISteamUtils_SteamUtils010_StartVRDashboard( void * );
NTSTATUS ISteamUtils_SteamUtils010_IsVRHeadsetStreamingEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils010_SetVRHeadsetStreamingEnabled( void * );
NTSTATUS ISteamUtils_SteamUtils010_IsSteamChinaLauncher( void * );
NTSTATUS ISteamUtils_SteamUtils010_InitFilterText( void * );
NTSTATUS ISteamUtils_SteamUtils010_FilterText( void * );
NTSTATUS ISteamUtils_SteamUtils010_GetIPv6ConnectivityState( void * );
NTSTATUS ISteamUtils_SteamUtils010_IsSteamRunningOnSteamDeck( void * );
NTSTATUS ISteamUtils_SteamUtils010_ShowFloatingGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils010_SetGameLauncherMode( void * );
NTSTATUS ISteamUtils_SteamUtils010_DismissFloatingGamepadTextInput( void * );
NTSTATUS ISteamUtils_SteamUtils010_DismissGamepadTextInput( void * );

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
